// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    return object.__proto__ && object.__proto__.p === cls.prototype.p;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      var fieldNames = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        fieldNames += "'" + field + "',";
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
      str += accessors.join("");
      return str;
    }
    init.createNewIsolate = function() {
      return new Isolate();
    };
    init.classIdExtractor = function(o) {
      return o.constructor.name;
    };
    init.classFieldsExtractor = function(o) {
      var fieldNames = o.constructor.$__fields__;
      if (!fieldNames)
        return [];
      var result = [];
      result.length = fieldNames.length;
      for (var i = 0; i < fieldNames.length; i++)
        result[i] = o[fieldNames[i]];
      return result;
    };
    init.instanceFromClassId = function(name) {
      return new init.allClasses[name]();
    };
    init.initializeEmptyInstance = function(name, o, fields) {
      init.allClasses[name].apply(o, fields);
      return o;
    };
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
      var isReflectable = array.length > unmangledNameIndex;
      if (isReflectable) {
        funcs[0].$reflectable = 1;
        funcs[0].$reflectionInfo = array;
        for (var i = 1; i < funcs.length; i++) {
          funcs[i].$reflectable = 2;
          funcs[i].$reflectionInfo = array;
        }
        var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
        var unmangledName = array[unmangledNameIndex];
        var reflectionName = unmangledName;
        if (getterStubName)
          mangledNames[getterStubName] = reflectionName;
        if (isSetter)
          reflectionName += "=";
        else if (!isGetter)
          reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
        mangledNames[name] = reflectionName;
        funcs[0].$reflectionName = reflectionName;
        funcs[0].$metadataIndex = unmangledNameIndex + 1;
        if (optionalParameterCount)
          prototype[unmangledName + "*"] = funcs[0];
      }
    }
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor == null) {
        if (typeof object == "function")
          return C.JavaScriptFunction_methods;
        proto = Object.getPrototypeOf(object);
        if (proto == null || proto === Object.prototype)
          return C.PlainJavaScriptObject_methods;
        else
          return C.UnknownJavaScriptObject_methods;
      }
      return interceptor;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }],
      noSuchMethod$1: ["super$Interceptor$noSuchMethod", function(receiver, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, null, "get$noSuchMethod", 2, 0, null, 10],
      get$runtimeType: function(receiver) {
        return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
      },
      "%": "ANGLEInstancedArrays|AnimationEffectReadOnly|AnimationEffectTiming|AnimationTimeline|AppBannerPromptResult|AudioListener|AudioTrack|BarProp|Bluetooth|BluetoothDevice|BluetoothGATTCharacteristic|BluetoothGATTRemoteServer|BluetoothGATTService|BluetoothUUID|Body|CHROMIUMSubscribeUniform|CHROMIUMValuebuffer|CSS|Cache|CacheStorage|CanvasGradient|CanvasPattern|CanvasRenderingContext2D|CircularGeofencingRegion|Client|Clients|CompositorProxy|ConsoleBase|Coordinates|CredentialsContainer|Crypto|DOMError|DOMFileSystem|DOMFileSystemSync|DOMImplementation|DOMMatrix|DOMMatrixReadOnly|DOMParser|DOMPoint|DOMPointReadOnly|DataTransfer|Database|DeprecatedStorageInfo|DeprecatedStorageQuota|DeviceAcceleration|DeviceRotationRate|DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|EXTBlendMinMax|EXTFragDepth|EXTShaderTextureLOD|EXTTextureFilterAnisotropic|EXTsRGB|EffectModel|EntrySync|FileEntrySync|FileError|FileReaderSync|FileWriterSync|FormData|GamepadButton|Geofencing|GeofencingRegion|Geolocation|Geoposition|HMDVRDevice|HTMLAllCollection|Headers|IDBCursor|IDBCursorWithValue|IDBFactory|IDBObjectStore|ImageBitmap|InjectedScriptHost|InputDevice|Iterator|KeyframeEffect|MIDIInputMap|MIDIOutputMap|MediaDeviceInfo|MediaDevices|MediaError|MediaKeyError|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeys|MediaSession|MemoryInfo|MessageChannel|Metadata|MutationObserver|NavigatorStorageUtils|NavigatorUserMediaError|NodeFilter|NodeIterator|NonDocumentTypeChildNode|NonElementParentNode|OESElementIndexUint|OESStandardDerivatives|OESTextureFloat|OESTextureFloatLinear|OESTextureHalfFloat|OESTextureHalfFloatLinear|OESVertexArrayObject|PagePopupController|PerformanceCompositeTiming|PerformanceEntry|PerformanceMark|PerformanceMeasure|PerformanceRenderTiming|PerformanceResourceTiming|PerformanceTiming|PeriodicSyncManager|PeriodicSyncRegistration|PeriodicWave|Permissions|PositionError|PositionSensorVRDevice|PushManager|PushMessageData|PushSubscription|RTCIceCandidate|RTCStatsResponse|Range|Request|Response|SQLError|SQLResultSet|SQLTransaction|SVGAngle|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGPoint|SVGPreserveAspectRatio|SVGRect|SVGUnitTypes|Screen|ServicePort|SharedArrayBuffer|SourceInfo|SpeechRecognitionAlternative|StorageInfo|StorageQuota|SubtleCrypto|SyncManager|SyncRegistration|TextMetrics|TreeWalker|VRDevice|VREyeParameters|VRFieldOfView|VRPositionState|VTTRegion|ValidityState|VideoPlaybackQuality|VideoTrack|WebGLBuffer|WebGLCompressedTextureATC|WebGLCompressedTextureETC1|WebGLCompressedTexturePVRTC|WebGLCompressedTextureS3TC|WebGLDebugRendererInfo|WebGLDebugShaders|WebGLDepthTexture|WebGLDrawBuffers|WebGLExtensionLoseContext|WebGLFramebuffer|WebGLLoseContext|WebGLProgram|WebGLQuery|WebGLRenderbuffer|WebGLSampler|WebGLShader|WebGLShaderPrecisionFormat|WebGLSync|WebGLTexture|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES|WebKitCSSMatrix|WebKitMutationObserver|WindowClient|WorkerConsole|XMLSerializer|XPathEvaluator|XPathExpression|XPathNSResolver|XPathResult|XSLTProcessor|mozRTCIceCandidate"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      get$runtimeType: function(receiver) {
        return C.Type_Null_Yyn;
      },
      noSuchMethod$1: [function(receiver, invocation) {
        return this.super$Interceptor$noSuchMethod(receiver, invocation);
      }, null, "get$noSuchMethod", 2, 0, null, 10]
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }],
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        return dartClosure == null ? this.super$JavaScriptObject$toString(receiver) : J.toString$0$(dartClosure);
      },
      $isFunction: 1
    },
    JSArray: {
      "^": "Interceptor;",
      checkMutable$1: function(receiver, reason) {
        if (!!receiver.immutable$list)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      add$1: function(receiver, value) {
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      addAll$1: function(receiver, collection) {
        var t1;
        this.checkGrowable$1(receiver, "addAll");
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      forEach$1: function(receiver, f) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      map$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
      },
      join$1: function(receiver, separator) {
        var list, i;
        list = new Array(receiver.length);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i)
          list[i] = H.S(receiver[i]);
        return list.join(separator);
      },
      fold$2: function(receiver, initialValue, combine) {
        var $length, value, i;
        $length = receiver.length;
        for (value = initialValue, i = 0; i < $length; ++i) {
          value = combine.call$2(value, receiver[i]);
          if (receiver.length !== $length)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
        if (start === end)
          return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
        return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var $length, i;
        this.checkMutable$1(receiver, "set range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        if (skipCount + $length > iterable.length)
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i)
            receiver[start + i] = iterable[skipCount + i];
        else
          for (i = 0; i < $length; ++i)
            receiver[start + i] = iterable[skipCount + i];
      },
      any$1: function(receiver, test) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (test.call$1(receiver[i]))
            return true;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return false;
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      get$iterator: function(receiver) {
        return H.setRuntimeTypeInfo(new J.ArrayIterator(receiver, receiver.length, 0, null), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        this.checkGrowable$1(receiver, "set length");
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        this.checkMutable$1(receiver, "indexed set");
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1
    },
    JSUnmodifiableArray: {
      "^": "JSArray;"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current",
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.__interceptors$_current = null;
          return false;
        }
        this.__interceptors$_current = t1[t2];
        this.__interceptors$_index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      compareTo$1: function(receiver, b) {
        var bIsNegative;
        if (typeof b !== "number")
          throw H.wrapException(H.argumentErrorValue(b));
        if (receiver < b)
          return -1;
        else if (receiver > b)
          return 1;
        else if (receiver === b) {
          if (receiver === 0) {
            bIsNegative = this.get$isNegative(b);
            if (this.get$isNegative(receiver) === bIsNegative)
              return 0;
            if (this.get$isNegative(receiver))
              return -1;
            return 1;
          }
          return 0;
        } else if (isNaN(receiver)) {
          if (isNaN(b))
            return 0;
          return 1;
        } else
          return -1;
      },
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      remainder$1: function(receiver, b) {
        return receiver % b;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      roundToDouble$0: function(receiver) {
        if (receiver < 0)
          return -Math.round(-receiver);
        else
          return Math.round(receiver);
      },
      clamp$2: function(receiver, lowerLimit, upperLimit) {
        if (this.compareTo$1(lowerLimit, upperLimit) > 0)
          throw H.wrapException(H.argumentErrorValue(lowerLimit));
        if (this.compareTo$1(receiver, lowerLimit) < 0)
          return lowerLimit;
        if (this.compareTo$1(receiver, upperLimit) > 0)
          return upperLimit;
        return receiver;
      },
      toDouble$0: function(receiver) {
        return receiver;
      },
      toStringAsFixed$1: function(receiver, fractionDigits) {
        var result;
        H.checkInt(fractionDigits);
        if (fractionDigits > 20)
          throw H.wrapException(P.RangeError$range(fractionDigits, 0, 20, "fractionDigits", null));
        result = receiver.toFixed(fractionDigits);
        if (receiver === 0 && this.get$isNegative(receiver))
          return "-" + result;
        return result;
      },
      toRadixString$1: function(receiver, radix) {
        var result, match, t1, exponent;
        H.checkInt(radix);
        if (radix < 2 || radix > 36)
          throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
        result = receiver.toString(radix);
        if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
          return result;
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
        if (match == null)
          H.throwExpression(new P.UnsupportedError("Unexpected toString result: " + result));
        t1 = J.getInterceptor$asx(match);
        result = t1.$index(match, 1);
        exponent = +t1.$index(match, 3);
        if (t1.$index(match, 2) != null) {
          result += t1.$index(match, 2);
          exponent -= t1.$index(match, 2).length;
        }
        return result + C.JSString_methods.$mul("0", exponent);
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $negate: function(receiver) {
        return -receiver;
      },
      $add: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $sub: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver - other;
      },
      $mod: function(receiver, other) {
        var result = receiver % other;
        if (result === 0)
          return 0;
        if (result > 0)
          return result;
        if (other < 0)
          return result - other;
        else
          return result + other;
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
      },
      _shlPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $le: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver <= other;
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      $is$double: 1,
      $isnum: 1,
      $is$int: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      $is$double: 1,
      $isnum: 1
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, i;
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        t1 = receiver.length;
        if (start + t1 > string.length)
          return;
        for (i = 0; i < t1; ++i)
          if (this.codeUnitAt$1(string, start + i) !== this.codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      startsWith$2: function(receiver, pattern, index) {
        var endIndex;
        H.checkInt(index);
        if (index > receiver.length)
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        if (typeof pattern === "string") {
          endIndex = index + pattern.length;
          if (endIndex > receiver.length)
            return false;
          return pattern === receiver.substring(index, endIndex);
        }
        return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
          H.throwExpression(H.argumentErrorValue(endIndex));
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      toLowerCase$0: function(receiver) {
        return receiver.toLowerCase();
      },
      toUpperCase$0: function(receiver) {
        return receiver.toUpperCase();
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this.codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      indexOf$2: function(receiver, pattern, start) {
        if (start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        return receiver.indexOf(pattern, start);
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >= receiver.length || false)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $isString: 1,
      static: {
        JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 6158:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        },
        JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        },
        JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }
      }
    }
  }], ["_isolate_helper", "dart:_isolate_helper",, H, {
    "^": "",
    _callInIsolate: function(isolate, $function) {
      var result = isolate.eval$1($function);
      if (!init.globalState.currentContext._isExecutingEvent)
        init.globalState.topEventLoop.run$0();
      return result;
    },
    startRootIsolate: function(entry, args) {
      var t1, t2, t3, t4, t5, rootContext;
      t1 = {};
      t1.args = args;
      if (args == null) {
        args = [];
        t1.args = args;
        t2 = args;
      } else
        t2 = args;
      if (!J.getInterceptor(t2).$isList)
        throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
      init.globalState = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
      t2 = init.globalState;
      t3 = self.window == null;
      t4 = self.Worker;
      t5 = t3 && !!self.postMessage;
      t2.isWorker = t5;
      t5 = !t5;
      if (t5)
        t4 = t4 != null && $.$get$IsolateNatives_thisScript() != null;
      else
        t4 = true;
      t2.supportsWorkers = t4;
      t2.fromCommandLine = t3 && t5;
      t2.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      t2.isolates = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.$int, H._IsolateContext]);
      t2.managers = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.$int, null]);
      if (t2.isWorker) {
        t3 = new H._MainManagerStub();
        t2.mainManager = t3;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t3);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      }
      if (init.globalState.isWorker)
        return;
      t2 = init.globalState.nextIsolateId++;
      t3 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.$int, H.RawReceivePortImpl]);
      t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
      t5 = new H.RawReceivePortImpl(0, null, false);
      rootContext = new H._IsolateContext(t2, t3, t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      t4.add$1(0, 0);
      rootContext._addRegistration$2(0, t5);
      init.globalState.rootContext = rootContext;
      init.globalState.currentContext = rootContext;
      t2 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
      if (t3)
        rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
      else {
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
        if (t2)
          rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
        else
          rootContext.eval$1(entry);
      }
      init.globalState.topEventLoop.run$0();
    },
    IsolateNatives_computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (init.globalState.isWorker)
        return H.IsolateNatives_computeThisScriptFromTrace();
      return;
    },
    IsolateNatives_computeThisScriptFromTrace: function() {
      var stack, matches;
      stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(new P.UnsupportedError("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(new P.UnsupportedError('Cannot extract URI from "' + H.S(stack) + '"'));
    },
    IsolateNatives__processWorkerMessage: [function(sender, e) {
      var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
      msg = new H._Deserializer(true, []).deserialize$1(e.data);
      t1 = J.getInterceptor$asx(msg);
      switch (t1.$index(msg, "command")) {
        case "start":
          init.globalState.currentManagerId = t1.$index(msg, "id");
          functionName = t1.$index(msg, "functionName");
          entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
          args = t1.$index(msg, "args");
          message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
          isSpawnUri = t1.$index(msg, "isSpawnUri");
          startPaused = t1.$index(msg, "startPaused");
          replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
          t1 = init.globalState.nextIsolateId++;
          t2 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.$int, H.RawReceivePortImpl]);
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
          t4 = new H.RawReceivePortImpl(0, null, false);
          context = new H._IsolateContext(t1, t2, t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          t3.add$1(0, 0);
          context._addRegistration$2(0, t4);
          init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
          init.globalState.currentContext = context;
          init.globalState.topEventLoop.run$0();
          break;
        case "spawn-worker":
          break;
        case "message":
          if (t1.$index(msg, "port") != null)
            J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
          init.globalState.topEventLoop.run$0();
          break;
        case "close":
          init.globalState.managers.remove$1(0, $.$get$IsolateNatives_workerIds().$index(0, sender));
          sender.terminate();
          init.globalState.topEventLoop.run$0();
          break;
        case "log":
          H.IsolateNatives__log(t1.$index(msg, "msg"));
          break;
        case "print":
          if (init.globalState.isWorker) {
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", msg]);
            t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          } else
            P.print(t1.$index(msg, "msg"));
          break;
        case "error":
          throw H.wrapException(t1.$index(msg, "msg"));
      }
    }, null, null, 4, 0, null, 34, 0],
    IsolateNatives__log: function(msg) {
      var trace, t1, t2, exception;
      if (init.globalState.isWorker) {
        t1 = init.globalState.mainManager;
        t2 = P.LinkedHashMap__makeLiteral(["command", "log", "msg", msg]);
        t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
        t1.toString;
        self.postMessage(t2);
      } else
        try {
          self.console.log(msg);
        } catch (exception) {
          H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          throw H.wrapException(P.Exception_Exception(trace));
        }
    },
    IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
      var context, t1, t2, t3;
      context = init.globalState.currentContext;
      t1 = context.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
      t1 = context.controlPort;
      t2 = init.globalState.currentContext.id;
      t3 = context.pauseCapability;
      replyTo.send$1(0, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
      t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
      if (startPaused) {
        context.addPause$2(t3, t3);
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, t2, "start isolate"));
      } else
        t2.call$0();
    },
    _clone: function(message) {
      return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(message));
    },
    startRootIsolate_closure: {
      "^": "Closure:0;_box_0,entry",
      call$0: function() {
        this.entry.call$1(this._box_0.args);
      }
    },
    startRootIsolate_closure0: {
      "^": "Closure:0;_box_0,entry",
      call$0: function() {
        this.entry.call$2(this._box_0.args, null);
      }
    },
    _Manager: {
      "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
      static: {
        _Manager__serializePrintMessage: [function(object) {
          var t1 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", object]);
          return new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t1);
        }, null, null, 2, 0, null, 18]
      }
    },
    _IsolateContext: {
      "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized,isPaused,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
      addPause$2: function(authentification, resume) {
        if (!this.pauseCapability.$eq(0, authentification))
          return;
        if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
          this.isPaused = true;
        this._updateGlobalState$0();
      },
      removePause$1: function(resume) {
        var t1, $event, t2, t3, t4;
        if (!this.isPaused)
          return;
        t1 = this.pauseTokens;
        t1.remove$1(0, resume);
        if (t1._collection$_length === 0) {
          for (t1 = this.delayedEvents; t1.length !== 0;) {
            $event = t1.pop();
            t2 = init.globalState.topEventLoop.events;
            t3 = t2._head;
            t4 = t2._table;
            t3 = (t3 - 1 & t4.length - 1) >>> 0;
            t2._head = t3;
            t4[t3] = $event;
            if (t3 === t2._tail)
              t2._grow$0();
            ++t2._modificationCount;
          }
          this.isPaused = false;
        }
        this._updateGlobalState$0();
      },
      addDoneListener$2: function(responsePort, response) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          this.doneHandlers = [];
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            this.doneHandlers[i + 1] = response;
            return;
          }
        t2.push(responsePort);
        this.doneHandlers.push(response);
      },
      removeDoneListener$1: function(responsePort) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          return;
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 2;
            t1.toString;
            if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
              H.throwExpression(new P.UnsupportedError("removeRange"));
            P.RangeError_checkValidRange(i, t2, t1.length, null, null, null);
            t1.splice(i, t2 - i);
            return;
          }
      },
      setErrorsFatal$2: function(authentification, errorsAreFatal) {
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        this.errorsAreFatal = errorsAreFatal;
      },
      handlePing$3: function(responsePort, pingType, response) {
        var t1;
        if (pingType !== 0)
          t1 = pingType === 1 && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          responsePort.send$1(0, response);
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(0, new H._IsolateContext_handlePing_respond(responsePort, response));
      },
      handleKill$2: function(authentification, priority) {
        var t1;
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        if (priority !== 0)
          t1 = priority === 1 && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          this.kill$0();
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(0, this.get$kill());
      },
      handleUncaughtError$2: function(error, stackTrace) {
        var t1, message;
        t1 = this.errorPorts;
        if (t1._collection$_length === 0) {
          if (this.errorsAreFatal && this === init.globalState.rootContext)
            return;
          if (self.console && self.console.error)
            self.console.error(error, stackTrace);
          else {
            P.print(error);
            if (stackTrace != null)
              P.print(stackTrace);
          }
          return;
        }
        message = new Array(2);
        message.fixed$length = Array;
        message[0] = J.toString$0$(error);
        message[1] = stackTrace == null ? null : stackTrace.toString$0(0);
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(t1, t1._collection$_modifications, null, null), [null]), t1._collection$_cell = t1._set._collection$_first; t1.moveNext$0();)
          t1._collection$_current.send$1(0, message);
      },
      eval$1: function(code) {
        var old, result, oldIsExecutingEvent, e, s, exception, t1;
        old = init.globalState.currentContext;
        init.globalState.currentContext = this;
        $ = this.isolateStatics;
        result = null;
        oldIsExecutingEvent = this._isExecutingEvent;
        this._isExecutingEvent = true;
        try {
          result = code.call$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
          if (this.errorsAreFatal) {
            this.kill$0();
            if (this === init.globalState.rootContext)
              throw exception;
          }
        } finally {
          this._isExecutingEvent = oldIsExecutingEvent;
          init.globalState.currentContext = old;
          if (old != null)
            $ = old.get$isolateStatics();
          if (this._scheduledControlEvents != null)
            for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
              this._scheduledControlEvents.removeFirst$0().call$0();
        }
        return result;
      },
      handleControlMessage$1: function(message) {
        var t1 = J.getInterceptor$asx(message);
        switch (t1.$index(message, 0)) {
          case "pause":
            this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "resume":
            this.removePause$1(t1.$index(message, 1));
            break;
          case "add-ondone":
            this.addDoneListener$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "remove-ondone":
            this.removeDoneListener$1(t1.$index(message, 1));
            break;
          case "set-errors-fatal":
            this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "ping":
            this.handlePing$3(t1.$index(message, 1), t1.$index(message, 2), t1.$index(message, 3));
            break;
          case "kill":
            this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "getErrors":
            this.errorPorts.add$1(0, t1.$index(message, 1));
            break;
          case "stopErrors":
            this.errorPorts.remove$1(0, t1.$index(message, 1));
            break;
        }
      },
      lookup$1: function(portId) {
        return this.ports.$index(0, portId);
      },
      _addRegistration$2: function(portId, port) {
        var t1 = this.ports;
        if (t1.containsKey$1(0, portId))
          throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
        t1.$indexSet(0, portId, port);
      },
      _updateGlobalState$0: function() {
        var t1 = this.ports;
        if (t1.get$length(t1) - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
          init.globalState.isolates.$indexSet(0, this.id, this);
        else
          this.kill$0();
      },
      kill$0: [function() {
        var t1, t2, i;
        t1 = this._scheduledControlEvents;
        if (t1 != null)
          t1.clear$0(0);
        for (t1 = this.ports, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          t2.get$current().__isolate_helper$_close$0();
        t1.clear$0(0);
        this.weakPorts.clear$0(0);
        init.globalState.isolates.remove$1(0, this.id);
        this.errorPorts.clear$0(0);
        if (this.doneHandlers != null) {
          for (i = 0; t1 = this.doneHandlers, i < t1.length; i += 2)
            t1[i].send$1(0, t1[i + 1]);
          this.doneHandlers = null;
        }
      }, "call$0", "get$kill", 0, 0, 3]
    },
    _IsolateContext_handlePing_respond: {
      "^": "Closure:3;responsePort,response",
      call$0: [function() {
        this.responsePort.send$1(0, this.response);
      }, null, null, 0, 0, null, "call"]
    },
    _EventLoop: {
      "^": "Object;events,_activeJsAsyncCount",
      dequeue$0: function() {
        var t1 = this.events;
        if (t1._head === t1._tail)
          return;
        return t1.removeFirst$0();
      },
      runIteration$0: function() {
        var $event, t1, t2;
        $event = this.dequeue$0();
        if ($event == null) {
          if (init.globalState.rootContext != null)
            if (init.globalState.isolates.containsKey$1(0, init.globalState.rootContext.id))
              if (init.globalState.fromCommandLine) {
                t1 = init.globalState.rootContext.ports;
                t1 = t1.get$isEmpty(t1);
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
          t1 = init.globalState;
          if (t1.isWorker) {
            t2 = t1.isolates;
            t2 = t2.get$isEmpty(t2) && t1.topEventLoop._activeJsAsyncCount === 0;
          } else
            t2 = false;
          if (t2) {
            t1 = t1.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "close"]);
            t2 = new H._Serializer(true, H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [null, P.$int])).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
          return false;
        }
        $event.process$0();
        return true;
      },
      _runHelper$0: function() {
        if (self.window != null)
          new H._EventLoop__runHelper_next(this).call$0();
        else
          for (; this.runIteration$0();)
            ;
      },
      run$0: function() {
        var e, trace, exception, t1, t2;
        if (!init.globalState.isWorker)
          this._runHelper$0();
        else
          try {
            this._runHelper$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            trace = H.getTraceFromException(exception);
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]);
            t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
      }
    },
    _EventLoop__runHelper_next: {
      "^": "Closure:3;$this",
      call$0: function() {
        if (!this.$this.runIteration$0())
          return;
        P.Timer_Timer(C.Duration_0, this);
      }
    },
    _IsolateEvent: {
      "^": "Object;isolate,fn,message",
      process$0: function() {
        var t1 = this.isolate;
        if (t1.isPaused) {
          t1.delayedEvents.push(this);
          return;
        }
        t1.eval$1(this.fn);
      }
    },
    _MainManagerStub: {
      "^": "Object;"
    },
    IsolateNatives__processWorkerMessage_closure: {
      "^": "Closure:0;entryPoint,args,message,isSpawnUri,startPaused,replyTo",
      call$0: function() {
        H.IsolateNatives__startIsolate(this.entryPoint, this.args, this.message, this.isSpawnUri, this.startPaused, this.replyTo);
      }
    },
    IsolateNatives__startIsolate_runStartFunction: {
      "^": "Closure:3;topLevel,args,message,isSpawnUri,context",
      call$0: function() {
        var t1, t2, t3, t4;
        t1 = this.context;
        t1.initialized = true;
        if (!this.isSpawnUri)
          this.topLevel.call$1(this.message);
        else {
          t2 = this.topLevel;
          t3 = H.getDynamicRuntimeType();
          t4 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
          if (t4)
            t2.call$2(this.args, this.message);
          else {
            t3 = H.buildFunctionType(t3, [t3])._isTest$1(t2);
            if (t3)
              t2.call$1(this.args);
            else
              t2.call$0();
          }
        }
        t1._updateGlobalState$0();
      }
    },
    _BaseSendPort: {
      "^": "Object;"
    },
    _NativeJsSendPort: {
      "^": "_BaseSendPort;_receivePort,_isolateId",
      send$1: function(_, message) {
        var isolate, t1, msg, t2;
        isolate = init.globalState.isolates.$index(0, this._isolateId);
        if (isolate == null)
          return;
        t1 = this._receivePort;
        if (t1._isClosed)
          return;
        msg = H._clone(message);
        if (isolate.get$controlPort() === t1) {
          isolate.handleControlMessage$1(msg);
          return;
        }
        t1 = init.globalState.topEventLoop;
        t2 = "receive " + H.S(message);
        t1.events._add$1(0, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), t2));
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H._NativeJsSendPort) {
          t1 = this._receivePort;
          t2 = other._receivePort;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return this._receivePort._id;
      }
    },
    _NativeJsSendPort_send_closure: {
      "^": "Closure:0;$this,msg",
      call$0: function() {
        var t1 = this.$this._receivePort;
        if (!t1._isClosed)
          t1.__isolate_helper$_add$1(0, this.msg);
      }
    },
    _WorkerSendPort: {
      "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
      send$1: function(_, message) {
        var t1, workerMessage, manager;
        t1 = P.LinkedHashMap__makeLiteral(["command", "message", "port", this, "msg", message]);
        workerMessage = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t1);
        if (init.globalState.isWorker) {
          init.globalState.mainManager.toString;
          self.postMessage(workerMessage);
        } else {
          manager = init.globalState.managers.$index(0, this._workerId);
          if (manager != null)
            manager.postMessage(workerMessage);
        }
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H._WorkerSendPort) {
          t1 = this._workerId;
          t2 = other._workerId;
          if (t1 == null ? t2 == null : t1 === t2) {
            t1 = this._isolateId;
            t2 = other._isolateId;
            if (t1 == null ? t2 == null : t1 === t2) {
              t1 = this._receivePortId;
              t2 = other._receivePortId;
              t2 = t1 == null ? t2 == null : t1 === t2;
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return (this._workerId << 16 ^ this._isolateId << 8 ^ this._receivePortId) >>> 0;
      }
    },
    RawReceivePortImpl: {
      "^": "Object;_id,_handler,_isClosed",
      __isolate_helper$_close$0: function() {
        this._isClosed = true;
        this._handler = null;
      },
      __isolate_helper$_add$1: function(_, dataEvent) {
        if (this._isClosed)
          return;
        this._handler$1(dataEvent);
      },
      _handler$1: function(arg0) {
        return this._handler.call$1(arg0);
      },
      $isRawReceivePort: 1
    },
    TimerImpl: {
      "^": "Object;_once,_inEventLoop,_handle",
      cancel$0: function(_) {
        var t1;
        if (self.setTimeout != null) {
          if (this._inEventLoop)
            throw H.wrapException(new P.UnsupportedError("Timer in event loop cannot be canceled."));
          t1 = this._handle;
          if (t1 == null)
            return;
          --init.globalState.topEventLoop._activeJsAsyncCount;
          self.clearTimeout(t1);
          this._handle = null;
        } else
          throw H.wrapException(new P.UnsupportedError("Canceling a timer."));
      },
      TimerImpl$2: function(milliseconds, callback) {
        var t1, t2;
        if (milliseconds === 0)
          t1 = self.setTimeout == null || init.globalState.isWorker;
        else
          t1 = false;
        if (t1) {
          this._handle = 1;
          t1 = init.globalState.topEventLoop;
          t2 = init.globalState.currentContext;
          t1.events._add$1(0, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
          this._inEventLoop = true;
        } else if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
      },
      static: {
        TimerImpl$: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(true, false, null);
          t1.TimerImpl$2(milliseconds, callback);
          return t1;
        }
      }
    },
    TimerImpl_internalCallback: {
      "^": "Closure:3;$this,callback",
      call$0: function() {
        this.$this._handle = null;
        this.callback.call$0();
      }
    },
    TimerImpl_internalCallback0: {
      "^": "Closure:3;$this,callback",
      call$0: [function() {
        this.$this._handle = null;
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    CapabilityImpl: {
      "^": "Object;_id",
      get$hashCode: function(_) {
        var hash = this._id;
        hash = C.JSInt_methods._shrOtherPositive$1(hash, 0) ^ C.JSInt_methods._tdivFast$1(hash, 4294967296);
        hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
        hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
        hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
        return (hash ^ hash >>> 16) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof H.CapabilityImpl) {
          t1 = this._id;
          t2 = other._id;
          return t1 == null ? t2 == null : t1 === t2;
        }
        return false;
      }
    },
    _Serializer: {
      "^": "Object;_serializeSendPorts,serializedObjectIds",
      serialize$1: [function(x) {
        var t1, serializationId, serializeTearOff, t2, $name;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        t1 = this.serializedObjectIds;
        serializationId = t1.$index(0, x);
        if (serializationId != null)
          return ["ref", serializationId];
        t1.$indexSet(0, x, t1.get$length(t1));
        t1 = J.getInterceptor(x);
        if (!!t1.$isNativeByteBuffer)
          return ["buffer", x];
        if (!!t1.$isNativeTypedData)
          return ["typed", x];
        if (!!t1.$isJSIndexable)
          return this.serializeJSIndexable$1(x);
        if (!!t1.$isInternalMap) {
          serializeTearOff = this.get$serialize();
          t2 = t1.get$keys(x);
          t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "Iterable", 0), null);
          t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
          t1 = t1.get$values(x);
          t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
          return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0))];
        }
        if (!!t1.$isJSObject)
          return this.serializeJSObject$1(x);
        if (!!t1.$isInterceptor)
          this.unsupported$1(x);
        if (!!t1.$isRawReceivePort)
          this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
        if (!!t1.$is_NativeJsSendPort)
          return this.serializeJsSendPort$1(x);
        if (!!t1.$is_WorkerSendPort)
          return this.serializeWorkerSendPort$1(x);
        if (!!t1.$isClosure) {
          $name = x.$static_name;
          if ($name == null)
            this.unsupported$2(x, "Closures can't be transmitted:");
          return ["function", $name];
        }
        if (!!t1.$isCapabilityImpl)
          return ["capability", x._id];
        if (!(x instanceof P.Object))
          this.unsupported$1(x);
        return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
      }, "call$1", "get$serialize", 2, 0, 1, 8],
      unsupported$2: function(x, message) {
        throw H.wrapException(new P.UnsupportedError(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
      },
      unsupported$1: function(x) {
        return this.unsupported$2(x, null);
      },
      serializeJSIndexable$1: function(indexable) {
        var serialized = this.serializeArray$1(indexable);
        if (!!indexable.fixed$length)
          return ["fixed", serialized];
        if (!indexable.fixed$length)
          return ["extendable", serialized];
        if (!indexable.immutable$list)
          return ["mutable", serialized];
        if (indexable.constructor === Array)
          return ["const", serialized];
        this.unsupported$2(indexable, "Can't serialize indexable: ");
      },
      serializeArray$1: function(x) {
        var serialized, i;
        serialized = [];
        C.JSArray_methods.set$length(serialized, x.length);
        for (i = 0; i < x.length; ++i)
          serialized[i] = this.serialize$1(x[i]);
        return serialized;
      },
      serializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
        return x;
      },
      serializeJSObject$1: function(x) {
        var keys, values, i;
        if (!!x.constructor && x.constructor !== Object)
          this.unsupported$2(x, "Only plain JS Objects are supported:");
        keys = Object.keys(x);
        values = [];
        C.JSArray_methods.set$length(values, keys.length);
        for (i = 0; i < keys.length; ++i)
          values[i] = this.serialize$1(x[keys[i]]);
        return ["js-object", keys, values];
      },
      serializeWorkerSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", x._workerId, x._isolateId, x._receivePortId];
        return ["raw sendport", x];
      },
      serializeJsSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort._id];
        return ["raw sendport", x];
      }
    },
    _Deserializer: {
      "^": "Object;_adjustSendPorts,deserializedObjects",
      deserialize$1: [function(x) {
        var result, t1, classId, fields, emptyInstance;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        if (typeof x !== "object" || x === null || x.constructor !== Array)
          throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
        switch (C.JSArray_methods.get$first(x)) {
          case "ref":
            return this.deserializedObjects[x[1]];
          case "buffer":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "typed":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "fixed":
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "extendable":
            result = x[1];
            this.deserializedObjects.push(result);
            return H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
          case "mutable":
            result = x[1];
            this.deserializedObjects.push(result);
            return this.deserializeArrayInPlace$1(result);
          case "const":
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "map":
            return this.deserializeMap$1(x);
          case "sendport":
            return this.deserializeSendPort$1(x);
          case "raw sendport":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "js-object":
            return this.deserializeJSObject$1(x);
          case "function":
            result = init.globalFunctions[x[1]]();
            this.deserializedObjects.push(result);
            return result;
          case "capability":
            return new H.CapabilityImpl(x[1]);
          case "dart":
            classId = x[1];
            fields = x[2];
            emptyInstance = init.instanceFromClassId(classId);
            this.deserializedObjects.push(emptyInstance);
            this.deserializeArrayInPlace$1(fields);
            return init.initializeEmptyInstance(classId, emptyInstance, fields);
          default:
            throw H.wrapException("couldn't deserialize: " + H.S(x));
        }
      }, "call$1", "get$deserialize", 2, 0, 1, 8],
      deserializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.deserialize$1(x[i]));
        return x;
      },
      deserializeMap$1: function(x) {
        var keys, values, result, t1, i;
        keys = x[1];
        values = x[2];
        result = P.LinkedHashMap__makeEmpty();
        this.deserializedObjects.push(result);
        keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
        for (t1 = J.getInterceptor$asx(values), i = 0; i < keys.length; ++i)
          result.$indexSet(0, keys[i], this.deserialize$1(t1.$index(values, i)));
        return result;
      },
      deserializeSendPort$1: function(x) {
        var managerId, isolateId, receivePortId, t1, isolate, receivePort, result;
        managerId = x[1];
        isolateId = x[2];
        receivePortId = x[3];
        t1 = init.globalState.currentManagerId;
        if (managerId == null ? t1 == null : managerId === t1) {
          isolate = init.globalState.isolates.$index(0, isolateId);
          if (isolate == null)
            return;
          receivePort = isolate.lookup$1(receivePortId);
          if (receivePort == null)
            return;
          result = new H._NativeJsSendPort(receivePort, isolateId);
        } else
          result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
        this.deserializedObjects.push(result);
        return result;
      },
      deserializeJSObject$1: function(x) {
        var keys, values, o, t1, t2, i;
        keys = x[1];
        values = x[2];
        o = {};
        this.deserializedObjects.push(o);
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i)
          o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
        return o;
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    getType: function(index) {
      return init.types[index];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives__parseIntError: function(source, handleError) {
      throw H.wrapException(new P.FormatException(source, null, null));
    },
    Primitives_parseInt: function(source, radix, handleError) {
      var match, decimalMatch;
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return H.Primitives__parseIntError(source, handleError);
      decimalMatch = match[3];
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return H.Primitives__parseIntError(source, handleError);
    },
    Primitives__parseDoubleError: function(source, handleError) {
      throw H.wrapException(new P.FormatException("Invalid double", source, null));
    },
    Primitives_parseDouble: function(source, handleError) {
      var result, trimmed;
      H.checkString(source);
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return H.Primitives__parseDoubleError(source, handleError);
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = J.trim$0$s(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return H.Primitives__parseDoubleError(source, handleError);
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      if ($name == null || interceptor === C.Interceptor_methods || !!J.getInterceptor(object).$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_8ZY(object);
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
          if ($name == null)
            $name = dispatchName;
        } else
          $name = dispatchName;
      }
      $name = $name;
      if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null), init.mangledGlobalNames);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, _i, i;
      a = H.setRuntimeTypeInfo([], [P.$int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          a.push(i);
        else if (i <= 1114111) {
          a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          a.push(56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, t2, i;
      for (t1 = charCodes.length, _i = 0; t2 = charCodes.length, _i < t2; t2 === t1 || (0, H.throwConcurrentModificationError)(charCodes), ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, namedArgumentList;
      t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, "call" + "$" + t1.argumentCount + t1.names, 0, $arguments, namedArgumentList, null));
    },
    Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
      var $arguments, t1;
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      t1 = $arguments.length;
      if (t1 === 0) {
        if (!!$function.call$0)
          return $function.call$0();
      } else if (t1 === 1) {
        if (!!$function.call$1)
          return $function.call$1($arguments[0]);
      } else if (t1 === 2) {
        if (!!$function.call$2)
          return $function.call$2($arguments[0], $arguments[1]);
      } else if (t1 === 3)
        if (!!$function.call$3)
          return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
      return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
    },
    Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
      var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
      argumentCount = $arguments.length;
      jsFunction = $function["call" + "$" + argumentCount];
      if (jsFunction == null) {
        jsFunction = J.getInterceptor($function)["call*"];
        if (jsFunction == null)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        requiredArgumentCount = info.requiredParameterCount;
        maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
        if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        $arguments = P.List_List$from($arguments, true, null);
        for (pos = argumentCount; pos < maxArgumentCount; ++pos)
          C.JSArray_methods.add$1($arguments, init.metadata[info.defaultValue$1(0, pos)]);
      }
      return jsFunction.apply($function, $arguments);
    },
    diagnoseIndexError: function(indexable, index) {
      var $length;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      return value;
    },
    checkInt: function(value) {
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: [function() {
      return J.toString$0$(this.dartException);
    }, null, null, 0, 0, null],
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, t2, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              t2 = H.S(message) + " (Error " + ieErrorCode + ")";
              return t1.call$1(new H.NullError(t2, null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(new H.NullError(message, match == null ? null : match.method));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception, null);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception, null);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      switch (numberOfArguments) {
        case 0:
          return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
        case 1:
          return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
        case 2:
          return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
        case 3:
          return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
        case 4:
          return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    }, null, null, 14, 0, null, 39, 16, 45, 19, 20, 24, 25],
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, init.globalState.currentContext, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d", "this.$initialize(a,b,c,d);" + t1);
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      t1 = !isStatic;
      if (t1) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (t1 && typeof functionType == "function") {
        getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
        signatureFunction = function(f, r) {
          return function() {
            return f.apply({$receiver: r(this)}, arguments);
          };
        }(functionType, getReceiver);
      } else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = t1 + 1;
      return new Function(t2 + H.S(t1) + "}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
      selfField = H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t3 = !t2 || arity >= 28;
      if (t3)
        return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    numTypeCast: function(value) {
      if (typeof value === "number" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "num"));
    },
    propertyTypeCastError: function(value, property) {
      var t1 = J.getInterceptor$asx(property);
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
    },
    buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
      return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
    },
    getDynamicRuntimeType: function() {
      return C.C_DynamicRuntimeType;
    },
    random64: function() {
      return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    createRuntimeType: function($name) {
      return new H.TypeImpl($name, null);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$builtinTypeInfo = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$builtinTypeInfo;
    },
    getRuntimeTypeArguments: function(target, substitutionName) {
      return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      if (rti == null)
        return "dynamic";
      else if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return rti[0].builtin$cls + H.joinArguments(rti, 1, onTypeVariable);
      else if (typeof rti == "function")
        return rti.builtin$cls;
      else if (typeof rti === "number" && Math.floor(rti) === rti)
        return C.JSInt_methods.toString$0(rti);
      else
        return;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var buffer, index, firstArgument, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents = t1 + ", ";
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
      }
      return allDynamic ? "" : "<" + H.S(buffer) + ">";
    },
    getRuntimeTypeString: function(object) {
      var className = J.getInterceptor(object).constructor.builtin$cls;
      if (object == null)
        return className;
      return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
    },
    substitute: function(substitution, $arguments) {
      if (typeof substitution == "function") {
        substitution = substitution.apply(null, $arguments);
        if (substitution == null)
          return substitution;
        if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
          return substitution;
        if (typeof substitution == "function")
          return substitution.apply(null, $arguments);
      }
      return $arguments;
    },
    areSubtypes: function(s, t) {
      var len, i;
      if (s == null || t == null)
        return true;
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtype(s[i], t[i]))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.getRuntimeTypeArguments(context, contextName));
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        if (!('$is' + H.runtimeTypeToString(typeOfT, null) in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t2 ? t.slice(1) : null;
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, sLength, tLength, i, t2;
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      sLength = s.length;
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        t1 = s[i];
        t2 = t[i];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      t1 = Object.getOwnPropertyNames(t);
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
      if (!('func' in s))
        return false;
      if ("v" in s) {
        if (!("v" in t) && "ret" in t)
          return false;
      } else if (!("v" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (pos = 0; pos < sParametersLen; ++pos) {
          t1 = sParameterTypes[pos];
          t2 = tParameterTypes[pos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      return H.Primitives_objectHashCode(object);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = $.getTagFunction.call$1(obj);
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = $.alternateTagFunction.call$2(obj, tag);
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_gkc();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;_collection$_map",
      $asUnmodifiableMapView: Isolate.functionThatReturnsNull,
      $asMapView: Isolate.functionThatReturnsNull
    },
    ConstantMap: {
      "^": "Object;",
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      }
    },
    ConstantStringMap: {
      "^": "ConstantMap;__js_helper$_length,__js_helper$_jsObject,_keys",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      containsKey$1: function(_, key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this.__js_helper$_jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(0, key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this.__js_helper$_jsObject[key];
      },
      forEach$1: function(_, f) {
        var keys, t1, i, key;
        keys = this._keys;
        for (t1 = keys.length, i = 0; i < t1; ++i) {
          key = keys[i];
          f.call$2(key, this._fetch$1(key));
        }
      }
    },
    JSInvocationMirror: {
      "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
      get$memberName: function() {
        return this.__js_helper$_memberName;
      },
      get$positionalArguments: function() {
        var t1, argumentCount, list, index;
        if (this._kind === 1)
          return C.List_empty;
        t1 = this._arguments;
        argumentCount = t1.length - this._namedArgumentNames.length;
        if (argumentCount === 0)
          return C.List_empty;
        list = [];
        for (index = 0; index < argumentCount; ++index)
          list.push(t1[index]);
        list.fixed$length = Array;
        list.immutable$list = Array;
        return list;
      },
      get$namedArguments: function() {
        var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i;
        if (this._kind !== 0)
          return C.Map_empty;
        t1 = this._namedArgumentNames;
        namedArgumentCount = t1.length;
        t2 = this._arguments;
        namedArgumentsStartIndex = t2.length - namedArgumentCount;
        if (namedArgumentCount === 0)
          return C.Map_empty;
        map = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.Symbol, null]);
        for (i = 0; i < namedArgumentCount; ++i)
          map.$indexSet(0, new H.Symbol0(t1[i]), t2[namedArgumentsStartIndex + i]);
        return H.setRuntimeTypeInfo(new H.ConstantMapView(map), [P.Symbol, null]);
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      defaultValue$1: [function(_, parameter) {
        var t1 = this.requiredParameterCount;
        if (parameter < t1)
          return;
        return this.data[3 + parameter - t1];
      }, "call$1", "get$defaultValue", 2, 0, 31, 27],
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }
      }
    },
    Primitives_functionNoSuchMethod_closure: {
      "^": "Closure:11;_box_0,$arguments,namedArgumentList",
      call$2: function($name, argument) {
        var t1 = this._box_0;
        t1.names = t1.names + "$" + H.S($name);
        this.namedArgumentList.push($name);
        this.$arguments.push(argument);
        ++t1.argumentCount;
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = [];
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }
      }
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + H.S(t1) + "' on null";
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + H.S(t1) + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(this._message) + ")";
      },
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return t1.length === 0 ? "Error" : "Error: " + t1;
      }
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:1;ex",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      }
    },
    invokeClosure_closure: {
      "^": "Closure:0;closure",
      call$0: function() {
        return this.closure.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:0;closure,arg1",
      call$0: function() {
        return this.closure.call$1(this.arg1);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:0;closure,arg1,arg2",
      call$0: function() {
        return this.closure.call$2(this.arg1, this.arg2);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:0;closure,arg1,arg2,arg3",
      call$0: function() {
        return this.closure.call$3(this.arg1, this.arg2, this.arg3);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:0;closure,arg1,arg2,arg3,arg4",
      call$0: function() {
        return this.closure.call$4(this.arg1, this.arg2, this.arg3, this.arg4);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this) + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,__js_helper$_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = Object.getOwnPropertyNames(template);
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    CastErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        CastErrorImplementation$: function(actualType, expectedType) {
          return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
        }
      }
    },
    RuntimeError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    RuntimeType: {
      "^": "Object;"
    },
    RuntimeFunctionType: {
      "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
      _isTest$1: function(expression) {
        var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
        return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
      },
      _extractFunctionTypeObjectFrom$1: function(o) {
        var interceptor = J.getInterceptor(o);
        return "$signature" in interceptor ? interceptor.$signature() : null;
      },
      toRti$0: function() {
        var result, t1, t2, namedRti, keys, i, $name;
        result = {func: "dynafunc"};
        t1 = this.returnType;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isVoidRuntimeType)
          result.v = true;
        else if (!t2.$isDynamicRuntimeType)
          result.ret = t1.toRti$0();
        t1 = this.parameterTypes;
        if (t1 != null && t1.length !== 0)
          result.args = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0)
          result.opt = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.namedParameters;
        if (t1 != null) {
          namedRti = Object.create(null);
          keys = H.extractKeys(t1);
          for (t2 = keys.length, i = 0; i < t2; ++i) {
            $name = keys[i];
            namedRti[$name] = t1[$name].toRti$0();
          }
          result.named = namedRti;
        }
        return result;
      },
      toString$0: function(_) {
        var t1, t2, result, needsComma, i, type, keys, $name;
        t1 = this.parameterTypes;
        if (t1 != null)
          for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += J.toString$0$(type);
          }
        else {
          result = "(";
          needsComma = false;
        }
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0) {
          result = (needsComma ? result + ", " : result) + "[";
          for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += J.toString$0$(type);
          }
          result += "]";
        } else {
          t1 = this.namedParameters;
          if (t1 != null) {
            result = (needsComma ? result + ", " : result) + "{";
            keys = H.extractKeys(t1);
            for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
              $name = keys[i];
              if (needsComma)
                result += ", ";
              result += H.S(t1[$name].toRti$0()) + " " + $name;
            }
            result += "}";
          }
        }
        return result + (") -> " + J.toString$0$(this.returnType));
      },
      static: {
        RuntimeFunctionType_listToRti: function(list) {
          var result, t1, i;
          list = list;
          result = [];
          for (t1 = list.length, i = 0; i < t1; ++i)
            result.push(list[i].toRti$0());
          return result;
        }
      }
    },
    DynamicRuntimeType: {
      "^": "RuntimeType;",
      toString$0: function(_) {
        return "dynamic";
      },
      toRti$0: function() {
        return;
      }
    },
    TypeImpl: {
      "^": "Object;_typeName,_unmangledName",
      toString$0: function(_) {
        var t1, unmangledName;
        t1 = this._unmangledName;
        if (t1 != null)
          return t1;
        unmangledName = function(str, names) {
          return str.replace(/[^<,> ]+/g, function(m) {
            return names[m] || m;
          });
        }(this._typeName, init.mangledGlobalNames);
        this._unmangledName = unmangledName;
        return unmangledName;
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this._typeName);
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.TypeImpl) {
          t1 = this._typeName;
          t2 = other._typeName;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      }
    },
    JsLinkedHashMap: {
      "^": "Object;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$keys: function(_) {
        return H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(this), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableEntry$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      $index: function(_, key) {
        var strings, cell, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableEntry$2(strings, key);
          return cell == null ? null : cell.hashMapCellValue;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableEntry$2(nums, key);
          return cell == null ? null : cell.hashMapCellValue;
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, t1, index;
        rest = this._rest;
        if (rest == null)
          return;
        t1 = this._getTableEntry$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(t1, key);
        if (index < 0)
          return;
        return t1[index].hashMapCellValue;
      },
      $indexSet: function(_, key, value) {
        var strings, nums, rest, hash, bucket, index;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else {
          rest = this._rest;
          if (rest == null) {
            rest = this._newHashTable$0();
            this._rest = rest;
          }
          hash = this.internalComputeHashCode$1(key);
          bucket = this._getTableEntry$2(rest, hash);
          if (bucket == null)
            this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
          else {
            index = this.internalFindBucketIndex$2(bucket, key);
            if (index >= 0)
              bucket[index].hashMapCellValue = value;
            else
              bucket.push(this._newLinkedCell$2(key, value));
          }
        }
      },
      remove$1: function(_, key) {
        if (typeof key === "string")
          return this._removeHashTableEntry$2(this._strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._removeHashTableEntry$2(this._nums, key);
        else
          return this.internalRemove$1(key);
      },
      internalRemove$1: function(key) {
        var rest, t1, index, cell;
        rest = this._rest;
        if (rest == null)
          return;
        t1 = this._getTableEntry$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(t1, key);
        if (index < 0)
          return;
        cell = t1.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.hashMapCellValue;
      },
      clear$0: function(_) {
        if (this.__js_helper$_length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this.__js_helper$_length = 0;
          this._modifications = this._modifications + 1 & 67108863;
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell = this._getTableEntry$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.hashMapCellValue = value;
      },
      _removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return;
        cell = this._getTableEntry$2(table, key);
        if (cell == null)
          return;
        this._unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return cell.hashMapCellValue;
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(key, value, null, null);
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell._previous;
        next = cell._next;
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._previous = previous;
        --this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].hashMapCellKey, key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _getTableEntry$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableEntry$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isInternalMap: 1,
      static: {
        JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
          return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
        }
      }
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure:1;$this",
      call$1: [function(each) {
        return this.$this.$index(0, each);
      }, null, null, 2, 0, null, 28, "call"]
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey,hashMapCellValue,_next,_previous"
    },
    LinkedHashMapKeyIterable: {
      "^": "Iterable;_map",
      get$length: function(_) {
        return this._map.__js_helper$_length;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        t2._cell = t1._first;
        return t2;
      },
      forEach$1: function(_, f) {
        var t1, cell, modifications;
        t1 = this._map;
        cell = t1._first;
        modifications = t1._modifications;
        for (; cell != null;) {
          f.call$1(cell.hashMapCellKey);
          if (modifications !== t1._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
          cell = cell._next;
        }
      },
      $isEfficientLength: 1
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;_map,_modifications,_cell,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this._map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this.__js_helper$_current = null;
            return false;
          } else {
            this.__js_helper$_current = t1.hashMapCellKey;
            this._cell = t1._next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:1;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:18;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:39;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(tag);
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      firstMatch$1: function(string) {
        var m = this._nativeRegExp.exec(H.checkString(string));
        if (m == null)
          return;
        return new H._MatchImplementation(this, m);
      },
      _execGlobal$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeGlobalVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        return new H._MatchImplementation(this, match);
      },
      static: {
        JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          H.checkString(source);
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function(source, modifiers) {
            try {
              return new RegExp(source, modifiers);
            } catch (e) {
              return e;
            }
          }(source, m + i + g);
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(new P.FormatException("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }
      }
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match",
      $index: function(_, index) {
        return this._match[index];
      }
    },
    _AllMatchesIterator: {
      "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1, t2, match, nextIndex;
        t1 = this._string;
        if (t1 == null)
          return false;
        t2 = this._nextIndex;
        if (t2 <= t1.length) {
          match = this._regExp._execGlobal$2(t1, t2);
          if (match != null) {
            this.__js_helper$_current = match;
            t1 = match._match;
            nextIndex = t1.index + J.get$length$asx(t1[0]);
            this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
            return true;
          }
        }
        this.__js_helper$_current = null;
        this._string = null;
        return false;
      }
    },
    StringMatch: {
      "^": "Object;start,input,pattern",
      $index: function(_, g) {
        if (g !== 0)
          H.throwExpression(P.RangeError$value(g, null, null));
        return this.pattern;
      }
    }
  }], ["chronosgl", "package:chronosgl/chronosgl.dart",, B, {
    "^": "",
    setUpEventCapture: function(canvas) {
      var t1 = C.EventStreamProvider_keydown.forTarget$1(document);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.setUpEventCapture_closure()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = C.EventStreamProvider_keyup.forTarget$1(document);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.setUpEventCapture_closure0()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      if (!$.skipDefaultMouseMoveListener) {
        t1 = C.EventStreamProvider_mousemove.forTarget$1(document);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.setUpEventCapture_closure1()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      }
      t1 = C.EventStreamProvider_mousedown.forTarget$1(document);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.setUpEventCapture_closure2()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      canvas.toString;
      t1 = C.EventStreamProvider_contextmenu.forElement$1(canvas);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.setUpEventCapture_closure3()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = C.EventStreamProvider_mouseup.forTarget$1(document);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.setUpEventCapture_closure4()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    ChangeElementArrayBuffer: function(gl, buffer, data) {
      gl.bindBuffer(34963, buffer);
      gl.bufferData(34963, data, 35048);
    },
    CreateAndInitializeElementArrayBuffer: function(gl, data) {
      var b = gl.createBuffer();
      B.ChangeElementArrayBuffer(gl, b, data);
      return b;
    },
    Texture_loadAndInstallAllTextures: function(gl) {
      var futures, t1, t2, _i, f;
      futures = [];
      for (t1 = $.$get$Texture__cache(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        f = t1[_i]._future;
        if (f != null)
          futures.push(f);
      }
      return P.Future_wait(futures, null, false).then$1(new B.Texture_loadAndInstallAllTextures_closure(gl));
    },
    PerspectiveParams: {
      "^": "Object;width,height,fov,near,far,_cullPlanes"
    },
    Animatable: {
      "^": "Object;active>"
    },
    RenderingPhase: {
      "^": "Object;_gl,_framebuffer,_programs,_pMatrix,clearColorBuffer,clearDepthBuffer,_usePerspectiveMatrix",
      draw$3: function(perspar, lights, camera) {
        var t1, t2, t3, t4, t5, t6, $top, right, rl, tb, fn, t7, e, a, mode, _i;
        this._gl.bindFramebuffer(36160, null);
        t1 = this._gl;
        t1.viewport(0, 0, perspar.width, perspar.height);
        t2 = perspar.fov;
        t3 = perspar.width;
        t4 = perspar.height;
        t5 = perspar.near;
        t6 = perspar.far;
        $top = t5 * Math.tan(H.checkNum(t2 * 3.141592653589793 / 360));
        right = $top * (t3 / t4);
        t4 = -right;
        t3 = -$top;
        rl = right - t4;
        tb = $top - t3;
        fn = t6 - t5;
        t2 = this._pMatrix.array;
        t7 = t5 * 2;
        t2[0] = t7 / rl;
        t2[1] = 0;
        t2[2] = 0;
        t2[3] = 0;
        t2[4] = 0;
        t2[5] = t7 / tb;
        t2[6] = 0;
        t2[7] = 0;
        t2[8] = (right + t4) / rl;
        t2[9] = ($top + t3) / tb;
        t2[10] = -(t6 + t5) / fn;
        t2[11] = -1;
        t2[12] = 0;
        t2[13] = 0;
        t2[14] = -2 * t6 * t5 / fn;
        t2[15] = 0;
        e = 1 / Math.tan(H.checkNum(perspar.fov * 3.141592653589793 / 360));
        a = perspar.height / perspar.width;
        t2 = e * e;
        t5 = Math.sqrt(H.checkNum(t2 + 1));
        t2 = Math.sqrt(H.checkNum(t2 + a * a));
        t6 = perspar._cullPlanes;
        t3 = t6[0].array;
        t3[0] = e / t5;
        t3[1] = 0;
        t4 = -1 / t5;
        t3[2] = t4;
        t3[3] = 0;
        t3 = -e;
        t7 = t6[1].array;
        t7[0] = t3 / t5;
        t7[1] = 0;
        t7[2] = t4;
        t7[3] = 0;
        t7 = t6[2].array;
        t7[0] = 0;
        t7[1] = e / t2;
        t4 = -a / t2;
        t7[2] = t4;
        t7[3] = 0;
        t6 = t6[3].array;
        t6[0] = 0;
        t6[1] = t3 / t2;
        t6[2] = t4;
        t6[3] = 0;
        t2 = this.clearColorBuffer;
        if (!t2)
          ;
        mode = t2 ? 16384 : 0;
        t1.clear(mode | 256);
        for (t1 = this._programs, t2 = t1.length, t3 = this._pMatrix, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].draw$4(perspar, lights, camera, t3);
      },
      createProgram$1: function(_, so) {
        var t1, t2, t3, t4, t5, t6, t7, t8, pn;
        t1 = this._gl;
        t2 = so[0];
        t3 = so[1];
        t4 = t2.name;
        t5 = new B.ShaderProgramInputs(P.LinkedHashMap__makeEmpty());
        t6 = new Q.Matrix4(new Float32Array(H._checkLength(16)), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
        t6.identity$0();
        t7 = new Q.Matrix4(new Float32Array(H._checkLength(16)), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
        t7.identity$0();
        t8 = new Q.Matrix4(new Float32Array(H._checkLength(16)), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
        t8.identity$0();
        pn = new B.ShaderProgram(t5, t1, null, false, null, t6, t7, t8, H.setRuntimeTypeInfo([], [B.Node0]), H.setRuntimeTypeInfo([], [B.Node0]));
        pn._program = B.CoreProgram$(t1, t2, t3, t4);
        t5.SetUniformVal$2("uTime", 0);
        this._programs.push(pn);
        return pn;
      },
      animate$1: function(_, elapsed) {
        var t1, t2, _i;
        for (t1 = this._programs, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].animate$1(0, elapsed);
      }
    },
    ChronosGL: {
      "^": "Object;elementIndexUintExt,gl,animatables,animateCallbacks,_canvas,_camera,perspar,lights,_lastFov_,_lastWidth,_lastHeight,_renderPhases,_lastTime",
      animate$2: function(_, timeNow, elapsed) {
        var t1, a, t2, _i;
        for (t1 = this.animatables, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          a = t1.get$current();
          if (a.get$active(a))
            a.animate$1(0, elapsed);
        }
        for (t1 = this.animateCallbacks, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
          t1.get$current().call$2(elapsed, timeNow);
        for (t1 = this._renderPhases, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].animate$1(0, elapsed);
      },
      draw$0: function() {
        var t1, t2, t3, t4, t5, _i;
        t1 = this._lastWidth;
        t2 = this.perspar;
        t3 = t2.width;
        if (t1 == null ? t3 == null : t1 === t3) {
          t3 = this._lastHeight;
          t4 = t2.height;
          if (t3 == null ? t4 == null : t3 === t4) {
            t4 = this._canvas;
            t5 = t4.clientWidth;
            if (t1 == null ? t5 == null : t1 === t5) {
              t1 = t4.clientHeight;
              if (t3 == null ? t1 == null : t3 === t1) {
                t1 = this._lastFov_;
                t3 = t2.fov;
                t3 = t1 == null ? t3 != null : t1 !== t3;
                t1 = t3;
              } else
                t1 = true;
            } else
              t1 = true;
          } else
            t1 = true;
        } else
          t1 = true;
        if (t1) {
          t1 = this._canvas;
          t2.width = t1.clientWidth;
          t2.height = t1.clientHeight;
          t1.width = t1.clientWidth;
          t1.height = t1.clientHeight;
          this._lastWidth = t1.clientWidth;
          this._lastHeight = t1.clientHeight;
          this._lastFov_ = t2.fov;
        }
        for (t1 = this._renderPhases, t3 = t1.length, t4 = this.lights, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].draw$3(t2, t4, this._camera);
      },
      run$1: [function(timeNow) {
        var t1, elapsed, t2;
        timeNow = 0 + (timeNow == null ? 0 : timeNow);
        t1 = this._lastTime;
        if (t1 === 0) {
          this._lastTime = timeNow;
          t1 = timeNow;
        }
        elapsed = timeNow - t1;
        this._lastTime = timeNow;
        if (isNaN(elapsed)) {
          P.print("isNaN(elapsed)");
          elapsed = 0;
        }
        this.animate$2(0, timeNow, elapsed);
        this.draw$0();
        t1 = window;
        t2 = this.get$run();
        C.Window_methods._ensureRequestAnimationFrame$0(t1);
        C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
      }, function() {
        return this.run$1(null);
      }, "run$0", "call$1", "call$0", "get$run", 0, 2, 25, 1, 15],
      ChronosGL$8$addDefaultRenderingPhase$far$fxShader$near$preserveDrawingBuffer$useElementIndexUint$useFramebuffer: function(canvasOrID, addDefaultRenderingPhase, far, fxShader, near, preserveDrawingBuffer, useElementIndexUint, useFramebuffer) {
        var t1, t2, t3, t4, attributes;
        if (!!J.getInterceptor(canvasOrID).$isCanvasElement) {
          this._canvas = canvasOrID;
          t1 = canvasOrID;
        } else {
          t1 = document.querySelector(canvasOrID);
          this._canvas = t1;
        }
        t2 = this.perspar;
        t2.near = near;
        t2.far = far;
        t1.toString;
        t1 = C.EventStreamProvider_dragstart.forElement$1(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.ChronosGL_closure()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = this._canvas;
        t3 = t1.clientWidth;
        t2.width = t3;
        t4 = t1.clientHeight;
        t2.height = t4;
        t1.width = t3;
        t1.height = t4;
        attributes = P.LinkedHashMap__makeLiteral(["alpha", false, "depth", true, "stencil", true, "antialias", false, "premultipliedAlpha", true, "preserveDrawingBuffer", true]);
        t4 = this._canvas;
        t4 = (t4 && C.CanvasElement_methods).getContext$2(t4, "webgl", attributes);
        this.gl = t4;
        if (t4 == null)
          throw H.wrapException(P.Exception_Exception('calling canvas.getContext("experimental-webgl") failed, make sure you run on a computer that supports WebGL, test here: http://get.webgl.org/'));
        $.ChronosGL_globalGL = t4;
        t1 = t4.getExtension("OES_element_index_uint");
        this.elementIndexUintExt = t1;
        if (t1 == null)
          throw H.wrapException("Error: OES_element_index_uint is not supported");
        $.ChronosGL_useElementIndexUint = true;
        this.gl.clearColor(0, 0, 0, 1);
        this.gl.enable(2929);
        t1 = new Q.Matrix4(new Float32Array(H._checkLength(16)), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
        t1.identity$0();
        this._camera = new B.Camera(t1, Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
        B.setUpEventCapture(this._canvas);
      },
      static: {
        ChronosGL$: function(canvasOrID, addDefaultRenderingPhase, far, fxShader, near, preserveDrawingBuffer, useElementIndexUint, useFramebuffer) {
          var t1, t2;
          t1 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.String, B.Animatable]);
          t2 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.String, {func: 1, v: true, args: [P.$double, P.$double]}]);
          t2 = new B.ChronosGL(null, null, t1, t2, null, null, new B.PerspectiveParams(null, null, 50, 0.1, 1000, [Q.Vector4$(0, 0, 0, 0), Q.Vector4$(0, 0, 0, 0), Q.Vector4$(0, 0, 0, 0), Q.Vector4$(0, 0, 0, 0)]), [], 49, 0, 0, [], 0);
          t2.ChronosGL$8$addDefaultRenderingPhase$far$fxShader$near$preserveDrawingBuffer$useElementIndexUint$useFramebuffer(canvasOrID, false, far, fxShader, near, true, true, false);
          return t2;
        }
      }
    },
    ChronosGL_closure: {
      "^": "Closure:4;",
      call$1: [function($event) {
        $event.preventDefault();
      }, null, null, 2, 0, null, 11, "call"]
    },
    Camera: {
      "^": "Spatial;transform,_pos,_back,_up,_right"
    },
    OrbitCamera: {
      "^": "Animatable;camera,radius,azimuth,polar,lookAt,mouseWheelFactor,ma,mp,cpk,cpmb,active",
      animate$1: function(_, elapsed) {
        var t1, t2, t3, t4, rcp, t5, t6, t7, t8, t9, up, x, y, z, len;
        t1 = this.cpk;
        if (t1.$index(0, $.Key_LEFT) != null)
          this.azimuth += 0.03;
        else if (t1.$index(0, $.Key_RIGHT) != null)
          this.azimuth -= 0.03;
        if (t1.$index(0, $.Key_UP) != null)
          this.polar += 0.03;
        else if (t1.$index(0, $.Key_DOWN) != null)
          this.polar -= 0.03;
        if (t1.$index(0, $.Key_SPACE) != null) {
          this.azimuth = 0;
          this.polar = 0;
        }
        t1 = C.JSNumber_methods.clamp$2(this.polar, -1.4707963267948965, 1.4707963267948965);
        this.polar = t1;
        t2 = this.radius;
        t3 = this.azimuth;
        t4 = this.camera;
        t4.toString;
        rcp = t2 * Math.cos(H.checkNum(t1));
        t5 = Math.cos(H.checkNum(t3));
        t1 = Math.sin(H.checkNum(t1));
        t3 = Math.sin(H.checkNum(t3));
        t6 = t4.transform;
        t7 = $.Matrix4_POSX;
        t8 = t6.array;
        t8[t7] = rcp * t5;
        t5 = $.Matrix4_POSY;
        t8[t5] = t2 * t1;
        t1 = $.Matrix4_POSZ;
        t8[t1] = rcp * t3;
        t3 = this.lookAt;
        t2 = t8[t7];
        t9 = t3.array;
        t8[t7] = t2 + t9[0];
        t8[t5] = t8[t5] + t9[1];
        t8[t1] = t8[t1] + t9[2];
        t4 = t4._pos;
        t7 = t8[t7];
        t9 = t4.array;
        t9[0] = t7;
        t9[1] = t8[t5];
        t9[2] = t8[t1];
        up = Q.Vector$(0, 1, 0);
        t1 = t6.newBack;
        t4 = t4.array;
        t2 = t4[0];
        t3 = t3.array;
        x = t2 - t3[0];
        y = t4[1] - t3[1];
        z = t4[2] - t3[2];
        t3 = Math.sqrt(H.checkNum(x * x + y * y + z * z));
        t2 = t1.array;
        if (t3 === 0) {
          t2[0] = 0;
          t2[1] = 0;
          t2[2] = 0;
        } else {
          len = 1 / t3;
          t2[0] = x * len;
          t2[1] = y * len;
          t2[2] = z * len;
        }
        t2 = t6.newRight;
        t2.cross2$2(up, t1);
        t2.normalize$0(0);
        t3 = t6.newUp;
        t3.cross2$2(t1, t2);
        t6 = t6.array;
        t2 = t2.array;
        t6[0] = t2[0];
        t3 = t3.array;
        t6[1] = t3[0];
        t1 = t1.array;
        t6[2] = t1[0];
        t6[3] = 0;
        t6[4] = t2[1];
        t6[5] = t3[1];
        t6[6] = t1[1];
        t6[7] = 0;
        t6[8] = t2[2];
        t6[9] = t3[2];
        t6[10] = t1[2];
        t6[11] = 0;
        t6[15] = 1;
      },
      OrbitCamera$5: function(camera, radius, azimuth, polar, eventElement) {
        var t1, t2;
        if (eventElement == null)
          eventElement = document.body;
        t1 = J.getInterceptor$x(eventElement);
        t2 = t1.get$onMouseWheel(eventElement);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.OrbitCamera_closure(this)), false), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t1 = t1.get$onMouseMove(eventElement);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.OrbitCamera_closure0(this)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = C.EventStreamProvider_touchstart.forElement$1(eventElement);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.OrbitCamera_closure1()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = C.EventStreamProvider_touchmove.forElement$1(eventElement);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.OrbitCamera_closure2(this)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      },
      static: {
        OrbitCamera$: function(camera, radius, azimuth, polar, eventElement) {
          var t1 = new B.OrbitCamera(camera, radius, azimuth, polar, Q.Vector$(0, 0, 0), -0.01, 0, 0, $.$get$currentlyPressedKeys(), $.$get$currentlyPressedMouseButtons(), true);
          t1.OrbitCamera$5(camera, radius, azimuth, polar, eventElement);
          return t1;
        }
      }
    },
    OrbitCamera_closure: {
      "^": "Closure:36;$this",
      call$1: [function(e) {
        var d, e0, t1, t2, exception;
        try {
          t1 = this.$this;
          d = J.get$deltaY$x(e) * t1.mouseWheelFactor;
          t2 = t1.radius;
          if (t2 - d > 0)
            t1.radius = t2 - d;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          P.print(e0);
        }
      }, null, null, 2, 0, null, 0, "call"]
    },
    OrbitCamera_closure0: {
      "^": "Closure:4;$this",
      call$1: [function(e) {
        var t1, t2, t3, t4, t5;
        e.preventDefault();
        t1 = this.$this;
        if (t1.cpmb.$index(0, "left") != null) {
          t2 = t1.azimuth;
          t3 = $.mouseX;
          t1.azimuth = t2 + (t3 - $.mouseDownX) * 0.01;
          t2 = t1.polar;
          t4 = $.mouseDownY;
          t5 = $.mouseY;
          t1.polar = t2 + (t4 - t5) * 0.01;
          $.mouseDownX = t3;
          $.mouseDownY = t5;
        }
      }, null, null, 2, 0, null, 0, "call"]
    },
    OrbitCamera_closure1: {
      "^": "Closure:10;",
      call$1: [function(e) {
        var t1 = e.touches[0];
        $.mouseDownX = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(t1.clientX), C.JSNumber_methods.round$0(t1.clientY)), [null]).x;
        t1 = e.touches[0];
        $.mouseDownY = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(t1.clientX), C.JSNumber_methods.round$0(t1.clientY)), [null]).y;
      }, null, null, 2, 0, null, 0, "call"]
    },
    OrbitCamera_closure2: {
      "^": "Closure:10;$this",
      call$1: [function(e) {
        var t1, p, t2, t3;
        t1 = e.touches[0];
        p = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(t1.clientX), C.JSNumber_methods.round$0(t1.clientY)), [null]);
        t1 = this.$this;
        t2 = p.x;
        t1.azimuth = t1.azimuth + (t2 - $.mouseDownX) * 0.01;
        t3 = p.y;
        t1.polar = t1.polar + ($.mouseDownY - t3) * 0.01;
        $.mouseDownX = t2;
        $.mouseDownY = t3;
      }, null, null, 2, 0, null, 0, "call"]
    },
    setUpEventCapture_closure: {
      "^": "Closure:6;",
      call$1: [function(e) {
        $.$get$currentlyPressedKeys().$indexSet(0, e.keyCode, true);
      }, null, null, 2, 0, null, 0, "call"]
    },
    setUpEventCapture_closure0: {
      "^": "Closure:6;",
      call$1: [function(e) {
        $.$get$currentlyPressedKeys().$indexSet(0, e.keyCode, null);
      }, null, null, 2, 0, null, 0, "call"]
    },
    setUpEventCapture_closure1: {
      "^": "Closure:4;",
      call$1: [function(e) {
        $.clientX = H.setRuntimeTypeInfo(new P.Point(e.clientX, e.clientY), [null]).x;
        $.clientY = window.innerHeight - H.setRuntimeTypeInfo(new P.Point(e.clientX, e.clientY), [null]).y;
        $.mouseX = H.setRuntimeTypeInfo(new P.Point(e.clientX, e.clientY), [null]).x - C.JSInt_methods._tdivFast$1(window.innerWidth, 2);
        $.mouseY = -(H.setRuntimeTypeInfo(new P.Point(e.clientX, e.clientY), [null]).y - C.JSInt_methods._tdivFast$1(window.innerHeight, 2));
      }, null, null, 2, 0, null, 0, "call"]
    },
    setUpEventCapture_closure2: {
      "^": "Closure:4;",
      call$1: [function(e) {
        $.mouseDownX = H.setRuntimeTypeInfo(new P.Point(e.clientX, e.clientY), [null]).x - C.JSInt_methods._tdivFast$1(window.innerWidth, 2);
        $.mouseDownY = -(H.setRuntimeTypeInfo(new P.Point(e.clientX, e.clientY), [null]).y - C.JSInt_methods._tdivFast$1(window.innerHeight, 2));
        if (e.button === 2)
          $.$get$currentlyPressedMouseButtons().$indexSet(0, "right", true);
        else
          $.$get$currentlyPressedMouseButtons().$indexSet(0, "left", true);
      }, null, null, 2, 0, null, 0, "call"]
    },
    setUpEventCapture_closure3: {
      "^": "Closure:4;",
      call$1: [function(e) {
        e.preventDefault();
      }, null, null, 2, 0, null, 0, "call"]
    },
    setUpEventCapture_closure4: {
      "^": "Closure:4;",
      call$1: [function(e) {
        if (e.button === 2)
          $.$get$currentlyPressedMouseButtons().$indexSet(0, "right", null);
        else
          $.$get$currentlyPressedMouseButtons().$indexSet(0, "left", null);
      }, null, null, 2, 0, null, 0, "call"]
    },
    Material: {
      "^": "Object;depthTest,depthWrite,blend,blend_sFactor,blend_dFactor,blendEquation,_inputs"
    },
    Mesh: {
      "^": "Node0;gl,debug,_buffers,_indexBuffer,numItems,numInstances,material,_meshData,name,enabled,children,mvMatrix,animateCallback,transform,_pos,_back,_up,_right",
      AddBuffer$2: function(canonical, data) {
        var t1, b;
        t1 = this.gl;
        b = t1.createBuffer();
        t1.bindBuffer(34962, b);
        t1.bufferData(34962, data, 35048);
        this._buffers.$indexSet(0, canonical, b);
      },
      ChangeBufferCanonical$2: function(canonical, data) {
        var t1 = this.gl;
        t1.bindBuffer(34962, this._buffers.$index(0, canonical));
        t1.bufferData(34962, data, 35048);
      },
      UpdateMeshData$1: function(md) {
        var t1, t2, canonical, t3, t4, indices;
        this._meshData = md;
        this.ChangeBufferCanonical$2("aVertexPosition", md.GetVertexData$0());
        for (t1 = this._meshData._attributes, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1), t2 = this._buffers; t1.moveNext$0();) {
          canonical = t1.get$current();
          t3 = this._meshData.GetAttributeData$1(canonical);
          t4 = this.gl;
          t4.bindBuffer(34962, t2.$index(0, canonical));
          t4.bufferData(34962, t3, 35048);
        }
        indices = this._meshData.GetVertexIndices$0();
        if (indices != null) {
          this.numItems = indices.length;
          t1 = $.ChronosGL_useElementIndexUint;
          t2 = this.gl;
          t3 = this._indexBuffer;
          if (t1)
            B.ChangeElementArrayBuffer(t2, t3, new Uint32Array(H._ensureNativeList(indices)));
          else
            B.ChangeElementArrayBuffer(t2, t3, new Uint16Array(H._ensureNativeList(indices)));
        } else
          this.numItems = this._meshData.GetVertexData$0().length / 3 | 0;
      },
      draw2$2: function(program, inputs) {
        var t1, t2, t3, t4, t5, t6, t7, a11, t8, t9, t10, t11, t12, a12, t13, a13, det, idet, t;
        if (this.numItems === 0)
          return;
        t1 = this.material;
        t2 = this.gl;
        if (t1.blend) {
          t2.enable(3042);
          t2.blendFunc(t1.blend_sFactor, t1.blend_dFactor);
          t2.blendEquation(t1.blendEquation);
        }
        if (!t1.depthWrite)
          t2.depthMask(false);
        this.bindBuffers$1(program);
        t2 = this.mvMatrix;
        t3 = new Float32Array(H._checkLength(9));
        t4 = t2.array;
        t3[0] = t4[0];
        t3[1] = t4[1];
        t3[2] = t4[2];
        t3[3] = t4[4];
        t3[4] = t4[5];
        t3[5] = t4[6];
        t3[6] = t4[8];
        t3[7] = t4[9];
        t3[8] = t4[10];
        t4 = t3[8];
        t5 = t3[4];
        t6 = t3[5];
        t7 = t3[7];
        a11 = t4 * t5 - t6 * t7;
        t8 = -t4;
        t9 = t3[1];
        t10 = t3[2];
        t11 = t3[3];
        t12 = t3[6];
        a12 = t8 * t11 + t6 * t12;
        t13 = t3[0];
        a13 = t7 * t11 - t5 * t12;
        det = t13 * a11 + t9 * a12 + t10 * a13;
        if (det === 0)
          H.throwExpression("zero determinant " + C.NativeFloat32List_methods.toString$0(t3));
        idet = 1 / det;
        t3[0] = idet * a11;
        t3[1] = idet * (t8 * t9 + t10 * t7);
        t3[2] = idet * (t6 * t9 - t10 * t5);
        t3[3] = idet * a12;
        t3[4] = idet * (t4 * t13 - t10 * t12);
        t3[5] = idet * (-t6 * t13 + t10 * t11);
        t3[6] = idet * a13;
        t3[7] = idet * (-t7 * t13 + t9 * t12);
        t3[8] = idet * (t5 * t13 - t9 * t11);
        t = t3[1];
        t3[1] = t3[3];
        t3[3] = t;
        t = t3[2];
        t3[2] = t3[6];
        t3[6] = t;
        t = t3[5];
        t3[5] = t3[7];
        t3[7] = t;
        program.MaybeSetUniformsBulk$1(t1._inputs);
        inputs.SetUniformVal$2("uTransformationMatrix", this.transform);
        inputs.SetUniformVal$2("uModelViewMatrix", t2);
        inputs.SetUniformVal$2("uNormalMatrix", new Q.Matrix3(t3));
        program.MaybeSetUniformsBulk$1(inputs);
        t2 = this.numInstances;
        t3 = this.numItems;
        t4 = this._meshData._faces1.length > 0;
        t5 = this._indexBuffer != null;
        t6 = program._program;
        t7 = t6._uniformLocations;
        if (t6._uniformInitialized._collection$_length !== t7.get$length(t7))
          H.throwExpression(t6.name + ": uninitialized uniforms: " + H.S(t6.UniformsUninitialized$0()));
        if (t2 > 0)
          if (t4)
            t6._extInstancedArrays.drawArraysInstancedANGLE(0, 0, t3, t2);
          else {
            t4 = t6._extInstancedArrays;
            if (t5)
              t4.drawElementsInstancedANGLE(4, t3, $.ChronosGL_useElementIndexUint ? 5125 : 5123, 0, t2);
            else
              t4.drawArraysInstancedANGLE(4, 0, t3, t2);
          }
        else if (t4)
          t6._gl.drawArrays(0, 0, t3);
        else {
          t2 = t6._gl;
          if (t5)
            t2.drawElements(4, t3, $.ChronosGL_useElementIndexUint ? 5125 : 5123, 0);
          else
            t2.drawArrays(4, 0, t3);
        }
        t2 = this.gl;
        if (t1.blend)
          t2.disable(3042);
        if (!t1.depthWrite)
          t2.depthMask(true);
      },
      bindBuffers$1: function(program) {
        var t1, t2, canonical;
        for (t1 = this._buffers, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          canonical = t2.get$current();
          program.MaybeSetAttribute$2(canonical, t1.$index(0, canonical));
        }
        t1 = this._indexBuffer;
        if (t1 != null)
          program._program._gl.bindBuffer(34963, t1);
      },
      Mesh$3$debug: function(_meshData, material, debug) {
        var t1, t2, canonical, t3, t4, b, indices;
        this._meshData.SanityCheck$0();
        this.gl = $.ChronosGL_globalGL;
        this.AddBuffer$2("aVertexPosition", this._meshData.GetVertexData$0());
        for (t1 = this._meshData._attributes, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1), t2 = this._buffers; t1.moveNext$0();) {
          canonical = t1.get$current();
          t3 = this._meshData.GetAttributeData$1(canonical);
          t4 = this.gl;
          b = t4.createBuffer();
          t4.bindBuffer(34962, b);
          t4.bufferData(34962, t3, 35048);
          t2.$indexSet(0, canonical, b);
        }
        indices = this._meshData.GetVertexIndices$0();
        if (indices != null) {
          this.numItems = indices.length;
          t1 = $.ChronosGL_useElementIndexUint;
          t2 = this.gl;
          if (t1)
            this._indexBuffer = B.CreateAndInitializeElementArrayBuffer(t2, new Uint32Array(H._ensureNativeList(indices)));
          else
            this._indexBuffer = B.CreateAndInitializeElementArrayBuffer(t2, new Uint16Array(H._ensureNativeList(indices)));
        } else
          this.numItems = this._meshData.GetVertexData$0().length / 3 | 0;
      },
      static: {
        Mesh$: function(_meshData, material, debug) {
          var t1, t2, t3, t4;
          t1 = P.LinkedHashMap__makeEmpty();
          t2 = H.setRuntimeTypeInfo([], [B.Node0]);
          t3 = new Q.Matrix4(new Float32Array(H._checkLength(16)), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
          t3.identity$0();
          t4 = new Q.Matrix4(new Float32Array(H._checkLength(16)), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
          t4.identity$0();
          t4 = new B.Mesh(null, false, t1, null, null, 0, material, _meshData, "", true, t2, t3, null, t4, Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
          t4.Mesh$3$debug(_meshData, material, false);
          return t4;
        }
      }
    },
    Face1: {
      "^": "Object;a"
    },
    Face4: {
      "^": "Object;a,b,c,d"
    },
    MeshData: {
      "^": "Object;name,_faces1,_faces3,_faces4,_vertices,_faces,_attributes,temp",
      SanityCheck$0: function() {
        var t1, t2, maxIndexFace1, _i, t3, maxIndexFace10, maxIndexFace3, f, maxIndexFace4, maxIndexFace40, n, t4, t5, x;
        t1 = this._faces1;
        t2 = t1.length;
        if (t2 > 0)
          ;
        for (maxIndexFace1 = -1, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          maxIndexFace10 = t1[_i].a;
          if (maxIndexFace10 > maxIndexFace1)
            maxIndexFace1 = maxIndexFace10;
        }
        for (t1 = this._faces3, maxIndexFace3 = -1, _i = 0; false; ++_i) {
          f = t1[_i];
          if (f.get$a(f).$gt(0, maxIndexFace3))
            maxIndexFace3 = f.get$a(f);
          if (f.get$b(f).$gt(0, maxIndexFace3))
            maxIndexFace3 = f.get$b(f);
          if (f.get$c(f).$gt(0, maxIndexFace3))
            maxIndexFace3 = f.get$c(f);
        }
        for (t1 = this._faces4, t2 = t1.length, maxIndexFace4 = -1, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          f = t1[_i];
          maxIndexFace40 = f.a;
          if (maxIndexFace40 > maxIndexFace4)
            maxIndexFace4 = maxIndexFace40;
          maxIndexFace40 = f.b;
          if (maxIndexFace40 > maxIndexFace4)
            maxIndexFace4 = maxIndexFace40;
          maxIndexFace40 = f.c;
          if (maxIndexFace40 > maxIndexFace4)
            maxIndexFace4 = maxIndexFace40;
          maxIndexFace40 = f.d;
          if (maxIndexFace40 > maxIndexFace4)
            maxIndexFace4 = maxIndexFace40;
        }
        n = this._vertices.length / 3 | 0;
        for (t1 = this._attributes, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2), t3 = 2 * n, t4 = 3 * n, t5 = 4 * n; t2.moveNext$0();) {
          x = t1.$index(0, t2.get$current()).length;
          if (x !== n && x === t3 && x === t4 && x === t5)
            throw H.wrapException(this.name + ": bad attribute size " + n + " " + x);
        }
      },
      GetAttributeData$1: function(canonical) {
        var a = this._attributes.$index(0, canonical);
        if (!!J.getInterceptor(a).$isTypedData)
          return a;
        return new Float32Array(H._ensureNativeList(a));
      },
      GetVertexData$0: function() {
        var t1 = this._vertices;
        if (!!J.getInterceptor(t1).$isTypedData)
          return t1;
        return new Float32Array(H._ensureNativeList(t1));
      },
      GetVertexIndices$0: function() {
        var t1, t2, i, _i, f3, t3, f4, t4, t5, t6;
        if (this._faces1.length > 0)
          return;
        if (J.get$isEmpty$asx(this._faces)) {
          t1 = this._faces4;
          this._faces = new Uint32Array(H._checkLength(t1.length * 6));
          for (t2 = this._faces3, i = 0, _i = 0; false; ++_i) {
            f3 = t2[_i];
            this._faces[i] = f3.get$a(f3);
            this._faces[i + 1] = f3.get$b(f3);
            this._faces[i + 2] = f3.get$c(f3);
            i += 3;
          }
          for (t2 = t1.length, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            f4 = t1[_i];
            t4 = this._faces;
            t5 = f4.a;
            t4[i] = t5;
            t4[i + 1] = f4.b;
            t6 = f4.c;
            t4[i + 2] = t6;
            t4[i + 3] = t5;
            t4[i + 4] = t6;
            t4[i + 5] = f4.d;
            i += 6;
          }
        }
        return this._faces;
      },
      AddFaces1$1: function(n) {
        var v, t1, i;
        v = this._vertices.length / 3 | 0;
        for (t1 = this._faces1, i = 0; i < n; ++i, ++v)
          t1.push(new B.Face1(v));
      },
      AddVertices$1: function(lst) {
        var t1, _i, v;
        for (t1 = lst.length, _i = 0; _i < lst.length; lst.length === t1 || (0, H.throwConcurrentModificationError)(lst), ++_i) {
          v = lst[_i];
          J.addAll$1$ax(this._vertices, v.array);
        }
      },
      SetFacesRaw$2: function(lst, end) {
        var f, i;
        f = new Uint32Array(H._checkLength(end & 16777215));
        for (i = 0; i < end; ++i)
          f[i] = lst[i];
        this._faces = f;
      },
      SetVerticesRaw$2: function(lst, end) {
        var f, i;
        f = new Float32Array(H._checkLength(end & 16777215));
        for (i = 0; i < end; ++i)
          f[i] = lst[i];
        this._vertices = f;
      },
      SetAttributesRaw$3: function(canonical, lst, end) {
        var f, i;
        f = new Float32Array(H._checkLength(end & 16777215));
        for (i = 0; i < end; ++i)
          f[i] = lst[i];
        this._attributes.$indexSet(0, canonical, f);
      },
      AddAttributesVector2$2: function(canonical, lst) {
        var t1, _i, v;
        for (t1 = this._attributes, _i = 0; _i < 4; ++_i) {
          v = lst[_i];
          J.addAll$1$ax(t1.$index(0, canonical), v.array);
        }
      },
      toString$0: function(_) {
        return "F " + this._faces.length + " " + this._vertices.length;
      }
    },
    Node0: {
      "^": "Spatial;",
      draw$3: function(program, inputs, parentMVMatrix) {
        var t1, t2, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, t3, b0, b1, b2, b3, _i;
        t1 = this.mvMatrix;
        t1.setElements$1(parentMVMatrix);
        t2 = t1.array;
        a00 = t2[0];
        a01 = t2[1];
        a02 = t2[2];
        a03 = t2[3];
        a10 = t2[4];
        a11 = t2[5];
        a12 = t2[6];
        a13 = t2[7];
        a20 = t2[8];
        a21 = t2[9];
        a22 = t2[10];
        a23 = t2[11];
        a30 = t2[12];
        a31 = t2[13];
        a32 = t2[14];
        a33 = t2[15];
        t3 = this.transform.array;
        b0 = t3[0];
        b1 = t3[1];
        b2 = t3[2];
        b3 = t3[3];
        t2[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        t2[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        t2[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        t2[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = t3[4];
        b1 = t3[5];
        b2 = t3[6];
        b3 = t3[7];
        t2[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        t2[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        t2[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        t2[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = t3[8];
        b1 = t3[9];
        b2 = t3[10];
        b3 = t3[11];
        t2[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        t2[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        t2[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        t2[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = t3[12];
        b1 = t3[13];
        b2 = t3[14];
        b3 = t3[15];
        t2[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        t2[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        t2[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        t2[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        this.draw2$2(program, inputs);
        for (t2 = this.children, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
          t2[_i].draw$3(program, inputs, t1);
      }
    },
    ShaderProgramInputs: {
      "^": "Object;_uniforms",
      SetUniformVal$2: function(canonical, val) {
        if ($.$get$_VarsDb().$index(0, canonical) == null)
          throw H.wrapException("unknown " + canonical);
        this._uniforms.$indexSet(0, canonical, val);
      },
      GetUniformVal$1: function(canonical) {
        if ($.$get$_VarsDb().$index(0, canonical) == null)
          throw H.wrapException("unknown " + H.S(canonical));
        return this._uniforms.$index(0, canonical);
      }
    },
    CoreProgram: {
      "^": "Object;name,_shaderObjectV,_shaderObjectF,_gl,_program,_attributeLocations,_uniformLocations,_uniformInitialized,_extInstancedArrays",
      UniformsUninitialized$0: function() {
        var out, t1, t2, u;
        out = [];
        for (t1 = this._uniformLocations, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1), t2 = this._uniformInitialized; t1.moveNext$0();) {
          u = t1.get$current();
          if (!t2.contains$1(0, u))
            out.push(u);
        }
        return out;
      },
      Begin$1: function(debug) {
        var t1, t2, t3, a, index;
        t1 = this._gl;
        t1.useProgram(this._program);
        for (t2 = this._attributeLocations, t3 = t2.get$keys(t2), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
          a = t3.get$current();
          index = t2.$index(0, a);
          t1.enableVertexAttribArray(index);
          if (J.startsWith$1$s(a, "ia"))
            this._extInstancedArrays.vertexAttribDivisorANGLE(index, 1);
        }
      },
      End$1: function(debug) {
        var t1, t2, t3, canonical, index;
        for (t1 = this._attributeLocations, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2), t3 = this._gl; t2.moveNext$0();) {
          canonical = t2.get$current();
          index = t1.$index(0, canonical);
          if (J.startsWith$1$s(canonical, "ia"))
            this._extInstancedArrays.vertexAttribDivisorANGLE(index, 0);
          t3.disableVertexAttribArray(index);
        }
      },
      CoreProgram$4: function(_gl, _shaderObjectV, _shaderObjectF, $name) {
        var t1, su, t2, t3, t4, t5, program, v, t6;
        t1 = this._gl;
        this._extInstancedArrays = t1.getExtension("ANGLE_instanced_arrays");
        su = new B.ShaderUtils(t1);
        t2 = this._shaderObjectV;
        t3 = t2.shader;
        t4 = this._shaderObjectF;
        t5 = t4.shader;
        program = t1.createProgram();
        t1.attachShader(program, su.getShader$2(35633, t3));
        su.gl.attachShader(program, su.getShader$2(35632, t5));
        su.gl.linkProgram(program);
        if (!su.gl.getProgramParameter(program, 35714))
          H.throwExpression(su.gl.getProgramInfoLog(program));
        this._program = program;
        for (t3 = t2.attributeVars, t3 = t3.get$keys(t3), t3 = t3.get$iterator(t3), t5 = this._attributeLocations; t3.moveNext$0();) {
          v = t3.get$current();
          t5.$indexSet(0, v, t1.getAttribLocation(this._program, v));
          if (t5.$index(0, v) < 0) {
            t6 = "cannot get location for  attribute " + H.S(v);
            window;
            if (typeof console != "undefined")
              console.error(t6);
          }
        }
        for (t2 = t2.uniformVars, t2 = t2.get$keys(t2), t2 = t2.get$iterator(t2), t3 = this._uniformLocations; t2.moveNext$0();) {
          v = t2.get$current();
          t3.$indexSet(0, v, t1.getUniformLocation(this._program, v));
        }
        for (t2 = t4.uniformVars, t2 = t2.get$keys(t2), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          v = t2.get$current();
          t3.$indexSet(0, v, t1.getUniformLocation(this._program, v));
        }
      },
      static: {
        CoreProgram$: function(_gl, _shaderObjectV, _shaderObjectF, $name) {
          var t1 = new B.CoreProgram($name, _shaderObjectV, _shaderObjectF, _gl, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null);
          t1.CoreProgram$4(_gl, _shaderObjectV, _shaderObjectF, $name);
          return t1;
        }
      }
    },
    ShaderProgram: {
      "^": "Object;inputs,_gl,_program,debug,active>,modelviewMatrix,viewMatrix,normalMatrix,followCameraObjects,objects",
      animate$1: function(_, elapsed) {
        var t1, t2, _i, t3;
        t1 = this.inputs;
        t1.SetUniformVal$2("uTime", J.$add$ns(t1.GetUniformVal$1("uTime"), elapsed / 1000));
        for (t1 = this.objects, t2 = t1.length, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          if (t1[_i].enabled)
            ;
      },
      hasEnabledObjects$0: function() {
        if (C.JSArray_methods.any$1(this.objects, new B.ShaderProgram_hasEnabledObjects_closure()))
          return true;
        if (C.JSArray_methods.any$1(this.followCameraObjects, new B.ShaderProgram_hasEnabledObjects_closure0()))
          return true;
        return false;
      },
      MaybeSetAttribute$5: function(canonical, buffer, normalized, stride, offset) {
        var t1, index, desc;
        if (!this._program._attributeLocations.containsKey$1(0, canonical))
          return;
        t1 = this._program;
        index = t1._attributeLocations.$index(0, canonical);
        t1 = t1._gl;
        t1.bindBuffer(34962, buffer);
        desc = $.$get$_VarsDb().$index(0, canonical);
        if (desc == null)
          H.throwExpression("Unknown canonical " + H.S(canonical));
        if (!desc.IsScalarTypeFloat$0())
          H.throwExpression("type " + H.S(canonical) + " is not float");
        t1.vertexAttribPointer(index, desc.GetSize$0(), 5126, false, stride, offset);
      },
      MaybeSetAttribute$2: function(canonical, buffer) {
        return this.MaybeSetAttribute$5(canonical, buffer, false, 0, 0);
      },
      MaybeSetUniformsBulk$1: function(inputs) {
        var t1, t2, canonical, val, t3, desc, t4, l, t5, n, line;
        for (t1 = inputs._uniforms, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          canonical = t2.get$current();
          if ($.$get$_VarsDb().$index(0, canonical) == null)
            H.throwExpression("unknown " + H.S(canonical));
          val = t1.$index(0, canonical);
          if (this._program._uniformLocations.containsKey$1(0, canonical)) {
            t3 = this._program;
            t3._uniformInitialized.add$1(0, canonical);
            desc = $.$get$_VarsDb().$index(0, canonical);
            if (desc == null)
              H.throwExpression("unknown " + H.S(canonical));
            t4 = t3._uniformLocations;
            l = t4.$index(0, canonical);
            t5 = desc.type;
            switch (t5) {
              case "float":
                t3._gl.uniform1f(l, val);
                break;
              case "mat4":
                t3._gl.uniformMatrix4fv(l, false, val.get$array());
                break;
              case "mat3":
                t3._gl.uniformMatrix3fv(l, false, val.get$array());
                break;
              case "vec4":
                t3._gl.uniform4fv(l, val.get$array());
                break;
              case "vec3":
                t3._gl.uniform3fv(l, val.get$array());
                break;
              case "vec2":
                t3._gl.uniform2fv(l, val.get$array());
                break;
              case "sampler2D":
                switch (canonical) {
                  case "uTextureSampler":
                    n = 0;
                    break;
                  case "uTexture2Sampler":
                    n = 1;
                    break;
                  case "uTexture3Sampler":
                    n = 2;
                    break;
                  case "uTexture4Sampler":
                    n = 3;
                    break;
                  default:
                    H.throwExpression("unknown texture ");
                    n = null;
                }
                t3 = t3._gl;
                t3.activeTexture(33984 + n);
                t3.bindTexture(3553, val.GetTexture$0());
                t3.uniform1i(l, n);
                break;
              case "samplerCube":
                t5 = t4.containsKey$1(0, "uTextureSampler") ? 1 : 0;
                n = t5 + (t4.containsKey$1(0, "uTexture2Sampler") ? 1 : 0);
                t3 = t3._gl;
                t3.activeTexture(33984 + n);
                t3.bindTexture(34067, val.GetTexture$0());
                t3.uniform1i(l, n);
                break;
              default:
                line = "Error: unknow uniform type: " + t5;
                H.printString(line);
            }
          }
        }
      },
      draw$4: function(dynpar, lights, camera, pMatrix) {
        var t1, t2, t3, t4, t5, t6, i, l, canonical, _i, node;
        if (!this.hasEnabledObjects$0())
          return;
        this._program.Begin$1(false);
        t1 = this.inputs;
        t1.SetUniformVal$2("uCameraNear", dynpar.near);
        t1.SetUniformVal$2("uCameraFar", dynpar.far);
        t1.SetUniformVal$2("uCanvasSize", Q.Vector2$(dynpar.width, dynpar.height));
        t1.SetUniformVal$2("uPerpectiveMatrix", pMatrix);
        if (camera != null) {
          t2 = this.viewMatrix;
          t3 = camera.transform;
          t4 = t2.array;
          t3 = t3.array;
          t4[0] = t3[0];
          t4[1] = t3[1];
          t4[2] = t3[2];
          t4[3] = t3[3];
          t4[4] = t3[4];
          t4[5] = t3[5];
          t4[6] = t3[6];
          t4[7] = t3[7];
          t4[8] = t3[8];
          t4[9] = t3[9];
          t4[10] = t3[10];
          t4[11] = t3[11];
          t4[12] = 0;
          t4[13] = 0;
          t4[14] = 0;
          t4[15] = 1;
          t5 = -t3[12];
          t6 = -t3[13];
          t3 = -t3[14];
          t4[12] = t4[0] * t5 + t4[4] * t6 + t4[8] * t3 + t4[12];
          t4[13] = t4[1] * t5 + t4[5] * t6 + t4[9] * t3 + t4[13];
          t4[14] = t4[2] * t5 + t4[6] * t6 + t4[10] * t3 + t4[14];
          t4[15] = t4[3] * t5 + t4[7] * t6 + t4[11] * t3 + t4[15];
          this.modelviewMatrix.setElements$1(t2);
          t1.SetUniformVal$2("uViewMatrix", t2);
        }
        for (t2 = this.viewMatrix, i = 0; false; ++i) {
          l = lights[i];
          canonical = "uLightSourceInfo" + i;
          t3 = l.PackInfo$1(t2);
          if ($.$get$_VarsDb().$index(0, canonical) == null)
            H.throwExpression("unknown " + canonical);
          t1._uniforms.$indexSet(0, canonical, t3);
        }
        for (t2 = this.followCameraObjects, t3 = this.modelviewMatrix, _i = 0; false; ++_i) {
          node = t2[_i];
          if (node.get$enabled(node))
            node.draw$3(this, t1, t3);
        }
        for (t2 = this.objects, t4 = t2.length, _i = 0; _i < t2.length; t2.length === t4 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          node = t2[_i];
          if (node.enabled)
            node.draw$3(this, t1, t3);
        }
        this._program.End$1(false);
      }
    },
    ShaderProgram_hasEnabledObjects_closure: {
      "^": "Closure:12;",
      call$1: function(n) {
        return n.enabled;
      }
    },
    ShaderProgram_hasEnabledObjects_closure0: {
      "^": "Closure:12;",
      call$1: function(n) {
        return n.enabled;
      }
    },
    ShaderUtils: {
      "^": "Object;gl",
      getShader$2: function(type, text) {
        var shader, result, error;
        shader = this.gl.createShader(type);
        this.gl.shaderSource(shader, text);
        this.gl.compileShader(shader);
        result = this.gl.getShaderParameter(shader, 35713);
        if (result != null && result === false) {
          error = this.gl.getShaderInfoLog(shader);
          window;
          if (typeof console != "undefined")
            console.log("Compilation failed:");
          window;
          if (typeof console != "undefined")
            console.log(text);
          window;
          if (typeof console != "undefined")
            console.log("Failure:");
          window;
          if (typeof console != "undefined")
            console.log(error);
          throw H.wrapException(error);
        }
        return shader;
      }
    },
    Spatial: {
      "^": "Object;"
    },
    TextureProperties: {
      "^": "Object;mipmap,clamp,flipY,anisotropicFilterLevel,minFilter,magFilter"
    },
    Texture: {
      "^": "Object;",
      GetTexture$0: function() {
        return this._texture;
      }
    },
    Texture_loadAndInstallAllTextures_closure: {
      "^": "Closure:22;gl",
      call$1: [function(list) {
        var t1, t2, t3, _i, tw;
        window;
        if (typeof console != "undefined")
          console.log("All images have loaded");
        for (t1 = $.$get$Texture__cache(), t2 = t1.length, t3 = this.gl, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          tw = t1[_i];
          if (tw._texture != null)
            continue;
          tw.Install$1(t3);
        }
      }, null, null, 2, 0, null, 17, "call"]
    },
    ImageTexture: {
      "^": "Texture;_image,_textureType,_future,_url,_texture,properties",
      Install$1: function(gl) {
        var t1, t2, t3;
        t1 = this._textureType;
        if (t1 !== 3553)
          return;
        t2 = gl.createTexture();
        this._texture = t2;
        gl.bindTexture(t1, t2);
        C.RenderingContext_methods.texImage2D$6(gl, t1, 0, 6408, 6408, 5121, this._image);
        t2 = this.properties;
        gl.pixelStorei(37440, 1);
        t3 = t2.anisotropicFilterLevel;
        if (t3 !== 1)
          gl.texParameterf(t1, 34046, t3);
        gl.texParameteri(t1, 10240, t2.magFilter);
        gl.texParameteri(t1, 10241, t2.minFilter);
        gl.getError();
        gl.bindTexture(t1, null);
      }
    }
  }], ["chronosmath", "package:chronosgl/chronosmath.dart",, Q, {
    "^": "",
    Matrix3: {
      "^": "Object;array<"
    },
    Matrix4: {
      "^": "Object;array<,newBack,newUp,newRight",
      $index: function(_, index) {
        return this.array[index];
      },
      identity$0: function() {
        var t1, i;
        for (t1 = this.array, i = 0; i < 16; ++i)
          t1[i] = C.JSInt_methods.$mod(i, 5) === 0 ? 1 : 0;
        return this;
      },
      setElements$1: function(other) {
        var t1, t2, t3, i;
        for (t1 = this.array, t2 = t1.length, t3 = other.array, i = 0; i < t2; ++i)
          t1[i] = t3[i];
      },
      toString$0: function(_) {
        return C.NativeFloat32List_methods.toString$0(this.array);
      }
    },
    Quaternion: {
      "^": "Object;array<,_tempLookAt,m",
      $index: function(_, index) {
        return this.array[index];
      },
      $set$4: function(_, x, y, z, w) {
        var t1 = this.array;
        t1[0] = x;
        t1[1] = y;
        t1[2] = z;
        t1[3] = w;
        return this;
      },
      setAxisAngle$2: function(axis, rad) {
        var t1, t2, t3;
        rad *= 0.5;
        t1 = Math.sin(H.checkNum(rad));
        t2 = this.array;
        t3 = axis.array;
        t2[0] = t1 * t3[0];
        t2[1] = t1 * t3[1];
        t2[2] = t1 * t3[2];
        t2[3] = Math.cos(H.checkNum(rad));
        return this;
      },
      toRotationMatrix4$1: function(out) {
        var t1, t2, x2, t3, y2, t4, z2, yx, yy, zx, zy, zz, wx, wy, wz;
        t1 = this.array;
        t2 = t1[0];
        x2 = t2 + t2;
        t3 = t1[1];
        y2 = t3 + t3;
        t4 = t1[2];
        z2 = t4 + t4;
        yx = t3 * x2;
        yy = t3 * y2;
        zx = t4 * x2;
        zy = t4 * y2;
        zz = t4 * z2;
        t1 = t1[3];
        wx = t1 * x2;
        wy = t1 * y2;
        wz = t1 * z2;
        t1 = out.array;
        t1[0] = 1 - yy - zz;
        t1[4] = yx - wz;
        t1[8] = zx + wy;
        t1[1] = yx + wz;
        t2 = 1 - t2 * x2;
        t1[5] = t2 - zz;
        t1[9] = zy - wx;
        t1[2] = zx - wy;
        t1[6] = zy + wx;
        t1[10] = t2 - yy;
      },
      Quaternion$4: function(x, y, z, w) {
        var t1 = new Float32Array(H._checkLength(4));
        this.array = t1;
        t1[0] = x;
        t1[1] = y;
        t1[2] = z;
        t1[3] = w;
      },
      static: {
        Quaternion$: function(x, y, z, w) {
          var t1 = new Q.Quaternion(null, Q.Vector$(0, 0, 0), new Float32Array(H._checkLength(9)));
          t1.Quaternion$4(x, y, z, w);
          return t1;
        }
      }
    },
    Vector2: {
      "^": "Object;array<",
      Vector2$2: function(x, y) {
        var t1 = new Float32Array(H._checkLength(2));
        this.array = t1;
        x.toString;
        t1[0] = x;
        y.toString;
        t1[1] = y;
      },
      static: {
        Vector2$: function(x, y) {
          var t1 = new Q.Vector2(null);
          t1.Vector2$2(x, y);
          return t1;
        }
      }
    },
    Vector4: {
      "^": "Object;array<",
      Vector4$4: function(r, g, b, a) {
        var t1 = new Float32Array(H._checkLength(4));
        this.array = t1;
        t1[0] = r;
        t1[1] = g;
        t1[2] = b;
        t1[3] = a;
      },
      static: {
        Vector4$: function(r, g, b, a) {
          var t1 = new Q.Vector4(null);
          t1.Vector4$4(r, g, b, a);
          return t1;
        }
      }
    },
    Vector: {
      "^": "Object;array<,m,_v",
      $index: function(_, index) {
        return this.array[index];
      },
      $set$3: function(_, x, y, z) {
        var t1, t2;
        t1 = J.getInterceptor(x);
        t2 = this.array;
        if (!!t1.$isVector) {
          t2[0] = t1.$index(x, 0);
          this.array[1] = t1.$index(x, 1);
          this.array[2] = t1.$index(x, 2);
        } else {
          t2[0] = x;
          y.toString;
          t2[1] = y;
          z.toString;
          t2[2] = z;
        }
        return this;
      },
      normalize$0: function(_) {
        var t1, x, y, z, t2, len;
        t1 = this.array;
        x = t1[0];
        y = t1[1];
        z = t1[2];
        t1 = Math.sqrt(H.checkNum(x * x + y * y + z * z));
        if (t1 === 0) {
          t1 = this.array;
          t1[0] = 0;
          t1[1] = 0;
          t1[2] = 0;
        } else {
          t2 = this.array;
          if (t1 === 1) {
            t2[0] = x;
            t2[1] = y;
            t2[2] = z;
          } else {
            len = 1 / t1;
            t2[0] = x * len;
            t2[1] = y * len;
            t2[2] = z * len;
          }
        }
      },
      cross2$2: function(vec1, vec2) {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = vec1.array;
        t2 = t1[0];
        t3 = t1[1];
        t1 = t1[2];
        t4 = vec2.array;
        t5 = t4[0];
        t6 = t4[1];
        t4 = t4[2];
        t7 = this.array;
        t7[0] = t3 * t4 - t1 * t6;
        t7[1] = t1 * t5 - t2 * t4;
        t7[2] = t2 * t6 - t3 * t5;
      },
      length$0: [function(_) {
        var t1, x, y, z;
        t1 = this.array;
        x = t1[0];
        y = t1[1];
        z = t1[2];
        return Math.sqrt(H.checkNum(x * x + y * y + z * z));
      }, "call$0", "get$length", 0, 0, 7],
      toString$0: function(_) {
        return C.NativeFloat32List_methods.toString$0(this.array);
      },
      Vector$3: function(x, y, z) {
        var t1 = new Float32Array(H._checkLength(3));
        this.array = t1;
        t1[0] = x;
        t1[1] = y;
        t1[2] = z;
      },
      static: {
        Vector$: function(x, y, z) {
          var t1 = new Q.Vector(null, null, H.setRuntimeTypeInfo(new Array(4), [P.$double]));
          t1.Vector$3(x, y, z);
          return t1;
        }
      }
    }
  }], ["chronosshader", "package:chronosgl/chronosshader.dart",, V, {
    "^": "",
    ShaderVarDesc: {
      "^": "Object;type*,purpose",
      GetSize$0: function() {
        switch (this.type) {
          case "float":
            return 1;
          case "vec2":
            return 2;
          case "vec3":
            return 3;
          case "vec4":
            return 4;
          default:
            return -1;
        }
      },
      IsScalarTypeFloat$0: function() {
        switch (this.type) {
          case "float":
          case "vec2":
          case "vec3":
          case "vec4":
            return true;
          default:
            return false;
        }
      }
    },
    ShaderObject: {
      "^": "Object;name,shader,attributeVars,uniformVars,varyingVars",
      AddAttributeVar$2: function(canonicalName, actualName) {
        this.attributeVars.$indexSet(0, canonicalName, canonicalName);
      },
      AddAttributeVar$1: function(canonicalName) {
        return this.AddAttributeVar$2(canonicalName, null);
      },
      AddUniformVar$2: function(canonicalName, actualName) {
        this.uniformVars.$indexSet(0, canonicalName, canonicalName);
      },
      AddUniformVar$1: function(canonicalName) {
        return this.AddUniformVar$2(canonicalName, null);
      },
      AddVaryingVar$2: function(canonicalName, actualName) {
        this.varyingVars.$indexSet(0, canonicalName, canonicalName);
      },
      AddVaryingVar$1: function(canonicalName) {
        return this.AddVaryingVar$2(canonicalName, null);
      },
      _CreateShader$2: function(addWrapperForMain, body) {
        var out, t1, t2, v;
        out = [];
        out.push("precision highp float;");
        out.push("");
        for (t1 = this.attributeVars, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          v = t2.get$current();
          out.push("attribute " + $.$get$_VarsDb().$index(0, v).type + " " + H.S(t1.$index(0, v)) + ";");
        }
        out.push("");
        for (t1 = this.varyingVars, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          v = t2.get$current();
          out.push("varying " + $.$get$_VarsDb().$index(0, v).type + " " + H.S(t1.$index(0, v)) + ";");
        }
        out.push("");
        for (t1 = this.uniformVars, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          v = t2.get$current();
          out.push("uniform " + $.$get$_VarsDb().$index(0, v).type + " " + H.S(t1.$index(0, v)) + ";");
        }
        out.push("");
        out.push("void main(void) {");
        C.JSArray_methods.addAll$1(out, body);
        out.push("}");
        return C.JSArray_methods.join$1(out, "\n");
      }
    }
  }], ["color_rotator", "color_rotator.dart",, Q, {
    "^": "",
    ColorRotator: {
      "^": "Object;r,g,b,_srcH,_srcS,_srcL,_dstH,_dstS,_dstL,h,s,l,_interpolate,_change,_drasticProb,_speed,_rng"
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    ListIterable: {
      "^": "Iterable;",
      get$iterator: function(_) {
        return H.setRuntimeTypeInfo(new H.ListIterator(this, this.get$length(this), 0, null), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      },
      forEach$1: function(_, action) {
        var $length, i;
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      where$1: function(_, test) {
        return this.super$Iterable$where(this, test);
      },
      toList$1$growable: function(_, growable) {
        var result, i;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
        for (i = 0; i < this.get$length(this); ++i)
          result[i] = this.elementAt$1(0, i);
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      $isEfficientLength: 1
    },
    ListIterator: {
      "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (this.__internal$_length !== $length)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t3 = this._index;
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this._index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {
        MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          if (!!J.getInterceptor(iterable).$isEfficientLength)
            return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
          return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
        }
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f",
      $isEfficientLength: 1
    },
    MappedIterator: {
      "^": "Iterator;__internal$_current,_iterator,_f",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f$1(J.elementAt$1$ax(this._source, index));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      $isEfficientLength: 1
    },
    WhereIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f",
      moveNext$0: function() {
        for (var t1 = this._iterator; t1.moveNext$0();)
          if (this._f$1(t1.get$current()))
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      }
    },
    FixedLengthListMixin: {
      "^": "Object;",
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      }
    },
    Symbol0: {
      "^": "Object;__internal$_name",
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.Symbol0) {
          t1 = this.__internal$_name;
          t2 = other.__internal$_name;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
      },
      toString$0: function(_) {
        return 'Symbol("' + H.S(this.__internal$_name) + '")';
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
      t1.fixed$length = Array;
      return t1;
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 5],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 5],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 5],
    _registerErrorHandler: function(errorHandler, zone) {
      var t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
      if (t1) {
        zone.toString;
        return errorHandler;
      } else {
        zone.toString;
        return errorHandler;
      }
    },
    Future_wait: function(futures, cleanUp, eagerError) {
      var t1, result, t2, t3, _i, values;
      t1 = {};
      result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.List]);
      t1.values = null;
      t1.remaining = 0;
      t1.error = null;
      t1.stackTrace = null;
      t2 = new P.Future_wait_handleError(t1, false, cleanUp, result);
      for (t3 = futures.length, _i = 0; _i < futures.length; futures.length === t3 || (0, H.throwConcurrentModificationError)(futures), ++_i)
        futures[_i].then$2$onError(new P.Future_wait_closure(t1, false, cleanUp, result, t1.remaining++), t2);
      t2 = t1.remaining;
      if (t2 === 0) {
        t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1._asyncComplete$1(C.List_empty);
        return t1;
      }
      values = new Array(t2);
      values.fixed$length = Array;
      t1.values = values;
      return result;
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      $.Zone__current.toString;
      result._completeError$2(error, stackTrace);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 3],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback, null);
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback, null);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, currentZone.bindCallback$2$runGuarded(callback, true));
    },
    StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
      var t1 = H.setRuntimeTypeInfo(new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
      return t1;
    },
    _runGuarded: function(notificationHandler) {
      var result, e, s, exception, t1;
      if (notificationHandler == null)
        return;
      try {
        result = notificationHandler.call$0();
        if (!!J.getInterceptor(result).$isFuture)
          return result;
        return;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        t1 = $.Zone__current;
        t1.toString;
        P._rootHandleUncaughtError(null, null, t1, e, s);
      }
    },
    _nullErrorHandler: [function(error, stackTrace) {
      var t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
    }, function(error) {
      return P._nullErrorHandler(error, null);
    }, "call$2", "call$1", "async___nullErrorHandler$closure", 2, 2, 13, 1, 3, 4],
    _nullDoneHandler: [function() {
    }, "call$0", "async___nullDoneHandler$closure", 0, 0, 3],
    _runUserCode: function(userCode, onSuccess, onError) {
      var e, s, replacement, error, stackTrace, exception, t1;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          t1 = J.get$error$x(replacement);
          error = t1;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(0);
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(0);
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._async$_complete$1(value);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone) {
        t1.toString;
        return P.Timer__createTimer(duration, callback);
      }
      return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1 = C.C__RootZone !== zone;
      if (t1)
        f = zone.bindCallback$2$runGuarded(f, !(!t1 || false));
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:1;_box_0",
      call$1: [function(_) {
        var t1, f;
        --init.globalState.topEventLoop._activeJsAsyncCount;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }, null, null, 2, 0, null, 5, "call"]
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:19;_box_0,div,span",
      call$1: function(callback) {
        var t1, t2;
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._box_0.storedCallback = callback;
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:0;callback",
      call$0: [function() {
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:0;callback",
      call$0: [function() {
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _BroadcastStream: {
      "^": "_ControllerStream;_async$_controller"
    },
    _BroadcastSubscription: {
      "^": "_ControllerSubscription;_eventState,_async$_next@,_async$_previous?,_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      get$_async$_controller: function() {
        return this._async$_controller;
      },
      _onPause$0: function() {
      },
      _onResume$0: function() {
      },
      $is_EventSink: 1
    },
    _BroadcastStreamController: {
      "^": "Object;_state@,_async$_next@,_async$_previous?",
      get$_mayAddEvent: function() {
        return this._state < 4;
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        this._doneFuture = t1;
        return t1;
      },
      _removeListener$1: function(subscription) {
        var previous, next;
        previous = subscription._async$_previous;
        next = subscription._async$_next;
        previous.set$_async$_next(next);
        next.set$_async$_previous(previous);
        subscription._async$_previous = subscription;
        subscription._async$_next = subscription;
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription;
        if ((this._state & 4) !== 0) {
          if (onDone == null)
            onDone = P.async___nullDoneHandler$closure();
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          t1._schedule$0();
          return t1;
        }
        t1 = $.Zone__current;
        subscription = new P._BroadcastSubscription(0, null, null, this, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
        subscription.$builtinTypeInfo = this.$builtinTypeInfo;
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
        subscription._async$_previous = subscription;
        subscription._async$_next = subscription;
        t1 = this._async$_previous;
        subscription._async$_previous = t1;
        subscription._async$_next = this;
        t1.set$_async$_next(subscription);
        this._async$_previous = subscription;
        subscription._eventState = this._state & 1;
        if (this._async$_next === subscription)
          P._runGuarded(this.onListen);
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        var t1;
        if (subscription._async$_next === subscription)
          return;
        t1 = subscription._eventState;
        if ((t1 & 2) !== 0)
          subscription._eventState = (t1 | 4) >>> 0;
        else {
          this._removeListener$1(subscription);
          if ((this._state & 2) === 0 && this._async$_next === this)
            this._callOnCancel$0();
        }
        return;
      },
      _recordPause$1: function(subscription) {
      },
      _recordResume$1: function(subscription) {
      },
      _addEventError$0: ["super$_BroadcastStreamController$_addEventError", function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add new events after calling close");
        return new P.StateError("Cannot add new events while doing an addStream");
      }],
      add$1: [function(_, data) {
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._sendData$1(data);
      }, "call$1", "get$add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, v: true, args: [T]};
        }, this.$receiver, "_BroadcastStreamController");
      }, 21],
      addError$2: [function(error, stackTrace) {
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        $.Zone__current.toString;
        this._sendError$2(error, stackTrace);
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 14, 1],
      close$0: function(_) {
        var doneFuture;
        if ((this._state & 4) !== 0)
          return this._doneFuture;
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._state |= 4;
        doneFuture = this._ensureDoneFuture$0();
        this._sendDone$0();
        return doneFuture;
      },
      _forEachListener$1: function(action) {
        var t1, link, id, link0;
        t1 = this._state;
        if ((t1 & 2) !== 0)
          throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
        link = this._async$_next;
        if (link === this)
          return;
        id = t1 & 1;
        this._state = t1 ^ 3;
        for (; link !== this;) {
          t1 = link._eventState;
          if ((t1 & 1) === id) {
            link._eventState = (t1 | 2) >>> 0;
            action.call$1(link);
            t1 = (link._eventState ^ 1) >>> 0;
            link._eventState = t1;
            link0 = link._async$_next;
            if ((t1 & 4) !== 0)
              this._removeListener$1(link);
            link._eventState = (link._eventState & 4294967293) >>> 0;
            link = link0;
          } else
            link = link._async$_next;
        }
        this._state &= 4294967293;
        if (this._async$_next === this)
          this._callOnCancel$0();
      },
      _callOnCancel$0: function() {
        if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
          this._doneFuture._asyncComplete$1(null);
        P._runGuarded(this.onCancel);
      }
    },
    _SyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;onListen,onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      get$_mayAddEvent: function() {
        return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
      },
      _addEventError$0: function() {
        if ((this._state & 2) !== 0)
          return new P.StateError("Cannot fire new event. Controller is already firing an event");
        return this.super$_BroadcastStreamController$_addEventError();
      },
      _sendData$1: function(data) {
        var t1 = this._async$_next;
        if (t1 === this)
          return;
        if (t1.get$_async$_next() === this) {
          this._state |= 2;
          this._async$_next._async$_add$1(0, data);
          this._state &= 4294967293;
          if (this._async$_next === this)
            this._callOnCancel$0();
          return;
        }
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
      },
      _sendError$2: function(error, stackTrace) {
        if (this._async$_next === this)
          return;
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
      },
      _sendDone$0: function() {
        if (this._async$_next !== this)
          this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _SyncBroadcastStreamController__sendData_closure: {
      "^": "Closure;$this,data",
      call$1: function(subscription) {
        subscription._async$_add$1(0, this.data);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendError_closure: {
      "^": "Closure;$this,error,stackTrace",
      call$1: function(subscription) {
        subscription._addError$2(this.error, this.stackTrace);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendDone_closure: {
      "^": "Closure;$this",
      call$1: function(subscription) {
        subscription._close$0();
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BroadcastSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    Future: {
      "^": "Object;"
    },
    Future_wait_handleError: {
      "^": "Closure:20;_box_0,eagerError,cleanUp,result",
      call$2: [function(theError, theStackTrace) {
        var t1, t2;
        t1 = this._box_0;
        t2 = --t1.remaining;
        if (t1.values != null) {
          t1.values = null;
          if (t1.remaining === 0 || this.eagerError)
            this.result._completeError$2(theError, theStackTrace);
          else {
            t1.error = theError;
            t1.stackTrace = theStackTrace;
          }
        } else if (t2 === 0 && !this.eagerError)
          this.result._completeError$2(t1.error, t1.stackTrace);
      }, null, null, 4, 0, null, 22, 23, "call"]
    },
    Future_wait_closure: {
      "^": "Closure:21;_box_0,eagerError,cleanUp,result,pos",
      call$1: [function(value) {
        var t1, t2, t3;
        t1 = this._box_0;
        t2 = --t1.remaining;
        t3 = t1.values;
        if (t3 != null) {
          t3[this.pos] = value;
          if (t2 === 0)
            this.result._completeWithValue$1(t3);
        } else if (t1.remaining === 0 && !this.eagerError)
          this.result._completeError$2(t1.error, t1.stackTrace);
      }, null, null, 2, 0, null, 2, "call"]
    },
    _Completer: {
      "^": "Object;",
      completeError$2: [function(error, stackTrace) {
        error = error != null ? error : new P.NullThrownError();
        if (this.future._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        $.Zone__current.toString;
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 14, 1, 3, 4]
    },
    _AsyncCompleter: {
      "^": "_Completer;future",
      complete$1: function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._asyncComplete$1(value);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._asyncCompleteError$2(error, stackTrace);
      }
    },
    _FutureListener: {
      "^": "Object;_nextListener,result,state,callback,errorCallback"
    },
    _Future: {
      "^": "Object;_state@,_zone,_resultOrListeners<",
      then$2$onError: function(f, onError) {
        var currentZone, result;
        currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        this._addListener$1(new P._FutureListener(null, result, onError == null ? 1 : 3, f, onError));
        return result;
      },
      then$1: function(f) {
        return this.then$2$onError(f, null);
      },
      whenComplete$1: function(action) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = this.$builtinTypeInfo;
        if (t1 !== C.C__RootZone)
          t1.toString;
        this._addListener$1(new P._FutureListener(null, result, 8, action, null));
        return result;
      },
      _addListener$1: function(listener) {
        var t1, t2;
        t1 = this._state;
        if (t1 <= 1) {
          listener._nextListener = this._resultOrListeners;
          this._resultOrListeners = listener;
        } else {
          if (t1 === 2) {
            t1 = this._resultOrListeners;
            t2 = t1._state;
            if (t2 < 4) {
              t1._addListener$1(listener);
              return;
            }
            this._state = t2;
            this._resultOrListeners = t1._resultOrListeners;
          }
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
        }
      },
      _prependListeners$1: function(listeners) {
        var t1, t2, existingListeners, cursor, cursor0, t3;
        t1 = {};
        t1.listeners = listeners;
        if (listeners == null)
          return;
        t2 = this._state;
        if (t2 <= 1) {
          existingListeners = this._resultOrListeners;
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
              ;
            cursor._nextListener = existingListeners;
          }
        } else {
          if (t2 === 2) {
            t2 = this._resultOrListeners;
            t3 = t2._state;
            if (t3 < 4) {
              t2._prependListeners$1(listeners);
              return;
            }
            this._state = t3;
            this._resultOrListeners = t2._resultOrListeners;
          }
          t1.listeners = this._reverseListeners$1(listeners);
          t2 = this._zone;
          t2.toString;
          P._rootScheduleMicrotask(null, null, t2, new P._Future__prependListeners_closure(t1, this));
        }
      },
      _removeListeners$0: function() {
        var current = this._resultOrListeners;
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current._nextListener;
          current._nextListener = prev;
        }
        return prev;
      },
      _async$_complete$1: function(value) {
        var listeners;
        if (!!J.getInterceptor(value).$isFuture)
          P._Future__chainCoreFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeWithValue$1: function(value) {
        var listeners = this._removeListeners$0();
        this._state = 4;
        this._resultOrListeners = value;
        P._Future__propagateToListeners(this, listeners);
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners = this._removeListeners$0();
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 13, 1, 3, 4],
      _asyncComplete$1: function(value) {
        var t1;
        if (value == null)
          ;
        else if (!!J.getInterceptor(value).$isFuture) {
          if (value._state === 8) {
            this._state = 1;
            t1 = this._zone;
            t1.toString;
            P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
          } else
            P._Future__chainCoreFuture(value, this);
          return;
        }
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
      },
      _asyncCompleteError$2: function(error, stackTrace) {
        var t1;
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
      },
      $isFuture: 1,
      static: {
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception, t1;
          target.set$_state(1);
          try {
            source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var t1, current, listeners;
          for (; t1 = source._state, t1 === 2;)
            source = source._resultOrListeners;
          current = target._resultOrListeners;
          if (t1 >= 4) {
            target._resultOrListeners = null;
            listeners = target._reverseListeners$1(current);
            target._state = source._state;
            target._resultOrListeners = source._resultOrListeners;
            P._Future__propagateToListeners(target, listeners);
          } else {
            target._state = 2;
            target._resultOrListeners = source;
            source._prependListeners$1(current);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var t1, t2, t3, hasError, listeners0, sourceResult, t4, t5, zone, t6, oldZone, current, result;
          t1 = {};
          t1.source = source;
          for (t2 = source; true;) {
            t3 = {};
            hasError = t2._state === 8;
            if (listeners == null) {
              if (hasError) {
                t1 = t2._resultOrListeners;
                t2 = t2._zone;
                t3 = t1.error;
                t1 = t1.stackTrace;
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t1);
              }
              return;
            }
            for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
              listeners._nextListener = null;
              P._Future__propagateToListeners(t1.source, listeners);
            }
            t2 = t1.source;
            sourceResult = t2._resultOrListeners;
            t3.listenerHasError = hasError;
            t3.listenerValueOrError = sourceResult;
            t4 = !hasError;
            if (t4) {
              t5 = listeners.state;
              t5 = (t5 & 1) !== 0 || t5 === 8;
            } else
              t5 = true;
            if (t5) {
              t5 = listeners.result;
              zone = t5._zone;
              if (hasError) {
                t6 = t2._zone;
                t6.toString;
                t6 = t6 == null ? zone == null : t6 === zone;
                if (!t6)
                  zone.toString;
                else
                  t6 = true;
                t6 = !t6;
              } else
                t6 = false;
              if (t6) {
                t1 = t2._zone;
                t2 = sourceResult.error;
                t3 = sourceResult.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              t2 = listeners.state;
              if (t2 === 8)
                new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
              else if (t4) {
                if ((t2 & 1) !== 0)
                  new P._Future__propagateToListeners_handleValueCallback(t3, hasError, listeners, sourceResult, zone).call$0();
              } else if ((t2 & 2) !== 0)
                new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              t2 = t3.listenerValueOrError;
              t4 = J.getInterceptor(t2);
              if (!!t4.$isFuture) {
                if (!!t4.$is_Future)
                  if (t2._state >= 4) {
                    current = t5._resultOrListeners;
                    t5._resultOrListeners = null;
                    listeners = t5._reverseListeners$1(current);
                    t5._state = t2._state;
                    t5._resultOrListeners = t2._resultOrListeners;
                    t1.source = t2;
                    continue;
                  } else
                    P._Future__chainCoreFuture(t2, t5);
                else
                  P._Future__chainForeignFuture(t2, t5);
                return;
              }
            }
            result = listeners.result;
            current = result._resultOrListeners;
            result._resultOrListeners = null;
            listeners = result._reverseListeners$1(current);
            t2 = t3.listenerHasError;
            t3 = t3.listenerValueOrError;
            if (!t2) {
              result._state = 4;
              result._resultOrListeners = t3;
            } else {
              result._state = 8;
              result._resultOrListeners = t3;
            }
            t1.source = result;
            t2 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:0;$this,listener",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:0;_box_0,$this",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:1;target",
      call$1: [function(value) {
        this.target._completeWithValue$1(value);
      }, null, null, 2, 0, null, 2, "call"]
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:23;target",
      call$2: [function(error, stackTrace) {
        this.target._completeError$2(error, stackTrace);
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 1, 3, 4, "call"]
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:0;target,e,s",
      call$0: [function() {
        this.target._completeError$2(this.e, this.s);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncComplete_closure: {
      "^": "Closure:0;$this,coreFuture",
      call$0: function() {
        P._Future__chainCoreFuture(this.coreFuture, this.$this);
      }
    },
    _Future__asyncComplete_closure0: {
      "^": "Closure:0;$this,value",
      call$0: function() {
        this.$this._completeWithValue$1(this.value);
      }
    },
    _Future__asyncCompleteError_closure: {
      "^": "Closure:0;$this,error,stackTrace",
      call$0: function() {
        this.$this._completeError$2(this.error, this.stackTrace);
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:3;_box_0,hasError,listener,sourceResult,zone",
      call$0: function() {
        var e, s, t1, exception;
        try {
          t1 = this._box_0;
          t1.listenerValueOrError = this.zone.runUnary$2(this.listener.callback, this.sourceResult);
          t1.listenerHasError = false;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = new P.AsyncError(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:3;_box_1,_box_0,listener,zone",
      call$0: function() {
        var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
        asyncError = this._box_1.source._resultOrListeners;
        matchesTest = true;
        t1 = this.listener;
        if (t1.state === 6) {
          test = t1.callback;
          try {
            matchesTest = this.zone.runUnary$2(test, J.get$error$x(asyncError));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
            t1 = this._box_0;
            t1.listenerValueOrError = listenerValueOrError;
            t1.listenerHasError = true;
            return;
          }
        }
        errorCallback = t1.errorCallback;
        if (matchesTest && errorCallback != null)
          try {
            t1 = errorCallback;
            t2 = H.getDynamicRuntimeType();
            t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
            t3 = this.zone;
            t4 = this._box_0;
            if (t2)
              t4.listenerValueOrError = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            else
              t4.listenerValueOrError = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
            t4.listenerHasError = false;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e0 = t1;
            s0 = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e0;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
            t1 = this._box_0;
            t1.listenerValueOrError = listenerValueOrError;
            t1.listenerHasError = true;
          }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:3;_box_1,_box_0,hasError,listener,zone",
      call$0: function() {
        var completeResult, e, s, exception, t1, t2;
        completeResult = null;
        try {
          completeResult = this.zone.run$1(this.listener.callback);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = this._box_1.source._resultOrListeners.error;
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = this._box_1.source._resultOrListeners;
          else
            t2.listenerValueOrError = new P.AsyncError(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_state() >= 4) {
            if (completeResult.get$_state() === 8) {
              t1 = this._box_0;
              t1.listenerValueOrError = completeResult.get$_resultOrListeners();
              t1.listenerHasError = true;
            }
            return;
          }
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this._box_1.source));
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:1;originalSource",
      call$1: [function(_) {
        return this.originalSource;
      }, null, null, 2, 0, null, 5, "call"]
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,next"
    },
    Stream: {
      "^": "Object;",
      forEach$1: function(_, action) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.$int]);
        t1.count = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$first: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
        return future;
      }
    },
    Stream_forEach_closure: {
      "^": "Closure;_box_0,$this,action,future",
      call$1: [function(element) {
        P._runUserCode(new P.Stream_forEach__closure(this.action, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._box_0.subscription, this.future));
      }, null, null, 2, 0, null, 6, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_forEach__closure: {
      "^": "Closure:0;action,element",
      call$0: function() {
        return this.action.call$1(this.element);
      }
    },
    Stream_forEach__closure0: {
      "^": "Closure:1;",
      call$1: function(_) {
      }
    },
    Stream_forEach_closure0: {
      "^": "Closure:0;future",
      call$0: [function() {
        this.future._async$_complete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_length_closure: {
      "^": "Closure:1;_box_0",
      call$1: [function(_) {
        ++this._box_0.count;
      }, null, null, 2, 0, null, 5, "call"]
    },
    Stream_length_closure0: {
      "^": "Closure:0;_box_0,future",
      call$0: [function() {
        this.future._async$_complete$1(this._box_0.count);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_first_closure: {
      "^": "Closure;_box_0,$this,future",
      call$1: [function(value) {
        P._cancelAndValue(this._box_0.subscription, this.future, value);
      }, null, null, 2, 0, null, 2, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_first_closure0: {
      "^": "Closure:0;future",
      call$0: [function() {
        var e, s, t1, exception;
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this.future, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    StreamSubscription: {
      "^": "Object;"
    },
    StreamTransformer: {
      "^": "Object;"
    },
    _ControllerStream: {
      "^": "_StreamImpl;_async$_controller",
      get$hashCode: function(_) {
        return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof P._ControllerStream))
          return false;
        return other._async$_controller === this._async$_controller;
      }
    },
    _ControllerSubscription: {
      "^": "_BufferingStreamSubscription;_async$_controller<",
      _onCancel$0: function() {
        return this.get$_async$_controller()._recordCancel$1(this);
      },
      _onPause$0: function() {
        this.get$_async$_controller()._recordPause$1(this);
      },
      _onResume$0: function() {
        this.get$_async$_controller()._recordResume$1(this);
      }
    },
    _EventSink: {
      "^": "Object;"
    },
    _BufferingStreamSubscription: {
      "^": "Object;_state@",
      cancel$0: function(_) {
        var t1 = (this._state & 4294967279) >>> 0;
        this._state = t1;
        if ((t1 & 8) !== 0)
          return this._cancelFuture;
        this._cancel$0();
        return this._cancelFuture;
      },
      _cancel$0: function() {
        var t1, t2;
        t1 = (this._state | 8) >>> 0;
        this._state = t1;
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          if (t2._state === 1)
            t2._state = 3;
        }
        if ((t1 & 32) === 0)
          this._pending = null;
        this._cancelFuture = this._onCancel$0();
      },
      _async$_add$1: function(_, data) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendData$1(data);
        else
          this._addPending$1(H.setRuntimeTypeInfo(new P._DelayedData(data, null), [null]));
      },
      _addError$2: function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendError$2(error, stackTrace);
        else
          this._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _close$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t1 = (t1 | 2) >>> 0;
        this._state = t1;
        if (t1 < 32)
          this._sendDone$0();
        else
          this._addPending$1(C.C__DelayedDone);
      },
      _onPause$0: function() {
      },
      _onResume$0: function() {
      },
      _onCancel$0: function() {
        return;
      },
      _addPending$1: function($event) {
        var pending, t1;
        pending = this._pending;
        if (pending == null) {
          pending = new P._StreamImplEvents(null, null, 0);
          this._pending = pending;
        }
        pending.add$1(0, $event);
        t1 = this._state;
        if ((t1 & 64) === 0) {
          t1 = (t1 | 64) >>> 0;
          this._state = t1;
          if (t1 < 128)
            this._pending.schedule$1(this);
        }
      },
      _sendData$1: function(data) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        this._zone.runUnaryGuarded$2(this._async$_onData, data);
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _sendError$2: function(error, stackTrace) {
        var t1, t2;
        t1 = this._state;
        t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
        if ((t1 & 1) !== 0) {
          this._state = (t1 | 16) >>> 0;
          this._cancel$0();
          t1 = this._cancelFuture;
          if (!!J.getInterceptor(t1).$isFuture)
            t1.whenComplete$1(t2);
          else
            t2.call$0();
        } else {
          t2.call$0();
          this._checkState$1((t1 & 4) !== 0);
        }
      },
      _sendDone$0: function() {
        var t1, t2;
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
        this._cancel$0();
        this._state = (this._state | 16) >>> 0;
        t2 = this._cancelFuture;
        if (!!J.getInterceptor(t2).$isFuture)
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      },
      _checkState$1: function(wasInputPaused) {
        var t1, t2, isInputPaused;
        t1 = this._state;
        if ((t1 & 64) !== 0 && this._pending.lastPendingEvent == null) {
          t1 = (t1 & 4294967231) >>> 0;
          this._state = t1;
          if ((t1 & 4) !== 0)
            if (t1 < 128) {
              t2 = this._pending;
              t2 = t2 == null || t2.lastPendingEvent == null;
            } else
              t2 = false;
          else
            t2 = false;
          if (t2) {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
          }
        }
        for (; true; wasInputPaused = isInputPaused) {
          if ((t1 & 8) !== 0) {
            this._pending = null;
            return;
          }
          isInputPaused = (t1 & 4) !== 0;
          if (wasInputPaused === isInputPaused)
            break;
          this._state = (t1 ^ 32) >>> 0;
          if (isInputPaused)
            this._onPause$0();
          else
            this._onResume$0();
          t1 = (this._state & 4294967263) >>> 0;
          this._state = t1;
        }
        if ((t1 & 64) !== 0 && t1 < 128)
          this._pending.schedule$1(this);
      },
      _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
        var t1 = this._zone;
        t1.toString;
        this._async$_onData = onData;
        this._onError = P._registerErrorHandler(onError == null ? P.async___nullErrorHandler$closure() : onError, t1);
        this._onDone = onDone == null ? P.async___nullDoneHandler$closure() : onDone;
      },
      $is_EventSink: 1
    },
    _BufferingStreamSubscription__sendError_sendError: {
      "^": "Closure:3;$this,error,stackTrace",
      call$0: [function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 8) !== 0 && (t2 & 16) === 0)
          return;
        t1._state = (t2 | 32) >>> 0;
        t2 = t1._onError;
        t3 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
        t4 = t1._zone;
        t5 = this.error;
        t6 = t1._onError;
        if (t3)
          t4.runBinaryGuarded$3(t6, t5, this.stackTrace);
        else
          t4.runUnaryGuarded$2(t6, t5);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _BufferingStreamSubscription__sendDone_sendDone: {
      "^": "Closure:3;$this",
      call$0: [function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 16) === 0)
          return;
        t1._state = (t2 | 42) >>> 0;
        t1._zone.runGuarded$1(t1._onDone);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImpl: {
      "^": "Stream;",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._async$_controller._subscribe$4(onData, onError, onDone, true === cancelOnError);
      }
    },
    _DelayedEvent: {
      "^": "Object;next*"
    },
    _DelayedData: {
      "^": "_DelayedEvent;value,next",
      perform$1: function(dispatch) {
        dispatch._sendData$1(this.value);
      }
    },
    _DelayedError: {
      "^": "_DelayedEvent;error>,stackTrace<,next",
      perform$1: function(dispatch) {
        dispatch._sendError$2(this.error, this.stackTrace);
      }
    },
    _DelayedDone: {
      "^": "Object;",
      perform$1: function(dispatch) {
        dispatch._sendDone$0();
      },
      get$next: function(_) {
        return;
      },
      set$next: function(_, _0) {
        throw H.wrapException(new P.StateError("No events after a done."));
      }
    },
    _PendingEvents: {
      "^": "Object;_state@",
      schedule$1: function(dispatch) {
        var t1 = this._state;
        if (t1 === 1)
          return;
        if (t1 >= 1) {
          this._state = 1;
          return;
        }
        P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
        this._state = 1;
      }
    },
    _PendingEvents_schedule_closure: {
      "^": "Closure:0;$this,dispatch",
      call$0: [function() {
        var t1, oldState, $event, t2;
        t1 = this.$this;
        oldState = t1._state;
        t1._state = 0;
        if (oldState === 3)
          return;
        $event = t1.firstPendingEvent;
        t2 = $event.get$next($event);
        t1.firstPendingEvent = t2;
        if (t2 == null)
          t1.lastPendingEvent = null;
        $event.perform$1(this.dispatch);
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
      add$1: function(_, $event) {
        var t1 = this.lastPendingEvent;
        if (t1 == null) {
          this.lastPendingEvent = $event;
          this.firstPendingEvent = $event;
        } else {
          t1.set$next(0, $event);
          this.lastPendingEvent = $event;
        }
      }
    },
    _DoneStreamSubscription: {
      "^": "Object;_zone,_state@,_onDone",
      _schedule$0: function() {
        var t1, t2;
        if ((this._state & 2) !== 0)
          return;
        t1 = this._zone;
        t2 = this.get$_sendDone();
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, t2);
        this._state = (this._state | 2) >>> 0;
      },
      cancel$0: function(_) {
        return;
      },
      _sendDone$0: [function() {
        var t1 = (this._state & 4294967293) >>> 0;
        this._state = t1;
        if (t1 >= 4)
          return;
        this._state = (t1 | 1) >>> 0;
        this._zone.runGuarded$1(this._onDone);
      }, "call$0", "get$_sendDone", 0, 0, 3]
    },
    _cancelAndError_closure: {
      "^": "Closure:0;future,error,stackTrace",
      call$0: [function() {
        return this.future._completeError$2(this.error, this.stackTrace);
      }, null, null, 0, 0, null, "call"]
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:24;subscription,future",
      call$2: function(error, stackTrace) {
        return P._cancelAndError(this.subscription, this.future, error, stackTrace);
      }
    },
    _cancelAndValue_closure: {
      "^": "Closure:0;future,value",
      call$0: [function() {
        return this.future._async$_complete$1(this.value);
      }, null, null, 0, 0, null, "call"]
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;"
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:0;_box_0,stackTrace",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        error = H.wrapException(t1);
        error.stack = J.toString$0$(t2);
        throw error;
      }
    },
    _RootZone: {
      "^": "_Zone;",
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$0();
            return t1;
          }
          t1 = P._rootRun(null, null, this, f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$1(arg);
            return t1;
          }
          t1 = P._rootRunUnary(null, null, this, f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$2(arg1, arg2);
            return t1;
          }
          t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindCallback_closure(this, f);
        else
          return new P._RootZone_bindCallback_closure0(this, f);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      },
      $index: function(_, key) {
        return;
      },
      run$1: function(f) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f);
      },
      runUnary$2: function(f, arg) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg);
      },
      runBinary$3: function(f, arg1, arg2) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2);
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure:0;$this,f",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindCallback_closure0: {
      "^": "Closure:0;$this,f",
      call$0: function() {
        return this.$this.run$1(this.f);
      }
    },
    _RootZone_bindUnaryCallback_closure: {
      "^": "Closure:1;$this,f",
      call$1: [function(arg) {
        return this.$this.runUnaryGuarded$2(this.f, arg);
      }, null, null, 2, 0, null, 26, "call"]
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    LinkedHashMap__makeEmpty: function() {
      return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]));
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        t2 = buffer;
        t2.set$_contents(P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", "));
      } finally {
        t1.pop();
      }
      t1 = buffer;
      t1.set$_contents(t1.get$_contents() + rightDelimiter);
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = parts.pop();
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var result, t1;
      result = P.LinkedHashSet_LinkedHashSet(null, null, null, $E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, t1.get$current());
      return result;
    },
    Maps_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        $.$get$_toStringVisiting().push(m);
        t2 = result;
        t2.set$_contents(t2.get$_contents() + "{");
        t1.first = true;
        J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
        t1 = result;
        t1.set$_contents(t1.get$_contents() + "}");
      } finally {
        $.$get$_toStringVisiting().pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      internalComputeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i) {
          t1 = bucket[i].hashMapCellKey;
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      },
      static: {
        _LinkedIdentityHashMap__LinkedIdentityHashMap$es6: function($K, $V) {
          return H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [$K, $V]);
        }
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications",
      get$iterator: function(_) {
        var t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]);
        t1._collection$_cell = t1._set._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        else
          return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, t1, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        t1 = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(t1, object);
        if (index < 0)
          return;
        return J.$index$asx(t1, index).get$_collection$_element();
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._collection$_first;
        modifications = this._collection$_modifications;
        for (; cell != null;) {
          action.call$1(cell._collection$_element);
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._collection$_next;
        }
      },
      add$1: function(_, element) {
        var strings, table, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_strings = table;
            strings = table;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_nums = table;
            nums = table;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(0, element);
      },
      _add$1: function(_, element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(0, object);
      },
      _remove$1: function(_, object) {
        var rest, t1, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        t1 = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(t1, object);
        if (index < 0)
          return false;
        this._collection$_unlinkCell$1(t1.splice(index, 1)[0]);
        return true;
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_last = null;
          this._collection$_first = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
          this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        }
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _collection$_removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = table[element];
        if (cell == null)
          return false;
        this._collection$_unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P._LinkedHashSetCell(element, null, null);
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        return cell;
      },
      _collection$_unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell._collection$_previous;
        next = cell._collection$_next;
        if (previous == null)
          this._collection$_first = next;
        else
          previous._collection$_next = next;
        if (next == null)
          this._collection$_last = previous;
        else
          next._collection$_previous = previous;
        --this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i]._collection$_element, element))
            return i;
        return -1;
      },
      $isEfficientLength: 1,
      static: {
        _LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }
      }
    },
    _LinkedHashSetCell: {
      "^": "Object;_collection$_element<,_collection$_next,_collection$_previous"
    },
    _LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,_collection$_cell,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._collection$_cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = t1._collection$_element;
            this._collection$_cell = t1._collection$_next;
            return true;
          }
        }
      }
    },
    _HashSetBase: {
      "^": "SetBase;"
    },
    ListBase: {
      "^": "Object_ListMixin;"
    },
    Object_ListMixin: {
      "^": "Object+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1
    },
    ListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        return H.setRuntimeTypeInfo(new H.ListIterator(receiver, this.get$length(receiver), 0, null), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      forEach$1: function(receiver, action) {
        var $length, i;
        $length = this.get$length(receiver);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      get$isEmpty: function(receiver) {
        return this.get$length(receiver) === 0;
      },
      where$1: function(receiver, test) {
        return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      },
      map$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1
    },
    _UnmodifiableMapMixin: {
      "^": "Object;"
    },
    MapView: {
      "^": "Object;",
      $index: function(_, key) {
        return this._collection$_map.$index(0, key);
      },
      forEach$1: function(_, action) {
        this._collection$_map.forEach$1(0, action);
      },
      get$length: function(_) {
        var t1 = this._collection$_map;
        return t1.get$length(t1);
      },
      toString$0: function(_) {
        return this._collection$_map.toString$0(0);
      }
    },
    UnmodifiableMapView: {
      "^": "MapView+_UnmodifiableMapMixin;"
    },
    Maps_mapToString_closure: {
      "^": "Closure:2;_box_0,result",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1.first)
          this.result._contents += ", ";
        t1.first = false;
        t1 = this.result;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    ListQueue: {
      "^": "Iterable;_table,_head,_tail,_modificationCount",
      get$iterator: function(_) {
        var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      forEach$1: function(_, action) {
        var modificationCount, i;
        modificationCount = this._modificationCount;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          action.call$1(this._table[i]);
          if (modificationCount !== this._modificationCount)
            H.throwExpression(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._table.length - 1) >>> 0;
      },
      clear$0: function(_) {
        var i, t1, t2, t3;
        i = this._head;
        t1 = this._tail;
        if (i !== t1) {
          for (t2 = this._table, t3 = t2.length - 1; i !== t1; i = (i + 1 & t3) >>> 0)
            t2[i] = null;
          this._tail = 0;
          this._head = 0;
          ++this._modificationCount;
        }
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      removeFirst$0: function() {
        var t1, t2, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._table;
        result = t2[t1];
        t2[t1] = null;
        this._head = (t1 + 1 & t2.length - 1) >>> 0;
        return result;
      },
      _add$1: function(_, element) {
        var t1, t2;
        t1 = this._table;
        t2 = this._tail;
        t1[t2] = element;
        t1 = (t2 + 1 & t1.length - 1) >>> 0;
        this._tail = t1;
        if (this._head === t1)
          this._grow$0();
        ++this._modificationCount;
      },
      _grow$0: function() {
        var t1, newTable, t2, split;
        t1 = new Array(this._table.length * 2);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
        this._head = 0;
        this._tail = this._table.length;
        this._table = newTable;
      },
      ListQueue$1: function(initialCapacity, $E) {
        var t1 = new Array(8);
        t1.fixed$length = Array;
        this._table = H.setRuntimeTypeInfo(t1, [$E]);
      },
      $isEfficientLength: 1,
      static: {
        ListQueue$: function(initialCapacity, $E) {
          var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
          t1.ListQueue$1(initialCapacity, $E);
          return t1;
        }
      }
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(new P.ConcurrentModificationError(t1));
        t2 = this._collection$_position;
        if (t2 === this._end) {
          this._collection$_current = null;
          return false;
        }
        t1 = t1._table;
        this._collection$_current = t1[t2];
        this._collection$_position = (t2 + 1 & t1.length - 1) >>> 0;
        return true;
      }
    },
    SetMixin: {
      "^": "Object;",
      addAll$1: function(_, elements) {
        var t1;
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]), t1._collection$_cell = t1._set._collection$_first; t1.moveNext$0();)
          f.call$1(t1._collection$_current);
      },
      $isEfficientLength: 1
    },
    SetBase: {
      "^": "SetMixin;"
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      if (growable)
        return list;
      list.fixed$length = Array;
      return list;
    },
    print: function(object) {
      var line = H.S(object);
      H.printString(line);
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false), null, null);
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len = charCodes.length;
      end = P.RangeError_checkValidRange(start, end, len, null, null, null);
      return H.Primitives_stringFromCharCodes(start > 0 || end < len ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
    },
    NoSuchMethodError_toString_closure: {
      "^": "Closure:26;_box_0,sb",
      call$2: function(key, value) {
        var t1, t2, t3;
        t1 = this.sb;
        t2 = this._box_0;
        t1._contents += t2.comma;
        t3 = t1._contents += H.S(key.__internal$_name);
        t1._contents = t3 + ": ";
        t1._contents += H.S(P.Error_safeToString(value));
        t2.comma = ", ";
      }
    },
    bool: {
      "^": "Object;"
    },
    "+bool": 0,
    DateTime: {
      "^": "Object;_value,isUtc",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this._value === other._value && this.isUtc === other.isUtc;
      },
      get$hashCode: function(_) {
        var t1 = this._value;
        return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
      },
      toString$0: function(_) {
        var t1, y, m, d, h, min, sec, ms;
        t1 = this.isUtc;
        y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
        m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
        d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
        if (t1)
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      },
      get$millisecondsSinceEpoch: function() {
        return this._value;
      },
      DateTime$_withValue$2$isUtc: function(_value, isUtc) {
        var t1 = this._value;
        if (!(Math.abs(t1) > 864e13)) {
          if (Math.abs(t1) === 864e13)
            ;
          t1 = false;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.ArgumentError$(this.get$millisecondsSinceEpoch()));
      },
      static: {
        DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + H.S(absN);
          if (absN >= 10)
            return sign + "00" + H.S(absN);
          return sign + "000" + H.S(absN);
        },
        DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        },
        DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }
      }
    },
    $double: {
      "^": "num;"
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration",
      $add: function(_, other) {
        return new P.Duration(C.JSInt_methods.$add(this._duration, other.get$_duration()));
      },
      $sub: function(_, other) {
        return new P.Duration(C.JSInt_methods.$sub(this._duration, other.get$_duration()));
      },
      $lt: function(_, other) {
        return C.JSInt_methods.$lt(this._duration, other.get$_duration());
      },
      $gt: function(_, other) {
        return C.JSInt_methods.$gt(this._duration, other.get$_duration());
      },
      $le: function(_, other) {
        return this._duration <= other._duration;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(-t2).toString$0(0);
        twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
        twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
        return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      $negate: function(_) {
        return new P.Duration(-this._duration);
      },
      static: {
        Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
          return new P.Duration(864e8 * days + 3600000000 * hours + 60000000 * minutes + 1000000 * seconds + 1000 * milliseconds + microseconds);
        }
      }
    },
    Duration_toString_sixDigits: {
      "^": "Closure:15;",
      call$1: function(n) {
        if (n >= 100000)
          return "" + n;
        if (n >= 10000)
          return "0" + n;
        if (n >= 1000)
          return "00" + n;
        if (n >= 100)
          return "000" + n;
        if (n >= 10)
          return "0000" + n;
        return "00000" + n;
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:15;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        },
        ArgumentError$notNull: function($name) {
          return new P.ArgumentError(false, null, $name, "Must not be null");
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else if (t2 > t1)
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
        return explanation;
      },
      static: {
        RangeError$: function(message) {
          return new P.RangeError(null, null, false, null, null, message);
        },
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        },
        RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        },
        RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (start > end || end > $length)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        if (J.$lt$n(this.invalidValue, 0))
          return ": index must not be negative";
        var t1 = this.length;
        if (t1 === 0)
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = $length != null ? $length : J.get$length$asx(indexable);
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    NoSuchMethodError: {
      "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
      toString$0: function(_) {
        var t1, sb, t2, t3, _i, argument, receiverText, actualParameters;
        t1 = {};
        sb = new P.StringBuffer("");
        t1.comma = "";
        for (t2 = this._core$_arguments, t3 = t2.length, _i = 0; _i < t3; ++_i) {
          argument = t2[_i];
          sb._contents += t1.comma;
          sb._contents += H.S(P.Error_safeToString(argument));
          t1.comma = ", ";
        }
        this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1, sb));
        receiverText = P.Error_safeToString(this._core$_receiver);
        actualParameters = H.S(sb);
        return "NoSuchMethodError: method not found: '" + H.S(this._memberName.__internal$_name) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
      },
      static: {
        NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
          return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        return "Reading static variable '" + this.variableName + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      }
    },
    FormatException: {
      "^": "Object;message,source,offset",
      toString$0: function(_) {
        var t1, report, source;
        t1 = this.message;
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
        source = this.source;
        if (typeof source !== "string")
          return report;
        if (source.length > 78)
          source = J.substring$2$s(source, 0, 75) + "...";
        return report + "\n" + H.S(source);
      }
    },
    Expando: {
      "^": "Object;name,_jsWeakMapOrKey",
      toString$0: function(_) {
        return "Expando:" + H.S(this.name);
      },
      $index: function(_, object) {
        var t1, values;
        t1 = this._jsWeakMapOrKey;
        if (typeof t1 !== "string") {
          if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
            H.throwExpression(P.ArgumentError$value(object, "Expandos are not allowed on strings, numbers, booleans or null", null));
          return t1.get(object);
        }
        values = H.Primitives_getProperty(object, "expando$values");
        return values == null ? null : H.Primitives_getProperty(values, t1);
      }
    },
    Function: {
      "^": "Object;"
    },
    $int: {
      "^": "num;"
    },
    "+int": 0,
    Iterable: {
      "^": "Object;",
      where$1: ["super$Iterable$where", function(_, f) {
        return H.setRuntimeTypeInfo(new H.WhereIterable(this, f), [H.getRuntimeTypeArgument(this, "Iterable", 0)]);
      }],
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$single: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        result = it.get$current();
        if (it.moveNext$0())
          throw H.wrapException(H.IterableElementError_tooMany());
        return result;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      }
    },
    Iterator: {
      "^": "Object;"
    },
    List: {
      "^": "Object;",
      $asList: null,
      $isEfficientLength: 1
    },
    "+List": 0,
    Map: {
      "^": "Object;"
    },
    Null: {
      "^": "Object;",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;"
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: ["super$Object$toString", function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      }],
      noSuchMethod$1: function(_, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      },
      get$runtimeType: function(_) {
        return new H.TypeImpl(H.getRuntimeTypeString(this), null);
      },
      toString: function() {
        return this.toString$0(this);
      }
    },
    Match: {
      "^": "Object;"
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;"
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents@",
      get$length: function(_) {
        return this._contents.length;
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }
      }
    },
    Symbol: {
      "^": "Object;"
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1, fragment;
      t1 = document.body;
      fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      t1 = t1.where$1(t1, new W.closure());
      return t1.get$single(t1);
    },
    Element__determineMouseWheelEventType: [function(e) {
      return "wheel";
    }, "call$1", "html_Element__determineMouseWheelEventType$closure", 2, 0, 37, 0],
    Element__safeTagName: function(element) {
      var result, t1, exception;
      result = "element tag unavailable";
      try {
        t1 = J.get$tagName$x(element);
        if (typeof t1 === "string")
          result = J.get$tagName$x(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
      var completer, xhr, t1;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [W.HttpRequest])), [W.HttpRequest]);
      xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
      t1 = C.EventStreamProvider_load0.forTarget$1(xhr);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = C.EventStreamProvider_error.forTarget$1(xhr);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(completer.get$completeError()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      xhr.send();
      return completer.future;
    },
    ImageElement_ImageElement: function(height, src, width) {
      var t1, e;
      t1 = document;
      e = t1.createElement("img");
      return e;
    },
    InputElement_InputElement: function(type) {
      var e, t1, exception;
      t1 = document;
      e = t1.createElement("input");
      if (type != null)
        try {
          J.set$type$x(e, type);
        } catch (exception) {
          H.unwrapException(exception);
        }
      return e;
    },
    OptionElement_OptionElement$_: function(data, value, defaultSelected, selected) {
      return new Option(data, value, defaultSelected, false);
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if (e == null)
        return;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        if (!!J.getInterceptor($window).$isEventTarget)
          return $window;
        return;
      } else
        return e;
    },
    _wrapZone: function(callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallback$2$runGuarded(callback, true);
    },
    querySelector: function(selectors) {
      return document.querySelector(selectors);
    },
    HtmlElement: {
      "^": "Element;",
      "%": "HTMLAppletElement|HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMeterElement|HTMLModElement|HTMLOptGroupElement|HTMLOptionElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement|PluginPlaceholderElement;HTMLElement"
    },
    _EntryArray: {
      "^": "Interceptor;",
      $isList: 1,
      $asList: function() {
        return [W.Entry];
      },
      $isEfficientLength: 1,
      "%": "EntryArray"
    },
    AnchorElement: {
      "^": "HtmlElement;type%,href}",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "HTMLAnchorElement"
    },
    Animation: {
      "^": "EventTarget;",
      cancel$0: function(receiver) {
        return receiver.cancel();
      },
      "%": "Animation"
    },
    AreaElement: {
      "^": "HtmlElement;href}",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "HTMLAreaElement"
    },
    AudioTrackList: {
      "^": "EventTarget;length=",
      "%": "AudioTrackList"
    },
    BaseElement: {
      "^": "HtmlElement;href}",
      "%": "HTMLBaseElement"
    },
    Blob: {
      "^": "Interceptor;type=",
      $isBlob: 1,
      "%": ";Blob"
    },
    BodyElement: {
      "^": "HtmlElement;",
      $isBodyElement: 1,
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;name=,type%",
      "%": "HTMLButtonElement"
    },
    CanvasElement: {
      "^": "HtmlElement;",
      getContext$2: function(receiver, contextId, attributes) {
        return receiver.getContext(contextId, P.convertDartToNative_Dictionary(attributes, null));
      },
      $isCanvasElement: 1,
      "%": "HTMLCanvasElement"
    },
    CharacterData: {
      "^": "Node;length=",
      $isInterceptor: 1,
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    CompositorWorker: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "CompositorWorker"
    },
    Credential: {
      "^": "Interceptor;type=",
      "%": "Credential|FederatedCredential|PasswordCredential"
    },
    CryptoKey: {
      "^": "Interceptor;type=",
      "%": "CryptoKey"
    },
    CssRule: {
      "^": "Interceptor;type=",
      $isObject: 1,
      "%": "CSSCharsetRule|CSSFontFaceRule|CSSGroupingRule|CSSImportRule|CSSKeyframeRule|CSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSRule|CSSStyleRule|CSSSupportsRule|CSSViewportRule|MozCSSKeyframeRule|MozCSSKeyframesRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule"
    },
    CssStyleDeclaration: {
      "^": "Interceptor_CssStyleDeclarationBase;length=",
      "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
    },
    Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor+CssStyleDeclarationBase;"
    },
    CssStyleDeclarationBase: {
      "^": "Object;"
    },
    DataTransferItem: {
      "^": "Interceptor;type=",
      $isDataTransferItem: 1,
      $isObject: 1,
      "%": "DataTransferItem"
    },
    DataTransferItemList: {
      "^": "Interceptor;length=",
      $index: function(receiver, index) {
        return receiver[index];
      },
      "%": "DataTransferItemList"
    },
    DocumentFragment: {
      "^": "Node;",
      $isInterceptor: 1,
      "%": "DocumentFragment|ShadowRoot"
    },
    DomException: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomRectReadOnly: {
      "^": "Interceptor;height=,left=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$width(receiver);
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = this.get$height(receiver);
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(this.get$width(receiver));
        t4 = J.get$hashCode$(this.get$height(receiver));
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      "%": ";DOMRectReadOnly"
    },
    DomStringList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.item(index);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      "%": "DOMStringList"
    },
    Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin: {
      "^": "Interceptor_ListMixin+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1
    },
    DomTokenList: {
      "^": "Interceptor;length=",
      "%": "DOMSettableTokenList|DOMTokenList"
    },
    _FrozenElementList: {
      "^": "ListBase;_nodeList",
      get$length: function(_) {
        return this._nodeList.length;
      },
      $index: function(_, index) {
        return this._nodeList[index];
      },
      $asListBase: Isolate.functionThatReturnsNull,
      $asObject_ListMixin: Isolate.functionThatReturnsNull,
      $asList: Isolate.functionThatReturnsNull,
      $isList: 1,
      $isEfficientLength: 1
    },
    Element: {
      "^": "Node;tagName=",
      get$attributes: function(receiver) {
        return new W._ElementAttributeMap(receiver);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      createFragment$3$treeSanitizer$validator: ["super$Element$createFragment", function(receiver, html, treeSanitizer, validator) {
        var t1, t2, base, contextElement, fragment;
        if (treeSanitizer == null) {
          t1 = $.Element__defaultValidator;
          if (t1 == null) {
            t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
            t2 = new W.NodeValidatorBuilder(t1);
            t1.push(W._Html5NodeValidator$(null));
            t1.push(W._TemplatingNodeValidator$());
            $.Element__defaultValidator = t2;
            validator = t2;
          } else
            validator = t1;
          t1 = $.Element__defaultSanitizer;
          if (t1 == null) {
            t1 = new W._ValidatingTreeSanitizer(validator);
            $.Element__defaultSanitizer = t1;
            treeSanitizer = t1;
          } else {
            t1.validator = validator;
            treeSanitizer = t1;
          }
        }
        if ($.Element__parseDocument == null) {
          t1 = document.implementation.createHTMLDocument("");
          $.Element__parseDocument = t1;
          $.Element__parseRange = t1.createRange();
          t1 = $.Element__parseDocument;
          t1.toString;
          base = t1.createElement("base");
          J.set$href$x(base, document.baseURI);
          $.Element__parseDocument.head.appendChild(base);
        }
        t1 = $.Element__parseDocument;
        if (!!this.$isBodyElement)
          contextElement = t1.body;
        else {
          t2 = receiver.tagName;
          t1.toString;
          contextElement = t1.createElement(t2);
          $.Element__parseDocument.body.appendChild(contextElement);
        }
        if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
          $.Element__parseRange.selectNodeContents(contextElement);
          fragment = $.Element__parseRange.createContextualFragment(html);
        } else {
          contextElement.innerHTML = html;
          fragment = $.Element__parseDocument.createDocumentFragment();
          for (; t1 = contextElement.firstChild, t1 != null;)
            fragment.appendChild(t1);
        }
        t1 = $.Element__parseDocument.body;
        if (contextElement == null ? t1 != null : contextElement !== t1)
          J.remove$0$ax(contextElement);
        treeSanitizer.sanitizeTree$1(fragment);
        document.adoptNode(fragment);
        return fragment;
      }, function($receiver, html, treeSanitizer) {
        return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      }, "createFragment$2$treeSanitizer", null, null, "get$createFragment", 2, 5, null, 1, 1],
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        receiver.textContent = null;
        receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      get$onMouseMove: function(receiver) {
        return C.EventStreamProvider_mousemove.forElement$1(receiver);
      },
      get$onMouseWheel: function(receiver) {
        return C._CustomEventStreamProvider__determineMouseWheelEventType.forElement$1(receiver);
      },
      $isElement: 1,
      $isNode: 1,
      $isEventTarget: 1,
      $isObject: 1,
      $isInterceptor: 1,
      "%": ";Element"
    },
    closure: {
      "^": "Closure:1;",
      call$1: function(e) {
        return !!J.getInterceptor(e).$isElement;
      }
    },
    EmbedElement: {
      "^": "HtmlElement;name=,type%",
      "%": "HTMLEmbedElement"
    },
    Entry: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "DirectoryEntry|Entry|FileEntry"
    },
    ErrorEvent: {
      "^": "Event;error=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;type=",
      $isEvent: 1,
      $isObject: 1,
      "%": "AnimationEvent|AnimationPlayerEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeInstallPromptEvent|BeforeUnloadEvent|ClipboardEvent|CloseEvent|CrossOriginConnectEvent|CustomEvent|DefaultSessionStartEvent|DeviceLightEvent|DeviceMotionEvent|DeviceOrientationEvent|ExtendableEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|GeofencingEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaEncryptedEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|NotificationEvent|OfflineAudioCompletionEvent|PageTransitionEvent|PeriodicSyncEvent|PopStateEvent|PromiseRejectionEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|SecurityPolicyViolationEvent|ServicePortConnectEvent|ServiceWorkerMessageEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|SyncEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitTransitionEvent;Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, false);
      },
      removeEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._removeEventListener$3(receiver, type, listener, false);
      },
      _addEventListener$3: function(receiver, type, listener, capture) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), false);
      },
      _removeEventListener$3: function(receiver, type, listener, capture) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), false);
      },
      $isEventTarget: 1,
      $isObject: 1,
      "%": "ApplicationCache|AudioContext|BatteryManager|CrossOriginServiceWorkerClient|DOMApplicationCache|EventSource|IDBDatabase|MIDIAccess|MediaController|MediaKeySession|MediaQueryList|MediaSource|MediaStream|MediaStreamTrack|Notification|OfflineAudioContext|OfflineResourceList|Performance|PermissionStatus|Presentation|PresentationAvailability|RTCDTMFSender|RTCPeerConnection|ServicePortCollection|ServiceWorkerContainer|ServiceWorkerRegistration|SpeechRecognition|SpeechSynthesisUtterance|StashedPortCollection|WorkerPerformance|mozRTCPeerConnection|webkitAudioContext;EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
    },
    FieldSetElement: {
      "^": "HtmlElement;name=,type=",
      "%": "HTMLFieldSetElement"
    },
    File: {
      "^": "Blob;",
      $isObject: 1,
      "%": "File"
    },
    FileList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "FileList"
    },
    Interceptor_ListMixin0: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin0: {
      "^": "Interceptor_ListMixin0+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $isEfficientLength: 1
    },
    FileReader: {
      "^": "EventTarget;error=",
      "%": "FileReader"
    },
    FileStream: {
      "^": "Interceptor;type=",
      "%": "Stream"
    },
    FileWriter: {
      "^": "EventTarget;error=,length=",
      "%": "FileWriter"
    },
    FontFace: {
      "^": "Interceptor;",
      $isFontFace: 1,
      $isObject: 1,
      "%": "FontFace"
    },
    FontFaceSet: {
      "^": "EventTarget;",
      forEach$2: function(receiver, callback, thisArg) {
        return receiver.forEach(H.convertDartClosureToJS(callback, 3), thisArg);
      },
      forEach$1: function($receiver, callback) {
        callback = H.convertDartClosureToJS(callback, 3);
        return $receiver.forEach(callback);
      },
      "%": "FontFaceSet"
    },
    FormElement: {
      "^": "HtmlElement;length=,name=",
      "%": "HTMLFormElement"
    },
    Gamepad: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "Gamepad"
    },
    History: {
      "^": "Interceptor;length=",
      "%": "History"
    },
    HtmlCollection: {
      "^": "Interceptor_ListMixin_ImmutableListMixin1;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    Interceptor_ListMixin1: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin1: {
      "^": "Interceptor_ListMixin1+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1
    },
    HttpRequest: {
      "^": "HttpRequestEventTarget;",
      open$5$async$password$user: function(receiver, method, url, async, password, user) {
        return receiver.open(method, url, true, user, password);
      },
      open$3$async: function($receiver, method, url, async) {
        return $receiver.open(method, url, async);
      },
      send$1: function(receiver, body_OR_data) {
        return receiver.send(body_OR_data);
      },
      $isEventTarget: 1,
      $isObject: 1,
      "%": "XMLHttpRequest"
    },
    HttpRequest_request_closure: {
      "^": "Closure:1;completer,xhr",
      call$1: [function(e) {
        var t1, t2, accepted, unknownRedirect, t3;
        t1 = this.xhr;
        t2 = t1.status;
        accepted = t2 >= 200 && t2 < 300;
        unknownRedirect = t2 > 307 && t2 < 400;
        t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
        t3 = this.completer;
        if (t2)
          t3.complete$1(0, t1);
        else
          t3.completeError$1(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    HttpRequestEventTarget: {
      "^": "EventTarget;",
      "%": "XMLHttpRequestUpload;XMLHttpRequestEventTarget"
    },
    IFrameElement: {
      "^": "HtmlElement;name=",
      "%": "HTMLIFrameElement"
    },
    ImageData: {
      "^": "Interceptor;",
      $isImageData: 1,
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;",
      $isImageElement: 1,
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;defaultValue=,name=,type%",
      $isInputElement: 1,
      $isElement: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      $isNode: 1,
      "%": "HTMLInputElement"
    },
    KeyboardEvent: {
      "^": "UIEvent;",
      $isKeyboardEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "KeyboardEvent"
    },
    KeygenElement: {
      "^": "HtmlElement;name=,type=",
      "%": "HTMLKeygenElement"
    },
    LinkElement: {
      "^": "HtmlElement;href},type%",
      "%": "HTMLLinkElement"
    },
    Location: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "Location"
    },
    MapElement: {
      "^": "HtmlElement;name=",
      "%": "HTMLMapElement"
    },
    MediaElement: {
      "^": "HtmlElement;error=",
      "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
    },
    MediaList: {
      "^": "Interceptor;length=",
      "%": "MediaList"
    },
    MenuElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLMenuElement"
    },
    MenuItemElement: {
      "^": "HtmlElement;defaultValue:default=,type%",
      "%": "HTMLMenuItemElement"
    },
    MessagePort: {
      "^": "EventTarget;",
      $isMessagePort: 1,
      $isEventTarget: 1,
      $isObject: 1,
      "%": ";MessagePort"
    },
    MetaElement: {
      "^": "HtmlElement;name=",
      "%": "HTMLMetaElement"
    },
    MidiOutput: {
      "^": "MidiPort;",
      send$2: function(receiver, data, timestamp) {
        return receiver.send(data, timestamp);
      },
      send$1: function($receiver, data) {
        return $receiver.send(data);
      },
      "%": "MIDIOutput"
    },
    MidiPort: {
      "^": "EventTarget;type=",
      "%": "MIDIInput;MIDIPort"
    },
    MimeType: {
      "^": "Interceptor;type=",
      $isObject: 1,
      "%": "MimeType"
    },
    MimeTypeArray: {
      "^": "Interceptor_ListMixin_ImmutableListMixin2;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "MimeTypeArray"
    },
    Interceptor_ListMixin2: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin2: {
      "^": "Interceptor_ListMixin2+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isEfficientLength: 1
    },
    MouseEvent: {
      "^": "UIEvent;",
      $isMouseEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "PointerEvent;DragEvent|MouseEvent"
    },
    MutationRecord: {
      "^": "Interceptor;type=",
      "%": "MutationRecord"
    },
    Navigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "Navigator"
    },
    NetworkInformation: {
      "^": "EventTarget;type=",
      "%": "NetworkInformation"
    },
    _ChildNodeListLazy: {
      "^": "ListBase;_this",
      get$single: function(_) {
        var t1, l;
        t1 = this._this;
        l = t1.childNodes.length;
        if (l === 0)
          throw H.wrapException(new P.StateError("No elements"));
        if (l > 1)
          throw H.wrapException(new P.StateError("More than one element"));
        return t1.firstChild;
      },
      addAll$1: function(_, iterable) {
        var t1, t2, len, i;
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      },
      get$iterator: function(_) {
        return C.NodeList_methods.get$iterator(this._this.childNodes);
      },
      get$length: function(_) {
        return this._this.childNodes.length;
      },
      $index: function(_, index) {
        return this._this.childNodes[index];
      },
      $asListBase: function() {
        return [W.Node];
      },
      $asObject_ListMixin: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;",
      remove$0: function(receiver) {
        var t1 = receiver.parentNode;
        if (t1 != null)
          t1.removeChild(receiver);
      },
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      $isNode: 1,
      $isEventTarget: 1,
      $isObject: 1,
      "%": "Document|HTMLDocument|XMLDocument;Node"
    },
    NodeList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin3;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "NodeList|RadioNodeList"
    },
    Interceptor_ListMixin3: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin3: {
      "^": "Interceptor_ListMixin3+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1
    },
    OListElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;name=,type%",
      "%": "HTMLObjectElement"
    },
    OutputElement: {
      "^": "HtmlElement;defaultValue=,name=,type=",
      "%": "HTMLOutputElement"
    },
    ParamElement: {
      "^": "HtmlElement;name=",
      "%": "HTMLParamElement"
    },
    Path2D: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "Path2D"
    },
    PerformanceNavigation: {
      "^": "Interceptor;type=",
      "%": "PerformanceNavigation"
    },
    Plugin: {
      "^": "Interceptor;length=",
      $isObject: 1,
      "%": "Plugin"
    },
    PluginArray: {
      "^": "Interceptor_ListMixin_ImmutableListMixin4;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "PluginArray"
    },
    Interceptor_ListMixin4: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin4: {
      "^": "Interceptor_ListMixin4+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isEfficientLength: 1
    },
    PresentationSession: {
      "^": "EventTarget;",
      send$1: function(receiver, data_OR_message) {
        return receiver.send(data_OR_message);
      },
      "%": "PresentationSession"
    },
    ProgressEvent: {
      "^": "Event;",
      $isEvent: 1,
      $isObject: 1,
      "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
    },
    ReadableByteStream: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableByteStream"
    },
    ReadableByteStreamReader: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableByteStreamReader"
    },
    ReadableStream: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableStream"
    },
    ReadableStreamReader: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableStreamReader"
    },
    RtcDataChannel: {
      "^": "EventTarget;",
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      "%": "DataChannel|RTCDataChannel"
    },
    RtcSessionDescription: {
      "^": "Interceptor;type%",
      "%": "RTCSessionDescription|mozRTCSessionDescription"
    },
    RtcStatsReport: {
      "^": "Interceptor;type=",
      $isRtcStatsReport: 1,
      $isObject: 1,
      "%": "RTCStatsReport"
    },
    ScreenOrientation: {
      "^": "EventTarget;type=",
      "%": "ScreenOrientation"
    },
    ScriptElement0: {
      "^": "HtmlElement;type%",
      "%": "HTMLScriptElement"
    },
    ScrollState: {
      "^": "Interceptor;deltaY=",
      "%": "ScrollState"
    },
    SelectElement: {
      "^": "HtmlElement;length=,name=,type=",
      $isSelectElement: 1,
      "%": "HTMLSelectElement"
    },
    Selection: {
      "^": "Interceptor;type=",
      "%": "Selection"
    },
    SharedWorker: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "SharedWorker"
    },
    SourceBuffer: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isObject: 1,
      "%": "SourceBuffer"
    },
    SourceBufferList: {
      "^": "EventTarget_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "SourceBufferList"
    },
    EventTarget_ListMixin: {
      "^": "EventTarget+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLength: 1
    },
    EventTarget_ListMixin_ImmutableListMixin: {
      "^": "EventTarget_ListMixin+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLength: 1
    },
    SourceElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLSourceElement"
    },
    SpeechGrammar: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SpeechGrammar"
    },
    SpeechGrammarList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin5;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "SpeechGrammarList"
    },
    Interceptor_ListMixin5: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin5: {
      "^": "Interceptor_ListMixin5+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLength: 1
    },
    SpeechRecognitionError: {
      "^": "Event;error=",
      "%": "SpeechRecognitionError"
    },
    SpeechRecognitionResult: {
      "^": "Interceptor;length=",
      $isObject: 1,
      "%": "SpeechRecognitionResult"
    },
    SpeechSynthesis: {
      "^": "EventTarget;",
      cancel$0: function(receiver) {
        return receiver.cancel();
      },
      "%": "SpeechSynthesis"
    },
    SpeechSynthesisVoice: {
      "^": "Interceptor;defaultValue:default=",
      "%": "SpeechSynthesisVoice"
    },
    StashedMessagePort: {
      "^": "MessagePort;",
      $isStashedMessagePort: 1,
      $isMessagePort: 1,
      $isEventTarget: 1,
      $isObject: 1,
      "%": "StashedMessagePort"
    },
    Storage: {
      "^": "Interceptor;",
      $index: function(receiver, key) {
        return receiver.getItem(key);
      },
      forEach$1: function(receiver, f) {
        var i, key;
        for (i = 0; true; ++i) {
          key = receiver.key(i);
          if (key == null)
            return;
          f.call$2(key, receiver.getItem(key));
        }
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      "%": "Storage"
    },
    StyleElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLStyleElement"
    },
    StyleMedia: {
      "^": "Interceptor;type=",
      "%": "StyleMedia"
    },
    StyleSheet: {
      "^": "Interceptor;type=",
      $isObject: 1,
      "%": "CSSStyleSheet|StyleSheet"
    },
    TableElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var table, fragment;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        fragment.toString;
        table.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
        return fragment;
      },
      "%": "HTMLTableElement"
    },
    TableRowElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment, t1, section, row;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        t1 = document;
        t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        section.toString;
        t1 = new W._ChildNodeListLazy(section);
        row = t1.get$single(t1);
        fragment.toString;
        row.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
        return fragment;
      },
      "%": "HTMLTableRowElement"
    },
    TableSectionElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment, t1, section;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        t1 = document;
        t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        fragment.toString;
        section.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
        return fragment;
      },
      "%": "HTMLTableSectionElement"
    },
    TemplateElement: {
      "^": "HtmlElement;",
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment;
        receiver.textContent = null;
        fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
        receiver.content.appendChild(fragment);
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      $isTemplateElement: 1,
      "%": "HTMLTemplateElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;defaultValue=,name=,type=",
      "%": "HTMLTextAreaElement"
    },
    TextTrack: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isObject: 1,
      "%": "TextTrack"
    },
    TextTrackCue: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isObject: 1,
      "%": "TextTrackCue|VTTCue"
    },
    TextTrackCueList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin6;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLength: 1,
      "%": "TextTrackCueList"
    },
    Interceptor_ListMixin6: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin6: {
      "^": "Interceptor_ListMixin6+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLength: 1
    },
    TextTrackList: {
      "^": "EventTarget_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "TextTrackList"
    },
    EventTarget_ListMixin0: {
      "^": "EventTarget+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isEfficientLength: 1
    },
    EventTarget_ListMixin_ImmutableListMixin0: {
      "^": "EventTarget_ListMixin0+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isEfficientLength: 1
    },
    TimeRanges: {
      "^": "Interceptor;length=",
      "%": "TimeRanges"
    },
    Touch: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "Touch"
    },
    TouchEvent: {
      "^": "UIEvent;",
      $isTouchEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "TouchEvent"
    },
    TouchList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin7;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "TouchList"
    },
    Interceptor_ListMixin7: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin7: {
      "^": "Interceptor_ListMixin7+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isEfficientLength: 1
    },
    TrackDefault: {
      "^": "Interceptor;type=",
      "%": "TrackDefault"
    },
    TrackDefaultList: {
      "^": "Interceptor;length=",
      "%": "TrackDefaultList"
    },
    TrackElement: {
      "^": "HtmlElement;defaultValue:default=",
      "%": "HTMLTrackElement"
    },
    UIEvent: {
      "^": "Event;",
      "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
    },
    Url: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "URL"
    },
    VideoTrackList: {
      "^": "EventTarget;length=",
      "%": "VideoTrackList"
    },
    VttRegionList: {
      "^": "Interceptor;length=",
      "%": "VTTRegionList"
    },
    WebSocket: {
      "^": "EventTarget;",
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      "%": "WebSocket"
    },
    WheelEvent: {
      "^": "MouseEvent;",
      get$deltaY: function(receiver) {
        if (receiver.deltaY !== undefined)
          return receiver.deltaY;
        throw H.wrapException(new P.UnsupportedError("deltaY is not supported"));
      },
      $isWheelEvent: 1,
      $isMouseEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "WheelEvent"
    },
    Window: {
      "^": "EventTarget;",
      _requestAnimationFrame$1: function(receiver, callback) {
        return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
      },
      _ensureRequestAnimationFrame$0: function(receiver) {
        if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
          return;
        (function($this) {
          var vendors = ['ms', 'moz', 'webkit', 'o'];
          for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
            $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
            $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
          }
          if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
            return;
          $this.requestAnimationFrame = function(callback) {
            return window.setTimeout(function() {
              callback(Date.now());
            }, 16);
          };
          $this.cancelAnimationFrame = function(id) {
            clearTimeout(id);
          };
        })(receiver);
      },
      $isWindow: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      "%": "DOMWindow|Window"
    },
    Worker: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "Worker"
    },
    WorkerGlobalScope: {
      "^": "EventTarget;",
      $isInterceptor: 1,
      "%": "CompositorWorkerGlobalScope|DedicatedWorkerGlobalScope|ServiceWorkerGlobalScope|SharedWorkerGlobalScope|WorkerGlobalScope"
    },
    _Attr: {
      "^": "Node;name=",
      "%": "Attr"
    },
    _ClientRect: {
      "^": "Interceptor;height=,left=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.width;
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = receiver.height;
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(receiver.width);
        t4 = J.get$hashCode$(receiver.height);
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      "%": "ClientRect"
    },
    _ClientRectList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin8;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.item(index);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Rectangle];
      },
      $isEfficientLength: 1,
      "%": "ClientRectList|DOMRectList"
    },
    Interceptor_ListMixin8: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Rectangle];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin8: {
      "^": "Interceptor_ListMixin8+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Rectangle];
      },
      $isEfficientLength: 1
    },
    _CssRuleList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin9;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "CSSRuleList"
    },
    Interceptor_ListMixin9: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin9: {
      "^": "Interceptor_ListMixin9+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $isEfficientLength: 1
    },
    _DocumentType: {
      "^": "Node;",
      $isInterceptor: 1,
      "%": "DocumentType"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      "%": "DOMRect"
    },
    _GamepadList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin10;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "GamepadList"
    },
    Interceptor_ListMixin10: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin10: {
      "^": "Interceptor_ListMixin10+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $isEfficientLength: 1
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "HTMLFrameSetElement"
    },
    _NamedNodeMap: {
      "^": "Interceptor_ListMixin_ImmutableListMixin11;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    Interceptor_ListMixin11: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin11: {
      "^": "Interceptor_ListMixin11+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1
    },
    _ServiceWorker: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "ServiceWorker"
    },
    _SpeechRecognitionResultList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin12;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "SpeechRecognitionResultList"
    },
    Interceptor_ListMixin12: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin12: {
      "^": "Interceptor_ListMixin12+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1
    },
    _StyleSheetList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin13;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $isEfficientLength: 1,
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "StyleSheetList"
    },
    Interceptor_ListMixin13: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin13: {
      "^": "Interceptor_ListMixin13+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $isEfficientLength: 1
    },
    _WorkerLocation: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WorkerLocation"
    },
    _WorkerNavigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WorkerNavigator"
    },
    _AttributeMap: {
      "^": "Object;_element<",
      forEach$1: function(_, f) {
        var t1, t2, t3, _i, key;
        for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, t3.getAttribute(key));
        }
      },
      get$keys: function(_) {
        var attributes, keys, len, i, t1;
        attributes = this._element.attributes;
        keys = H.setRuntimeTypeInfo([], [P.String]);
        for (len = attributes.length, i = 0; i < len; ++i) {
          t1 = attributes[i];
          if (t1.namespaceURI == null)
            keys.push(J.get$name$x(t1));
        }
        return keys;
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_element",
      $index: function(_, key) {
        return this._element.getAttribute(key);
      },
      get$length: function(_) {
        return this.get$keys(this).length;
      }
    },
    _DataAttributeMap: {
      "^": "Object;_html$_attributes",
      $index: function(_, key) {
        return this._html$_attributes._element.getAttribute("data-" + this._toHyphenedName$1(key));
      },
      forEach$1: function(_, f) {
        this._html$_attributes.forEach$1(0, new W._DataAttributeMap_forEach_closure(this, f));
      },
      get$keys: function(_) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this._html$_attributes.forEach$1(0, new W._DataAttributeMap_keys_closure(this, keys));
        return keys;
      },
      get$length: function(_) {
        return this.get$keys(this).length;
      },
      _toCamelCase$2$startUppercase: function(hyphenedName, startUppercase) {
        var segments, i, segment, t1;
        segments = hyphenedName.split("-");
        for (i = 1; i < segments.length; ++i) {
          segment = segments[i];
          t1 = J.getInterceptor$asx(segment);
          if (J.$gt$n(t1.get$length(segment), 0))
            segments[i] = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
        }
        return C.JSArray_methods.join$1(segments, "");
      },
      _toCamelCase$1: function(hyphenedName) {
        return this._toCamelCase$2$startUppercase(hyphenedName, false);
      },
      _toHyphenedName$1: function(word) {
        var t1, i, t2, t3, lower;
        for (t1 = word.length, i = 0, t2 = ""; i < t1; ++i) {
          t3 = word[i];
          lower = t3.toLowerCase();
          t2 = (t3 !== lower && i > 0 ? t2 + "-" : t2) + lower;
        }
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      }
    },
    _DataAttributeMap_forEach_closure: {
      "^": "Closure:9;$this,f",
      call$2: function(key, value) {
        if (J.getInterceptor$s(key).startsWith$1(key, "data-"))
          this.f.call$2(this.$this._toCamelCase$1(C.JSString_methods.substring$1(key, 5)), value);
      }
    },
    _DataAttributeMap_keys_closure: {
      "^": "Closure:9;$this,keys",
      call$2: function(key, value) {
        if (J.getInterceptor$s(key).startsWith$1(key, "data-"))
          this.keys.push(this.$this._toCamelCase$1(C.JSString_methods.substring$1(key, 5)));
      }
    },
    EventStreamProvider: {
      "^": "Object;_eventType",
      forTarget$2$useCapture: function(e, useCapture) {
        return H.setRuntimeTypeInfo(new W._EventStream(e, this._eventType, false), [null]);
      },
      forTarget$1: function(e) {
        return this.forTarget$2$useCapture(e, false);
      },
      forElement$2$useCapture: function(e, useCapture) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventType, false), [null]);
      },
      forElement$1: function(e) {
        return this.forElement$2$useCapture(e, false);
      },
      _forElementList$2$useCapture: function(e, useCapture) {
        return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(e, false, this._eventType), [null]);
      },
      _forElementList$1: function(e) {
        return this._forElementList$2$useCapture(e, false);
      }
    },
    _EventStream: {
      "^": "Stream;_target,_eventType,_useCapture",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), false);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        t1._tryResume$0();
        return t1;
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_target,_eventType,_useCapture"
    },
    _ElementListEventStreamImpl: {
      "^": "Stream;_targetList,_useCapture,_eventType",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var pool, t1, t2;
        pool = H.setRuntimeTypeInfo(new W._StreamPool(null, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.Stream, P.StreamSubscription])), [null]);
        pool._controller = P.StreamController_StreamController$broadcast(pool.get$close(pool), null, true, null);
        for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType; t1.moveNext$0();)
          pool.add$1(0, H.setRuntimeTypeInfo(new W._EventStream(t1.__internal$_current, t2, false), [null]));
        t1 = pool._controller;
        t1.toString;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      }
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
      cancel$0: function(_) {
        if (this._target == null)
          return;
        this._unlisten$0();
        this._target = null;
        this._onData = null;
        return;
      },
      _tryResume$0: function() {
        var t1 = this._onData;
        if (t1 != null && this._pauseCount <= 0)
          J.addEventListener$3$x(this._target, this._eventType, t1, false);
      },
      _unlisten$0: function() {
        var t1 = this._onData;
        if (t1 != null)
          J.removeEventListener$3$x(this._target, this._eventType, t1, false);
      }
    },
    _StreamPool: {
      "^": "Object;_controller,_subscriptions",
      add$1: function(_, stream) {
        var t1, t2;
        t1 = this._subscriptions;
        if (t1.containsKey$1(0, stream))
          return;
        t2 = this._controller;
        t2 = t2.get$add(t2);
        this._controller.get$addError();
        t2 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, stream._target, stream._eventType, W._wrapZone(t2), false), [H.getTypeArgumentByIndex(stream, 0)]);
        t2._tryResume$0();
        t1.$indexSet(0, stream, t2);
      },
      close$0: [function(_) {
        var t1, t2;
        for (t1 = this._subscriptions, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          J.cancel$0$x(t2.get$current());
        t1.clear$0(0);
        this._controller.close$0(0);
      }, "call$0", "get$close", 0, 0, 3]
    },
    _CustomEventStreamProvider: {
      "^": "Object;_eventTypeGetter",
      forElement$2$useCapture: function(e, useCapture) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), false), [null]);
      },
      forElement$1: function(e) {
        return this.forElement$2$useCapture(e, false);
      },
      _eventTypeGetter$1: function(arg0) {
        return this._eventTypeGetter.call$1(arg0);
      }
    },
    _Html5NodeValidator: {
      "^": "Object;uriPolicy",
      allowsElement$1: function(element) {
        return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        var tagName, t1, validator;
        tagName = W.Element__safeTagName(element);
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
        if (validator == null)
          validator = t1.$index(0, "*::" + attributeName);
        if (validator == null)
          return false;
        return validator.call$4(element, attributeName, value, this);
      },
      _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
        var t1, _i;
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        if (t1.get$isEmpty(t1)) {
          for (_i = 0; _i < 262; ++_i)
            t1.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
          for (_i = 0; _i < 12; ++_i)
            t1.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
        }
      },
      $isNodeValidator: 1,
      static: {
        _Html5NodeValidator$: function(uriPolicy) {
          var t1, e;
          t1 = document;
          e = t1.createElement("a");
          t1 = new W._SameOriginUriPolicy(e, window.location);
          t1 = new W._Html5NodeValidator(t1);
          t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
          return t1;
        },
        _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
          return true;
        }, "call$4", "html__Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 17, 6, 12, 2, 13],
        _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
          var t1, t2, t3, t4, t5;
          t1 = context.uriPolicy;
          t2 = t1._hiddenAnchor;
          t2.href = value;
          t3 = t2.hostname;
          t1 = t1._loc;
          t4 = t1.hostname;
          if (t3 == null ? t4 == null : t3 === t4) {
            t4 = t2.port;
            t5 = t1.port;
            if (t4 == null ? t5 == null : t4 === t5) {
              t4 = t2.protocol;
              t1 = t1.protocol;
              t1 = t4 == null ? t1 == null : t4 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
          if (!t1)
            if (t3 === "")
              if (t2.port === "") {
                t1 = t2.protocol;
                t1 = t1 === ":" || t1 === "";
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = true;
          return t1;
        }, "call$4", "html__Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 17, 6, 12, 2, 13]
      }
    },
    ImmutableListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        return H.setRuntimeTypeInfo(new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null), [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)]);
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1
    },
    NodeValidatorBuilder: {
      "^": "Object;_validators",
      allowsElement$1: function(element) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
      }
    },
    NodeValidatorBuilder_allowsElement_closure: {
      "^": "Closure:1;element",
      call$1: function(v) {
        return v.allowsElement$1(this.element);
      }
    },
    NodeValidatorBuilder_allowsAttribute_closure: {
      "^": "Closure:1;element,attributeName,value",
      call$1: function(v) {
        return v.allowsAttribute$3(this.element, this.attributeName, this.value);
      }
    },
    _SimpleNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: ["super$_SimpleNodeValidator$allowsAttribute", function(element, attributeName, value) {
        var tagName, t1;
        tagName = W.Element__safeTagName(element);
        t1 = this.allowedUriAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else if (t1.contains$1(0, "*::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else {
          t1 = this.allowedAttributes;
          if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
            return true;
          else if (t1.contains$1(0, "*::" + attributeName))
            return true;
          else if (t1.contains$1(0, H.S(tagName) + "::*"))
            return true;
          else if (t1.contains$1(0, "*::*"))
            return true;
        }
        return false;
      }],
      _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
        var legalAttributes, extraUriAttributes, t1;
        this.allowedElements.addAll$1(0, allowedElements);
        legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
        extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
        this.allowedAttributes.addAll$1(0, legalAttributes);
        t1 = this.allowedUriAttributes;
        t1.addAll$1(0, C.List_empty);
        t1.addAll$1(0, extraUriAttributes);
      }
    },
    _SimpleNodeValidator_closure: {
      "^": "Closure:1;",
      call$1: function(x) {
        return !C.JSArray_methods.contains$1(C.List_yrN, x);
      }
    },
    _SimpleNodeValidator_closure0: {
      "^": "Closure:1;",
      call$1: function(x) {
        return C.JSArray_methods.contains$1(C.List_yrN, x);
      }
    },
    _TemplatingNodeValidator: {
      "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
      allowsAttribute$3: function(element, attributeName, value) {
        if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
          return true;
        if (attributeName === "template" && value === "")
          return true;
        if (element.getAttribute("template") === "")
          return this._templateAttrs.contains$1(0, attributeName);
        return false;
      },
      static: {
        _TemplatingNodeValidator$: function() {
          var t1, t2, t3, t4;
          t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
          t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
          t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
          t4 = new W._TemplatingNodeValidator(P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, P.String), t2, t3, t4, null);
          t4._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, t1, ["TEMPLATE"], null);
          return t4;
        }
      }
    },
    _TemplatingNodeValidator_closure: {
      "^": "Closure:1;",
      call$1: [function(attr) {
        return "TEMPLATE::" + H.S(attr);
      }, null, null, 2, 0, null, 38, "call"]
    },
    _SvgNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        var t1 = J.getInterceptor(element);
        if (!!t1.$isScriptElement)
          return false;
        t1 = !!t1.$isSvgElement;
        if (t1 && W.Element__safeTagName(element) === "foreignObject")
          return false;
        if (t1)
          return true;
        return false;
      },
      allowsAttribute$3: function(element, attributeName, value) {
        if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
          return false;
        return this.allowsElement$1(element);
      }
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_length,_position,_current",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._length;
        if (nextPosition < t1) {
          this._current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._current;
      }
    },
    _DOMWindowCrossFrame: {
      "^": "Object;_window",
      addEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      removeEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      $isEventTarget: 1,
      $isInterceptor: 1,
      static: {
        _DOMWindowCrossFrame__createSafe: function(w) {
          if (w === window)
            return w;
          else
            return new W._DOMWindowCrossFrame(w);
        }
      }
    },
    NodeValidator: {
      "^": "Object;"
    },
    _SameOriginUriPolicy: {
      "^": "Object;_hiddenAnchor,_loc"
    },
    _ValidatingTreeSanitizer: {
      "^": "Object;validator",
      sanitizeTree$1: function(node) {
        new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
      },
      _removeNode$2: function(node, $parent) {
        if ($parent == null)
          J.remove$0$ax(node);
        else
          $parent.removeChild(node);
      },
      _sanitizeUntrustedElement$2: function(element, $parent) {
        var corrupted, attrs, isAttr, corruptedTest1, elementText, elementTagName, exception, t1;
        corrupted = true;
        attrs = null;
        isAttr = null;
        try {
          attrs = J.get$attributes$x(element);
          isAttr = attrs.get$_element().getAttribute("is");
          corruptedTest1 = function(element) {
            if (!(element.attributes instanceof NamedNodeMap))
              return true;
            var childNodes = element.childNodes;
            if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
              return true;
            if (element.children)
              if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
                return true;
            var length = 0;
            if (element.children)
              length = element.children.length;
            for (var i = 0; i < length; i++) {
              var child = element.children[i];
              if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
                return true;
            }
            return false;
          }(element);
          corrupted = corruptedTest1 ? true : !(element.attributes instanceof NamedNodeMap);
        } catch (exception) {
          H.unwrapException(exception);
        }
        elementText = "element unprintable";
        try {
          elementText = J.toString$0$(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        try {
          elementTagName = W.Element__safeTagName(element);
          this._sanitizeElement$7(element, $parent, corrupted, elementText, elementTagName, attrs, isAttr);
        } catch (exception) {
          if (H.unwrapException(exception) instanceof P.ArgumentError)
            throw exception;
          else {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing corrupted element " + H.S(elementText);
            if (typeof console != "undefined")
              console.warn(t1);
          }
        }
      },
      _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
        var t1, keys, i, $name, t2;
        if (corrupted) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing element due to corrupted attributes on <" + text + ">";
          if (typeof console != "undefined")
            console.warn(t1);
          return;
        }
        if (!this.validator.allowsElement$1(element)) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed element <" + H.S(tag) + "> from " + J.toString$0$($parent);
          if (typeof console != "undefined")
            console.warn(t1);
          return;
        }
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(element, "is", isAttr)) {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
            if (typeof console != "undefined")
              console.warn(t1);
            return;
          }
        t1 = attrs.get$keys(attrs);
        keys = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._element; i >= 0; --i) {
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(element, J.toLowerCase$0$s($name), t1.getAttribute($name))) {
            window;
            t2 = "Removing disallowed attribute <" + H.S(tag) + " " + H.S($name) + '="' + H.S(t1.getAttribute($name)) + '">';
            if (typeof console != "undefined")
              console.warn(t2);
            t1.getAttribute($name);
            t1.removeAttribute($name);
          }
        }
        if (!!J.getInterceptor(element).$isTemplateElement)
          this.sanitizeTree$1(element.content);
      }
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: {
      "^": "Closure:28;$this",
      call$2: function(node, $parent) {
        var t1, child, nextChild;
        t1 = this.$this;
        switch (node.nodeType) {
          case 1:
            t1._sanitizeUntrustedElement$2(node, $parent);
            break;
          case 8:
          case 11:
          case 3:
          case 4:
            break;
          default:
            t1._removeNode$2(node, $parent);
        }
        child = node.lastChild;
        for (; child != null; child = nextChild) {
          nextChild = child.previousSibling;
          this.call$2(child, node);
        }
      }
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    Index: {
      "^": "Interceptor;",
      $isIndex: 1,
      $isObject: 1,
      "%": "IDBIndex"
    },
    KeyRange: {
      "^": "Interceptor;",
      $isKeyRange: 1,
      "%": "IDBKeyRange"
    },
    Request: {
      "^": "EventTarget;error=",
      "%": "IDBOpenDBRequest|IDBRequest|IDBVersionChangeRequest"
    },
    Transaction: {
      "^": "EventTarget;error=",
      "%": "IDBTransaction"
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    AElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGAElement"
    },
    AnimationElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
    },
    FEBlendElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;type=",
      $isInterceptor: 1,
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEOffsetElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFESpecularLightingElement"
    },
    FETileElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;type=",
      $isInterceptor: 1,
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFilterElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGForeignObjectElement|SVGGElement|SVGGeometryElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGImageElement"
    },
    Length: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SVGLength"
    },
    LengthList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin14;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isEfficientLength: 1,
      "%": "SVGLengthList"
    },
    Interceptor_ListMixin14: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin14: {
      "^": "Interceptor_ListMixin14+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isEfficientLength: 1
    },
    MarkerElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMarkerElement"
    },
    MaskElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMaskElement"
    },
    Matrix: {
      "^": "Interceptor;",
      $isMatrix: 1,
      $isObject: 1,
      "%": "SVGMatrix"
    },
    Number: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SVGNumber"
    },
    NumberList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin15;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isEfficientLength: 1,
      "%": "SVGNumberList"
    },
    Interceptor_ListMixin15: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin15: {
      "^": "Interceptor_ListMixin15+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isEfficientLength: 1
    },
    PathSeg: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel"
    },
    PathSegList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin16;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.PathSeg];
      },
      $isEfficientLength: 1,
      "%": "SVGPathSegList"
    },
    Interceptor_ListMixin16: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.PathSeg];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin16: {
      "^": "Interceptor_ListMixin16+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.PathSeg];
      },
      $isEfficientLength: 1
    },
    PatternElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGPatternElement"
    },
    PointList: {
      "^": "Interceptor;length=",
      "%": "SVGPointList"
    },
    ScriptElement: {
      "^": "SvgElement;type%",
      $isScriptElement: 1,
      $isInterceptor: 1,
      "%": "SVGScriptElement"
    },
    StringList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin17;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      "%": "SVGStringList"
    },
    Interceptor_ListMixin17: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin17: {
      "^": "Interceptor_ListMixin17+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1
    },
    StyleElement0: {
      "^": "SvgElement;type%",
      "%": "SVGStyleElement"
    },
    SvgElement: {
      "^": "Element;",
      createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
        var t1, html, fragment, svgFragment, root;
        t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
        validator = new W.NodeValidatorBuilder(t1);
        t1.push(W._Html5NodeValidator$(null));
        t1.push(W._TemplatingNodeValidator$());
        t1.push(new W._SvgNodeValidator());
        treeSanitizer = new W._ValidatingTreeSanitizer(validator);
        html = '<svg version="1.1">' + svg + "</svg>";
        t1 = document.body;
        fragment = (t1 && C.BodyElement_methods).createFragment$2$treeSanitizer(t1, html, treeSanitizer);
        svgFragment = document.createDocumentFragment();
        fragment.toString;
        t1 = new W._ChildNodeListLazy(fragment);
        root = t1.get$single(t1);
        for (; t1 = root.firstChild, t1 != null;)
          svgFragment.appendChild(t1);
        return svgFragment;
      },
      get$onMouseMove: function(receiver) {
        return C.EventStreamProvider_mousemove.forElement$1(receiver);
      },
      get$onMouseWheel: function(receiver) {
        return C.EventStreamProvider_mousewheel.forElement$1(receiver);
      },
      $isSvgElement: 1,
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGMetadataElement|SVGStopElement|SVGTitleElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGSVGElement"
    },
    SymbolElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGSymbolElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": "SVGTSpanElement|SVGTextElement|SVGTextPositioningElement;SVGTextContentElement"
    },
    TextPathElement: {
      "^": "TextContentElement;",
      $isInterceptor: 1,
      "%": "SVGTextPathElement"
    },
    Transform: {
      "^": "Interceptor;type=",
      $isObject: 1,
      "%": "SVGTransform"
    },
    TransformList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin18;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isEfficientLength: 1,
      "%": "SVGTransformList"
    },
    Interceptor_ListMixin18: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin18: {
      "^": "Interceptor_ListMixin18+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isEfficientLength: 1
    },
    UseElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGUseElement"
    },
    ViewElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGViewElement"
    },
    ViewSpec: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "SVGViewSpec"
    },
    _GradientElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
    },
    _SVGCursorElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGCursorElement"
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEDropShadowElement"
    },
    _SVGMPathElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMPathElement"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": "",
    AudioBuffer: {
      "^": "Interceptor;length=",
      "%": "AudioBuffer"
    },
    AudioNode: {
      "^": "EventTarget;",
      "%": "AnalyserNode|AudioChannelMerger|AudioChannelSplitter|AudioDestinationNode|AudioGainNode|AudioPannerNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|JavaScriptAudioNode|MediaStreamAudioDestinationNode|PannerNode|RealtimeAnalyserNode|ScriptProcessorNode|StereoPannerNode|WaveShaperNode|webkitAudioPannerNode;AudioNode"
    },
    AudioParam: {
      "^": "Interceptor;defaultValue=",
      "%": "AudioParam"
    },
    AudioSourceNode: {
      "^": "AudioNode;",
      "%": "AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode;AudioSourceNode"
    },
    BiquadFilterNode: {
      "^": "AudioNode;type%",
      "%": "BiquadFilterNode"
    },
    OscillatorNode: {
      "^": "AudioSourceNode;type%",
      "%": "Oscillator|OscillatorNode"
    }
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": "",
    ActiveInfo: {
      "^": "Interceptor;type=",
      "%": "WebGLActiveInfo"
    },
    RenderingContext: {
      "^": "Interceptor;",
      texImage2D$9: function(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
        var t1;
        if (border_OR_canvas_OR_image_OR_pixels_OR_video == null)
          t1 = true;
        else
          t1 = false;
        if (t1) {
          receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, P.convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
          return;
        }
        if (!!J.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video).$isImageElement)
          t1 = true;
        else
          t1 = false;
        if (t1) {
          receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
          return;
        }
        throw H.wrapException(P.ArgumentError$("Incorrect number or type of arguments"));
      },
      texImage2D$6: function($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video) {
        return this.texImage2D$9($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, null, null, null);
      },
      "%": "WebGLRenderingContext"
    },
    RenderingContext2: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WebGL2RenderingContext"
    },
    _WebGL2RenderingContextBase: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WebGL2RenderingContextBase"
    }
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlResultSetRowList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin19;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return P.convertNativeToDart_Dictionary(receiver.item(index));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Map];
      },
      $isEfficientLength: 1,
      "%": "SQLResultSetRowList"
    },
    Interceptor_ListMixin19: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Map];
      },
      $isEfficientLength: 1
    },
    Interceptor_ListMixin_ImmutableListMixin19: {
      "^": "Interceptor_ListMixin19+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Map];
      },
      $isEfficientLength: 1
    }
  }], ["dart.isolate", "dart:isolate",, P, {
    "^": "",
    Capability: {
      "^": "Object;"
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    _callDartFunction: [function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      if (captureThis) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$ax($arguments, P.js___convertToDart$closure()), true, null);
      return P._convertToJS(H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs));
    }, null, null, 8, 0, null, 30, 31, 32, 33],
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: [function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor(o);
      if (!!t1.$isJsObject)
        return o._jsObject;
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    }, "call$1", "js___convertToJS$closure", 2, 0, 1, 14],
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: [function(o) {
      var t1, ms;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else {
        if (o instanceof Object) {
          t1 = J.getInterceptor(o);
          t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
        } else
          t1 = false;
        if (t1)
          return o;
        else if (o instanceof Date) {
          ms = o.getTime();
          t1 = new P.DateTime(ms, false);
          t1.DateTime$_withValue$2$isUtc(ms, false);
          return t1;
        } else if (o.constructor === $.$get$_dartProxyCtor())
          return o.o;
        else
          return P._wrapToDart(o);
      }
    }, "call$1", "js___convertToDart$closure", 2, 0, 38, 14],
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: {
      "^": "Object;_jsObject",
      $index: ["super$JsObject$$index", function(_, property) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return P._convertToDart(this._jsObject[property]);
      }],
      get$hashCode: function(_) {
        return 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof P.JsObject && this._jsObject === other._jsObject;
      },
      toString$0: function(_) {
        var t1, exception;
        try {
          t1 = String(this._jsObject);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
          return this.super$Object$toString(this);
        }
      },
      callMethod$2: function(method, args) {
        var t1, t2;
        if (typeof method !== "string" && true)
          throw H.wrapException(P.ArgumentError$("method is not a String or num"));
        t1 = this._jsObject;
        t2 = args == null ? null : P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P.js___convertToJS$closure()), [null, null]), true, null);
        return P._convertToDart(t1[method].apply(t1, t2));
      },
      callMethod$1: function(method) {
        return this.callMethod$2(method, null);
      }
    },
    JsFunction: {
      "^": "JsObject;_jsObject"
    },
    JsArray: {
      "^": "JsObject_ListMixin;_jsObject",
      $index: function(_, index) {
        var t1;
        if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        return this.super$JsObject$$index(this, index);
      },
      get$length: function(_) {
        var len = this._jsObject.length;
        if (typeof len === "number" && len >>> 0 === len)
          return len;
        throw H.wrapException(new P.StateError("Bad JsArray length"));
      }
    },
    JsObject_ListMixin: {
      "^": "JsObject+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1
    },
    _convertToJS_closure: {
      "^": "Closure:1;",
      call$1: function(o) {
        var jsFunction = function(_call, f, captureThis) {
          return function() {
            return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
          };
        }(P._callDartFunction, o, false);
        P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
        return jsFunction;
      }
    },
    _convertToJS_closure0: {
      "^": "Closure:1;ctor",
      call$1: function(o) {
        return new this.ctor(o);
      }
    },
    _wrapToDart_closure: {
      "^": "Closure:1;",
      call$1: function(o) {
        return new P.JsFunction(o);
      }
    },
    _wrapToDart_closure0: {
      "^": "Closure:1;",
      call$1: function(o) {
        return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
      }
    },
    _wrapToDart_closure1: {
      "^": "Closure:1;",
      call$1: function(o) {
        return new P.JsObject(o);
      }
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish0: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    max: function(a, b) {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if (isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && C.JSNumber_methods.get$isNegative(a))
        return b;
      return a;
    },
    _Random: {
      "^": "Object;_lo,_hi",
      _nextState$0: function() {
        var t1, tmpHi, tmpHiLo, tmpLo, tmpLoLo, newLo;
        t1 = this._lo;
        tmpHi = 4294901760 * t1;
        tmpHiLo = (tmpHi & 4294967295) >>> 0;
        tmpLo = 55905 * t1;
        tmpLoLo = (tmpLo & 4294967295) >>> 0;
        newLo = tmpLoLo + tmpHiLo + this._hi;
        t1 = (newLo & 4294967295) >>> 0;
        this._lo = t1;
        this._hi = (C.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) & 4294967295) >>> 0;
      },
      nextInt$1: function(max) {
        var t1, rnd32, result;
        if (max <= 0 || max > 4294967296)
          throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
        t1 = max - 1;
        if ((max & t1) >>> 0 === 0) {
          this._nextState$0();
          return (this._lo & t1) >>> 0;
        }
        do {
          this._nextState$0();
          rnd32 = this._lo;
          result = rnd32 % max;
        } while (rnd32 - result + max >= 4294967296);
        return result;
      },
      nextDouble$0: function() {
        this._nextState$0();
        var t1 = this._lo;
        this._nextState$0();
        return ((t1 & 67108863) * 134217728 + (this._lo & 134217727)) / 9007199254740992;
      },
      _Random$1: function(seed) {
        var low, high, tmplow, low0, t1, t2, t3;
        do {
          low = (seed & 4294967295) >>> 0;
          seed = C.JSInt_methods._tdivFast$1(seed - low, 4294967296);
          high = (seed & 4294967295) >>> 0;
          seed = C.JSInt_methods._tdivFast$1(seed - high, 4294967296);
          tmplow = ((~low & 4294967295) >>> 0) + (low << 21 >>> 0);
          low0 = (tmplow & 4294967295) >>> 0;
          high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296) & 4294967295;
          tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
          low = (tmplow & 4294967295) >>> 0;
          high = ((high ^ high >>> 24) >>> 0) * 265 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
          tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
          low = (tmplow & 4294967295) >>> 0;
          high = ((high ^ high >>> 14) >>> 0) * 21 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
          low = (low ^ (low >>> 28 | high << 4)) >>> 0;
          high = (high ^ high >>> 28) >>> 0;
          tmplow = (low << 31 >>> 0) + low;
          low0 = (tmplow & 4294967295) >>> 0;
          t1 = C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296);
          tmplow = this._lo * 1037;
          t2 = (tmplow & 4294967295) >>> 0;
          this._lo = t2;
          t3 = (this._hi * 1037 + C.JSInt_methods._tdivFast$1(tmplow - t2, 4294967296) & 4294967295) >>> 0;
          this._hi = t3;
          t2 = (t2 ^ low0) >>> 0;
          this._lo = t2;
          t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 & 4294967295) >>> 0;
          this._hi = t1;
        } while (seed !== 0);
        if (t1 === 0 && t2 === 0)
          this._lo = 23063;
        this._nextState$0();
        this._nextState$0();
        this._nextState$0();
        this._nextState$0();
      },
      static: {
        _Random$: function(seed) {
          var t1 = new P._Random(0, 0);
          t1._Random$1(seed);
          return t1;
        }
      }
    },
    Point: {
      "^": "Object;x,y",
      toString$0: function(_) {
        return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (!(other instanceof P.Point))
          return false;
        t1 = this.x;
        t2 = other.x;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this.y;
          t2 = other.y;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = J.get$hashCode$(this.x);
        t2 = J.get$hashCode$(this.y);
        return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
      },
      $add: function(_, other) {
        var t1 = new P.Point(C.JSNumber_methods.$add(this.x, other.get$x(other)), C.JSNumber_methods.$add(this.y, other.get$y(other)));
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      $sub: function(_, other) {
        var t1 = new P.Point(this.x - other.x, this.y - other.y);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
    },
    _RectangleBase: {
      "^": "Object;"
    },
    Rectangle: {
      "^": "_RectangleBase;",
      $asRectangle: null
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkLength: function($length) {
      return $length;
    },
    _ensureNativeList: function(list) {
      var t1, result, i;
      if (!!J.getInterceptor(list).$isJSIndexable)
        return list;
      t1 = list.length;
      result = new Array(t1);
      result.fixed$length = Array;
      for (i = 0; i < t1; ++i)
        result[i] = list[i];
      return result;
    },
    NativeByteBuffer: {
      "^": "Interceptor;",
      $isNativeByteBuffer: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;",
      $isNativeTypedData: 1,
      $isTypedData: 1,
      "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
    },
    NativeByteData: {
      "^": "NativeTypedData;",
      $isTypedData: 1,
      "%": "DataView"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      }
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    NativeTypedArrayOfInt: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1
    },
    NativeTypedArray_ListMixin0: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin0: {
      "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;",
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      "%": "Float32Array"
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      "%": "Float64Array"
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      "%": ";Uint8Array"
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["elengyel", "elengyeltables.dart",, U, {}], ["grid", "grid.dart",, S, {
    "^": "",
    ComputePreciseNormals: function(mesh, opt, epsilon) {
      var t1, v, n, i, t2, val, x, y, z;
      t1 = new Float32Array(H._checkLength(3));
      v = new T.Vector3(t1);
      n = mesh.nVertices & 16777215;
      for (i = 0; i < n; i += 3) {
        t2 = mesh.vertices;
        t1[0] = t2[i];
        t1[1] = t2[i + 1];
        t1[2] = t2[i + 2];
        val = opt.eval$1(v);
        t1[0] = t1[0] - epsilon;
        x = opt.eval$1(v);
        t1[0] = t1[0] + epsilon;
        t1[1] = t1[1] - epsilon;
        y = opt.eval$1(v);
        t1[1] = t1[1] + epsilon;
        t1[2] = t1[2] - epsilon;
        z = opt.eval$1(v);
        t1[2] = t1[2] + epsilon;
        t1[0] = x - val;
        t1[1] = y - val;
        t1[2] = z - val;
        v.normalize$0(0);
        mesh.AddNormal$1(v);
      }
    },
    DfsOption: {
      "^": "Object;$eval,ttl,seqNo",
      eval$1: function(arg0) {
        return this.$eval.call$1(arg0);
      }
    },
    MeshInfo: {
      "^": "Object;faces,vertices,normals,nFaces,nVertices,nNormals",
      AddFace$3: function(a, b, c) {
        var old, t1, t2, i;
        if (this.nFaces >= this.faces.length) {
          P.print("face realloc");
          old = this.faces;
          t1 = old.length;
          t2 = new Uint32Array(H._checkLength(t1 * 2));
          this.faces = t2;
          for (i = 0; i < t1; ++i)
            t2[i] = old[i];
        }
        t1 = this.faces;
        t2 = this.nFaces;
        t1[t2] = a;
        t1[t2 + 1] = b;
        t1[t2 + 2] = c;
        this.nFaces = t2 + 3;
      },
      AddVertex$1: function(v) {
        var old, t1, t2, i, t3;
        if (this.nVertices >= this.vertices.length) {
          P.print("vertex realloc");
          old = this.vertices;
          t1 = old.length;
          t2 = new Float32Array(H._checkLength(t1 * 2));
          this.vertices = t2;
          for (i = 0; i < t1; ++i)
            t2[i] = old[i];
        }
        t1 = this.vertices;
        t2 = this.nVertices;
        t3 = v.storage;
        t1[t2] = t3[0];
        t1[t2 + 1] = t3[1];
        t1[t2 + 2] = t3[2];
        this.nVertices = t2 + 3;
      },
      AddNormal$1: function(v) {
        var old, t1, t2, i, t3;
        if (this.nNormals >= this.normals.length) {
          P.print("vertex realloc");
          old = this.normals;
          t1 = old.length;
          t2 = new Float32Array(H._checkLength(t1 * 2));
          this.normals = t2;
          for (i = 0; i < t1; ++i)
            t2[i] = old[i];
        }
        t1 = this.normals;
        t2 = this.nNormals;
        t3 = v.storage;
        t1[t2] = t3[0];
        t1[t2 + 1] = t3[1];
        t1[t2 + 2] = t3[2];
        this.nNormals = t2 + 3;
      }
    },
    Grid: {
      "^": "Object;_point_pos,_point_value,_point_reuse,_point_visited_seq,_point_completed_seq,_point_max_ttl,_point_bits,_dfs_stack,_lbf,_utn,_d,_nx,_ny,_nz,_nextX,_nextY,_nextZ,_tmp,_tmpa,_tmpb",
      toString$0: function(_) {
        return "points: " + this._nx * this._ny * this._nz + " " + H.S(this._nx) + "x" + H.S(this._ny) + "x" + H.S(this._nz) + " extremes: " + this._lbf.toString$0(0) + " " + this._utn.toString$0(0);
      },
      InitDimensions$1: function(utn) {
        var t1, i, t2, t3, t4, t5;
        this._nx = 2;
        for (t1 = this._lbf.storage, i = t1[0], t2 = utn.storage, t3 = this._d, t4 = this._utn.storage, t5 = 2; i <= t2[0]; i += t3) {
          ++t5;
          this._nx = t5;
          t4[0] = i;
        }
        this._ny = 2;
        for (i = t1[1], t5 = 2; i <= t2[1]; i += t3) {
          ++t5;
          this._ny = t5;
          t4[1] = i;
        }
        this._nz = 2;
        for (i = t1[2], t1 = 2; i <= t2[2]; i += t3) {
          ++t1;
          this._nz = t1;
          t4[2] = i;
        }
        this._nextX = this._ny * t1;
        this._nextY = t1;
        this._nextZ = 1;
      },
      AllocArrays$1: function(n) {
        this._point_reuse = new Int32Array(H._checkLength(n * 4));
        this._point_pos = new Float32Array(H._checkLength(n * 3));
        this._point_value = new Float32Array(H._checkLength(n));
        this._point_visited_seq = new Uint16Array(H._checkLength(n));
        this._point_completed_seq = new Uint16Array(H._checkLength(n));
        this._point_max_ttl = new Uint8Array(H._checkLength(n));
        this._point_bits = new Uint8Array(H._checkLength(n));
        this._dfs_stack = new Uint32Array(H._checkLength(n));
      },
      InitArrays$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, i, x, t8, t9, y, t10, t11, z, t12, bits;
        for (t1 = this._nx, t2 = this._ny, t3 = this._nz, t4 = this._point_bits, t5 = this._point_pos, t6 = this._lbf.storage, t7 = this._d, i = 0, x = 0; x < t1; ++x)
          for (t8 = x > 0, t9 = x - 1, y = 0; y < t2; ++y)
            for (t10 = y > 0, t11 = y - 1, z = 0; z < t3; ++z) {
              if (t8 && t10 && z > 0 && x < t1 - 1 && y < t2 - 1 && z < t3 - 1) {
                t12 = 3 * i;
                t5[t12] = t6[0] + t9 * t7;
                t5[t12 + 1] = t6[1] + t11 * t7;
                t5[t12 + 2] = t6[2] + (z - 1) * t7;
                bits = 1;
              } else
                bits = 0;
              t4[i] = t8 && t10 && z > 0 && x < t1 - 2 && y < t2 - 2 && z < t3 - 2 ? bits | 2 : bits;
              ++i;
            }
      },
      InterpolateCorners$4: function(p1, p2, out, opt) {
        var t1, v1, v2, t2, x1, y1, z1, x2, y2, z2, d;
        t1 = this._point_value;
        v1 = t1[p1];
        v2 = t1[p2];
        t1 = this._point_pos;
        t2 = 3 * p1;
        x1 = t1[t2];
        y1 = t1[t2 + 1];
        z1 = t1[t2 + 2];
        t2 = 3 * p2;
        x2 = t1[t2];
        y2 = t1[t2 + 1];
        z2 = t1[t2 + 2];
        d = v1 / (v1 - v2);
        t2 = out.storage;
        t2[0] = x1 + (x2 - x1) * d;
        t2[1] = y1 + (y2 - y1) * d;
        t2[2] = z1 + (z2 - z1) * d;
      },
      MarchOneCubeInit$3: function(c, magic, corners) {
        var t1, t2, t3, mask, i;
        corners[0] = c;
        t1 = this._nextX;
        t2 = c + t1;
        corners[1] = t2;
        t3 = this._nextY;
        corners[2] = c + t3;
        corners[3] = t2 + t3;
        t2 = c + this._nextZ;
        corners[4] = t2;
        corners[5] = t2 + t1;
        t3 = t2 + t3;
        corners[6] = t3;
        corners[7] = t3 + t1;
        for (mask = 0, i = 0; i < 8; ++i) {
          t1 = this._point_visited_seq;
          t2 = corners[i];
          t1 = t1[t2];
          if (magic == null ? t1 != null : magic !== t1)
            return 0;
          if (J.$lt$n(this._point_value[t2], 0))
            mask |= C.JSInt_methods._shlPositive$1(1, i) & 255;
        }
        if (mask === 0 || mask === 255)
          return 0;
        return mask;
      },
      MarchOneCubeComputeVertices$7: function(c, magic, mask, corners, cellVerticesIndices, mesh, opt) {
        var t, t1, i, v, reuseDir, c0, t2, t3, reusePoint, index, p1, p2;
        t = $.$get$vertexData()[mask];
        for (t1 = this._tmp, i = 0; i < t.length; ++i) {
          v = t[i];
          reuseDir = v >>> 12 & 15;
          if (reuseDir !== 8) {
            c0 = (reuseDir & 1) === 1 ? c - this._nextX : c;
            if ((reuseDir & 2) === 2)
              c0 -= this._nextY;
            if ((reuseDir & 4) === 4)
              c0 -= this._nextZ;
            t2 = this._point_visited_seq;
            t3 = t2[c0];
            if (t3 == null ? magic != null : t3 !== magic) {
              t2[c0] = magic;
              t2 = this._point_reuse;
              t3 = 4 * c0;
              t2[t3] = -1;
              t2[t3 + 1] = -1;
              t2[t3 + 2] = -1;
              t2[t3 + 3] = -1;
            }
            reusePoint = c0;
          } else
            reusePoint = c;
          t2 = 4 * reusePoint + (v >>> 8 & 15);
          index = this._point_reuse[t2];
          if (index === -1) {
            t3 = v & 15;
            p1 = corners[t3];
            p2 = corners[v >>> 4 & 15];
            index = C.JSInt_methods._tdivFast$1(mesh.nVertices, 3);
            if ((mask & C.JSInt_methods._shlPositive$1(1, t3)) !== 0)
              this.InterpolateCorners$4(p1, p2, t1, opt);
            else
              this.InterpolateCorners$4(p2, p1, t1, opt);
            mesh.AddVertex$1(t1);
            this._point_reuse[t2] = index;
          }
          cellVerticesIndices[i] = index;
        }
      },
      MarchOneCubeComputeFaces$3: function(mask, cellVerticesIndices, mesh) {
        var cls, cfg, i;
        cls = $.$get$hotCornerMap()[mask];
        cfg = $.$get$configClass()[cls];
        for (i = 2; i < cfg.length; i += 3)
          mesh.AddFace$3(cellVerticesIndices[cfg[i]], cellVerticesIndices[cfg[i + 1]], cellVerticesIndices[cfg[i + 2]]);
      },
      CubeMarch$2: function(hot, opt) {
        var mesh, t1, corners, cellVerticesIndices, t2, action, visited, _i, i, t3, t4, mask;
        mesh = new S.MeshInfo(new Uint32Array(H._checkLength(245760)), new Float32Array(H._checkLength(122880)), new Float32Array(H._checkLength(122880)), 0, 0, 0);
        t1 = Date.now();
        this._nx;
        this._ny;
        this._nz;
        corners = new Uint32Array(H._checkLength(8));
        cellVerticesIndices = new Uint32Array(H._checkLength(12));
        for (t2 = hot.length, action = 0, visited = 0, _i = 0; _i < hot.length; hot.length === t2 || (0, H.throwConcurrentModificationError)(hot), ++_i) {
          i = hot[_i];
          if ((this._point_bits[i] & 2) === 0)
            continue;
          t3 = this._point_visited_seq[i];
          t4 = opt.seqNo;
          if (t3 == null ? t4 != null : t3 !== t4)
            continue;
          ++visited;
          mask = this.MarchOneCubeInit$3(i, t3, corners);
          if (mask === 0)
            continue;
          ++action;
          this.MarchOneCubeComputeVertices$7(i, t3, mask, corners, cellVerticesIndices, mesh, opt);
          this.MarchOneCubeComputeFaces$3(mask, cellVerticesIndices, mesh);
        }
        S.ComputePreciseNormals(mesh, opt, 0.1);
        C.JSInt_methods._tdivFast$1(P.Duration$(0, 0, 0, Date.now() - new P.DateTime(t1, false)._value, 0, 0)._duration, 1000);
        return mesh;
      },
      FindSurfacePointFromSeedBits$2: function(start, opt) {
        var t1, t2, t3, p, t4, initial, t5, _i, dir, q;
        t1 = start.$sub(0, this._lbf).$div(0, this._d).storage;
        t2 = C.JSNumber_methods.clamp$2(C.JSNumber_methods.roundToDouble$0(t1[0]), 0, this._nx - 2);
        t3 = C.JSNumber_methods.clamp$2(C.JSNumber_methods.roundToDouble$0(t1[1]), 0, this._ny - 2);
        t1 = C.JSNumber_methods.clamp$2(C.JSNumber_methods.roundToDouble$0(t1[2]), 0, this._nz - 2);
        p = (C.JSNumber_methods.toInt$0(Math.ceil(1 + t2)) * this._ny + C.JSNumber_methods.toInt$0(Math.ceil(1 + t3))) * this._nz + C.JSNumber_methods.toInt$0(Math.ceil(1 + t1));
        if ((this._point_bits[p] & 1) === 0) {
          P.print("interior point not really inside");
          return -1;
        }
        t1 = this._tmp;
        t2 = this._point_pos;
        t3 = 3 * p;
        t4 = t1.storage;
        t4[0] = t2[t3];
        t4[1] = t2[t3 + 1];
        t4[2] = t2[t3 + 2];
        initial = opt.eval$1(t1) < 0;
        for (t2 = this._nextX, t3 = this._nextY, t5 = this._nextZ, t5 = [-t2, t2, -t3, t3, -t5, t5], _i = 0; _i < 6; ++_i) {
          dir = t5[_i];
          for (q = p; true;) {
            q += dir;
            if ((this._point_bits[q] & 1) === 0)
              break;
            t2 = this._point_pos;
            t3 = 3 * q;
            t4[0] = t2[t3];
            t4[1] = t2[t3 + 1];
            t4[2] = t2[t3 + 2];
            if (initial !== opt.eval$1(t1) < 0)
              return q;
          }
        }
        return -1;
      },
      ValueUpdateDfs$5: function(points, xttl, xwantBelow, hot, opt) {
        var t1, t2, t3, t4, _i, sp, p, t;
        t1 = {};
        t2 = Date.now();
        t1.sp = 0;
        t1.count = 0;
        t3 = new S.Grid_ValueUpdateDfs_enqueue(t1, this, hot, opt);
        for (t4 = points.length, _i = 0; _i < points.length; points.length === t4 || (0, H.throwConcurrentModificationError)(points), ++_i)
          t3.call$3(points[_i], xttl, true);
        for (; t4 = t1.sp, t4 > 0;) {
          sp = t4 - 1;
          t1.sp = sp;
          p = this._dfs_stack[sp];
          t4 = this._point_bits;
          t4[p] = t4[p] & 4294967279;
          t = this._point_max_ttl[p] - 1;
          t4 = !J.$lt$n(this._point_value[p], 0);
          t3.call$3(p - this._nextX, t, t4);
          t3.call$3(p + this._nextX, t, t4);
          t3.call$3(p - this._nextY, t, t4);
          t3.call$3(p + this._nextY, t, t4);
          t3.call$3(p - this._nextZ, t, t4);
          t3.call$3(p + this._nextZ, t, t4);
        }
        C.JSInt_methods._tdivFast$1(P.Duration$(0, 0, 0, Date.now() - new P.DateTime(t2, false)._value, 0, 0)._duration, 1000);
      }
    },
    Grid_ValueUpdateDfs_enqueue: {
      "^": "Closure:29;_box_0,$this,hot,opt",
      call$3: function(p, ttl, wantBelow) {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.$this;
        if ((t1._point_bits[p] & 1) === 0)
          return;
        t2 = t1._point_visited_seq[p];
        t3 = this.opt;
        t4 = t3.seqNo;
        if (t2 == null ? t4 != null : t2 !== t4) {
          t2 = t1._tmp;
          t4 = t1._point_pos;
          t5 = p * 3;
          t6 = t2.storage;
          t6[0] = t4[t5];
          t6[1] = t4[t5 + 1];
          t6[2] = t4[t5 + 2];
          t1._point_value[p] = t3.eval$1(t2);
          t2 = t1._point_visited_seq;
          t5 = t3.seqNo;
          t2[p] = t5;
          t1._point_completed_seq[p] = t5;
          t5 = t1._point_reuse;
          t2 = 4 * p;
          t5[t2] = -1;
          t5[t2 + 1] = -1;
          t5[t2 + 2] = -1;
          t5[t2 + 3] = -1;
          t1._point_max_ttl[p] = 0;
        }
        if (wantBelow === J.$lt$n(t1._point_value[p], 0))
          ttl = t3.ttl;
        t2 = t1._point_max_ttl[p];
        if (ttl <= t2)
          return;
        if (t2 === 0 && ttl > 0)
          this.hot.push(p);
        t1._point_max_ttl[p] = ttl;
        if (ttl <= 1)
          return;
        t2 = t1._point_bits;
        t3 = t2[p];
        if ((t3 & 16) !== 0)
          return;
        t4 = this._box_0;
        ++t4.count;
        t2[p] = t3 | 16;
        t1 = t1._dfs_stack;
        t3 = t4.sp;
        t1[t3] = p;
        t4.sp = t3 + 1;
      }
    }
  }], ["", "helios.dart",, S, {
    "^": "",
    UpdateAll: function() {
      var canvas = document.getElementById("area");
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      if ($.gOptions.GetInt$1("randomSeed") === 0)
        Date.now();
    },
    _extraInfo: [function() {
      return C.JSArray_methods.join$1([], "\n");
    }, "call$0", "helios___extraInfo$closure", 0, 0, 27],
    updateFps: [function(elapsed, time) {
      R.UpdateFrameCount(time, $.$get$gFps(), S.helios___extraInfo$closure());
    }, "call$2", "helios__updateFps$closure", 4, 0, 8, 35, 36],
    HandleCommand: function(cmd, param) {
      var t1, preset;
      N.LogInfo("HandleCommand: " + H.S(cmd) + " " + H.S(param));
      switch (cmd) {
        case "A":
          t1 = document.querySelector(".about");
          t1.hidden = !t1.hidden;
          break;
        case "C":
          t1 = document.querySelector(".config");
          t1.hidden = !t1.hidden;
          $.gOptions.SaveToLocalStorage$0();
          break;
        case "P":
          t1 = document.querySelector(".performance");
          t1.hidden = !t1.hidden;
          break;
        case "R":
          $.gOptions.SaveToLocalStorage$0();
          window.location.hash = "";
          window.location.reload();
          break;
        case "A+":
          document.querySelector(".about").hidden = false;
          break;
        case "A-":
          document.querySelector(".about").hidden = true;
          break;
        case "F":
          R.ToggleFullscreen();
          break;
        case "C-":
          document.querySelector(".config").hidden = true;
          $.gOptions.SaveToLocalStorage$0();
          break;
        case "C+":
          document.querySelector(".config").hidden = false;
          break;
        case "X":
          preset = H.interceptedTypeCast(document.querySelector("#preset"), "$isSelectElement").value;
          $.gOptions.SetNewSettings$1(preset);
          window.location.reload();
          break;
        default:
          break;
      }
    },
    OptionsSetup: function() {
      var t1, presets, $name;
      t1 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.String, S.Option]);
      t1 = new S.Options("helios", t1, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.String, [P.Map, P.String, P.String]]));
      t1.AddOption$3("blurriness", "D", "0.8");
      t1.AddOption$3("sources", "I", "5");
      t1.AddOption$3("sinks", "I", "5");
      t1.AddOption$3("ions", "I", "1500");
      t1.AddOption$3("speed", "D", "10.0");
      t1.AddOption$3("size", "D", "10.0");
      t1.AddOption$3("animation", "O", "orbit");
      t1.AddOption$3("cameraDistance", "O", "far");
      t1.AddOption$3("interval", "D", "10");
      t1.AddOption$3("fov", "I", "50");
      t1.AddOption$3("randomSeed", "I", "0");
      t1.AddOption$3("detail", "O", "30");
      t1.AddOption$3("showSurfaces", "B", "true");
      t1.AddOption$3("showIons", "B", "true");
      t1.AddOption$4("hideAbout", "B", "false", true);
      t1.AddOption$4("logLevel", "I", "0", true);
      $.gOptions = t1;
      t1.AddSetting$2("Standard", P.LinkedHashMap__makeLiteral(["cameraDistance", "far", "randomSeed", "0", "blurriness", "0.8", "fov", "50", "sources", "5", "sinks", "5", "ions", "1500", "speed", "10", "size", "10", "interval", "10", "detail", "30", "showSurfaces", "true", "showIons", "true", "animation", "orbit"]));
      $.gOptions.AddSetting$2("CloseUp", P.LinkedHashMap__makeLiteral(["cameraDistance", "close", "randomSeed", "0", "blurriness", "0.8", "fov", "50", "sources", "5", "sinks", "5", "ions", "1500", "speed", "10", "size", "7", "interval", "10", "detail", "30", "showSurfaces", "true", "showIons", "true", "animation", "orbit"]));
      $.gOptions.AddSetting$2("CrazyCamera", P.LinkedHashMap__makeLiteral(["cameraDistance", "random", "randomSeed", "0", "blurriness", "0.8", "fov", "50", "sources", "5", "sinks", "5", "ions", "1500", "speed", "10", "size", "10", "interval", "10", "detail", "30", "showSurfaces", "true", "showIons", "true", "animation", "random"]));
      $.gOptions.AddSetting$2("NoSurfaces", P.LinkedHashMap__makeLiteral(["cameraDistance", "far", "randomSeed", "0", "blurriness", "0.8", "fov", "50", "sources", "5", "sinks", "5", "ions", "1500", "speed", "10", "size", "10", "interval", "10", "detail", "30", "showSurfaces", "false", "showIons", "true", "animation", "orbit"]));
      $.gOptions.AddSetting$2("NoSurfacesCrazyCamera", P.LinkedHashMap__makeLiteral(["cameraDistance", "random", "randomSeed", "0", "blurriness", "0.8", "fov", "50", "sources", "5", "sinks", "5", "ions", "1500", "speed", "10", "size", "10", "interval", "10", "detail", "30", "showSurfaces", "false", "showIons", "true", "animation", "random"]));
      $.gOptions.ProcessUrlHash$0();
      $.gLogLevel = $.gOptions.GetInt$1("logLevel");
      $.gLogLevel = 0;
      presets = document.querySelector("#preset");
      for (t1 = $.gOptions._settings, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        $name = t1.get$current();
        presets.appendChild(W.OptionElement_OptionElement$_($name, $name, null, false));
      }
      if ($.gOptions.GetBool$1("hideAbout"))
        P.Timer_Timer(C.Duration_4000000, new S.OptionsSetup_closure());
    },
    ExtractMeshData: function(grid, spheres, opt) {
      var t1, seeds, t2, _i, p, hot, info, md;
      t1 = Date.now();
      opt.seqNo = opt.seqNo + 1;
      seeds = [];
      for (t2 = spheres.length, _i = 0; _i < spheres.length; spheres.length === t2 || (0, H.throwConcurrentModificationError)(spheres), ++_i) {
        p = grid.FindSurfacePointFromSeedBits$2(spheres[_i], opt);
        if (p !== -1)
          seeds.push(p);
      }
      hot = [];
      grid.ValueUpdateDfs$5(seeds, opt.ttl, true, hot, opt);
      info = grid.CubeMarch$2(hot, opt);
      t2 = P.LinkedHashMap__makeEmpty();
      md = new B.MeshData("", [], [], [], [], [], t2, Q.Vector$(0, 0, 0));
      t2.$indexSet(0, "aNormal", []);
      md.SetFacesRaw$2(info.faces, info.nFaces);
      md.SetVerticesRaw$2(info.vertices, info.nVertices);
      md.SetAttributesRaw$3("aNormal", info.normals, info.nNormals);
      N.LogInfo("AfterMeshGeneration [" + C.JSInt_methods._tdivFast$1(P.Duration$(0, 0, 0, Date.now() - new P.DateTime(t1, false)._value, 0, 0)._duration, 1000) + "ms]");
      return md;
    },
    main: [function() {
      var t1, t2, rng, canvas, chronosGL, t3, phase, t4, shaderProgramBlur, shaderIons, shaderSpheres, matBlur, md, t5, t6, t7, t8, t9, t10, orbit, distanceAnimator, colorrot, helios, lbf, utn, s, grid, opt, soapy, matSphere, meshSpheres, nIons, mdIons, v, i, matIons, meshIons, host, arg1, arg2;
      t1 = {};
      $.$get$_VarsDb().$indexSet(0, "aPointSize", new V.ShaderVarDesc("float", ""));
      $.$get$_VarsDb().$indexSet(0, "aPointColor", new V.ShaderVarDesc("vec3", ""));
      $.$get$_VarsDb().$indexSet(0, "vPointColor", new V.ShaderVarDesc("vec3", ""));
      if (!R.HasWebGLSupport()) {
        window.alert("Your browser does not support WebGL.");
        return;
      }
      S.OptionsSetup();
      t2 = document.body;
      t2.toString;
      t2 = C.EventStreamProvider_keydown.forElement$1(t2);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.main_closure()), false), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t2 = document.body.querySelectorAll("button");
      N.LogInfo("found " + t2.length + " buttons");
      C.EventStreamProvider_click._forElementList$1(new W._FrozenElementList(t2)).listen$1(new S.main_closure0());
      t2 = C.EventStreamProvider_resize.forTarget$1(window);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.main_closure1()), false), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      S.UpdateAll();
      rng = P._Random$(1);
      canvas = document.querySelector("#area");
      chronosGL = B.ChronosGL$(canvas, false, 10000, null, 1, true, true, false);
      chronosGL.gl.enable(2884);
      t2 = chronosGL.gl;
      t3 = new Q.Matrix4(new Float32Array(H._checkLength(16)), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0), Q.Vector$(0, 0, 0));
      t3.identity$0();
      phase = new B.RenderingPhase(t2, null, [], t3, true, true, true);
      phase.clearDepthBuffer = true;
      phase.clearColorBuffer = false;
      t3 = chronosGL._renderPhases;
      t3.push(phase);
      t2 = new V.ShaderObject("bluredV", null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
      t2.AddAttributeVar$1("aVertexPosition");
      t2.shader = t2._CreateShader$2(true, ["gl_Position = vec4(aVertexPosition, 1.0);"]);
      t4 = new V.ShaderObject("bluredF", null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
      t4.AddUniformVar$1("uColorAlpha");
      t4.shader = t4._CreateShader$2(true, ["gl_FragColor = uColorAlpha;"]);
      shaderProgramBlur = C.JSArray_methods.get$last(t3).createProgram$1(0, [t2, t4]);
      t4 = new V.ShaderObject("PointSprites", null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
      t4.AddAttributeVar$1("aVertexPosition");
      t4.AddAttributeVar$1("aPointSize");
      t4.AddAttributeVar$1("aPointColor");
      t4.AddVaryingVar$1("vPointColor");
      t4.AddUniformVar$1("uPerpectiveMatrix");
      t4.AddUniformVar$1("uModelViewMatrix");
      t4.AddUniformVar$1("uPointSize");
      t4.shader = t4._CreateShader$2(true, ["gl_Position = uPerpectiveMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);", "vPointColor = aPointColor;", "gl_PointSize = uPointSize * aPointSize/gl_Position.z;"]);
      t2 = new V.ShaderObject("PointSpritesF", null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
      t2.AddVaryingVar$1("vPointColor");
      t2.shader = t2._CreateShader$2(true, ["vec2 d = 2.0 * (gl_PointCoord - 0.5);", "float a = 1.0 - length(d);", "if (a < 0.01) discard;", "gl_FragColor.rgb = a  * vPointColor;", "gl_FragColor.a = a;"]);
      shaderIons = C.JSArray_methods.get$last(t3).createProgram$1(0, [t4, t2]);
      t2 = new V.ShaderObject("sphereV", null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
      t2.AddAttributeVar$1("aVertexPosition");
      t2.AddAttributeVar$1("aNormal");
      t2.AddUniformVar$1("uPerpectiveMatrix");
      t2.AddUniformVar$1("uModelViewMatrix");
      t2.AddUniformVar$1("uNormalMatrix");
      t2.AddVaryingVar$1("vTextureCoordinates");
      t2.shader = t2._CreateShader$2(true, ["gl_Position = uPerpectiveMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);", $._SphereV]);
      t4 = new V.ShaderObject("sphereF", null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
      t4.AddVaryingVar$1("vTextureCoordinates");
      t4.AddUniformVar$1("uTextureSampler");
      t4.AddUniformVar$1("uColorAlpha");
      t4.shader = t4._CreateShader$2(true, ["gl_FragColor = uColorAlpha * texture2D(uTextureSampler, vTextureCoordinates);"]);
      shaderSpheres = C.JSArray_methods.get$last(t3).createProgram$1(0, [t2, t4]);
      t4 = new B.ShaderProgramInputs(P.LinkedHashMap__makeEmpty());
      matBlur = new B.Material(true, true, false, 770, 771, 32774, t4);
      matBlur.blend = true;
      matBlur.depthWrite = false;
      t4.SetUniformVal$2("uColorAlpha", Q.Vector4$(0, 0, 0, 0.5));
      t4 = [];
      t2 = P.LinkedHashMap__makeEmpty();
      md = new B.MeshData("", [], [], t4, [], [], t2, Q.Vector$(0, 0, 0));
      t2.$indexSet(0, "aTextureCoordinates", []);
      t2 = Q.Vector$(-1, -1, 0);
      t3 = Q.Vector$(1, -1, 0);
      t5 = Q.Vector$(1, 1, 0);
      t6 = Q.Vector$(-1, 1, 0);
      t7 = Q.Vector2$(0, 0);
      t8 = Q.Vector2$(1, 0);
      t9 = Q.Vector2$(1, 1);
      t10 = Q.Vector2$(0, 1);
      t4.push(new B.Face4(0, 1, 2, 3));
      md.AddVertices$1([t2, t3, t5, t6]);
      md.AddAttributesVector2$2("aTextureCoordinates", [t7, t8, t9, t10]);
      shaderProgramBlur.objects.push(B.Mesh$(md, matBlur, false));
      orbit = B.OrbitCamera$(chronosGL._camera, 1500, 0, 0, canvas);
      orbit.mouseWheelFactor = -0.1;
      chronosGL.animatables.$indexSet(0, "orbitCam", orbit);
      distanceAnimator = new S.DistanceAnimator(rng, 500, 0, 0, 0, 10);
      distanceAnimator._srcDistance = 0;
      distanceAnimator._dstDistance = 1000;
      distanceAnimator._phaseDistance = 3.141592653589793;
      colorrot = new Q.ColorRotator(null, null, null, null, null, null, null, null, null, 0.5, 0.5, 0.5, 1, 1, 0.25, 0.2, rng);
      colorrot.h = rng.nextDouble$0();
      colorrot.h = 1 - rng.nextDouble$0() * rng.nextDouble$0();
      colorrot.l = 1;
      t10 = Q.Quaternion$(0, 0, 0, 1);
      t9 = Q.Quaternion$(0, 0, 0, 1);
      t8 = Q.Quaternion$(0, 0, 0, 1);
      t7 = Q.Vector$(0, 0, 0);
      helios = O.Helios$(rng, 375, $.gOptions.GetInt$1("sources"), $.gOptions.GetInt$1("sinks"), $.gOptions.GetInt$1("ions"), $.gOptions.GetDouble$1("speed"), $.gOptions.GetDouble$1("interval"));
      helios.SetTargets$2(rng, 5);
      lbf = new T.Vector3(new Float32Array(H._checkLength(3)));
      lbf.setValues$3(-500, -500, -500);
      utn = new T.Vector3(new Float32Array(H._checkLength(3)));
      utn.setValues$3(500, 500, 500);
      s = $.gOptions._o.$index(0, "detail").GetCurrentAsString$0();
      if (s === "")
        H.throwExpression(P.Exception_Exception("bad lod " + H.S(s)));
      t2 = H.Primitives_parseDouble(s, null);
      grid = new S.Grid(null, null, null, null, null, null, null, null, lbf, new T.Vector3(new Float32Array(H._checkLength(3))), t2, null, null, null, null, null, null, new T.Vector3(new Float32Array(H._checkLength(3))), new T.Vector3(new Float32Array(H._checkLength(3))), new T.Vector3(new Float32Array(H._checkLength(3))));
      grid.InitDimensions$1(utn);
      grid.AllocArrays$1(grid._nx * grid._ny * grid._nz);
      grid.InitArrays$0();
      opt = new S.DfsOption(null, 3, null);
      opt.$eval = helios.get$evaluator();
      opt.ttl = 3;
      opt.seqNo = 666;
      soapy = new B.ImageTexture(null, 3553, null, "sphere.png", null, new B.TextureProperties(false, false, true, 1, 9729, 9729));
      $.$get$Texture__cache().push(soapy);
      t2 = W.ImageElement_ImageElement(null, null, null);
      soapy._image = t2;
      t2.toString;
      t2 = C.EventStreamProvider_load.forElement$1(t2);
      soapy._future = t2.get$first(t2);
      soapy._image.src = "sphere.png";
      t2 = new B.ShaderProgramInputs(P.LinkedHashMap__makeEmpty());
      matSphere = new B.Material(true, true, false, 770, 771, 32774, t2);
      t2.SetUniformVal$2("uTextureSampler", soapy);
      matSphere.blend = true;
      matSphere.blend_dFactor = 1;
      matSphere.blend_sFactor = 1;
      t2.SetUniformVal$2("uColorAlpha", Q.Vector4$(1, 1, 1, 0.5));
      meshSpheres = B.Mesh$(S.ExtractMeshData(grid, helios.GetCenters$0(), opt), matSphere, false);
      shaderSpheres.objects.push(meshSpheres);
      nIons = helios.NumPoints$1(false);
      mdIons = new B.MeshData("", [], [], [], [], [], P.LinkedHashMap__makeEmpty(), Q.Vector$(0, 0, 0));
      mdIons.AddFaces1$1(nIons);
      v = [Q.Vector$(0, 0, 0)];
      for (i = 0; i < nIons; ++i)
        mdIons.AddVertices$1(v);
      t2 = new B.ShaderProgramInputs(P.LinkedHashMap__makeEmpty());
      matIons = new B.Material(true, true, false, 770, 771, 32774, t2);
      matIons.blend = true;
      matIons.blend_dFactor = 1;
      matIons.blend_sFactor = 1;
      t2.SetUniformVal$2("uPointSize", 1);
      matIons.depthWrite = true;
      meshIons = B.Mesh$(mdIons, matIons, false);
      meshIons.name = "ions_mesh";
      shaderIons.objects.push(meshIons);
      meshIons.AddBuffer$2("aPointSize", helios.GetSizes$1(false));
      meshIons.AddBuffer$2("aPointColor", helios.GetColors$1(false));
      t1.count = 0;
      t2 = chronosGL.animateCallbacks;
      t2.$indexSet(0, "fps", S.helios__updateFps$closure());
      t2.$indexSet(0, "rotateCamera", new S.main_animateCam(chronosGL, orbit, distanceAnimator));
      t2.$indexSet(0, "heliosUpdate", new S.main_animate(t1, rng, matBlur, colorrot, new S.RotationAnimator(rng, t10, t9, t8, t7, 1, 10), helios, grid, opt, matSphere, meshSpheres, false, matIons, meshIons));
      N.LogInfo("Starting ChronosGL main loop");
      host = C.JSArray_methods.join$1(["art", "muth", "org"], ".");
      arg1 = window.location.host;
      arg2 = window.location.pathname;
      W.HttpRequest_request(C.JSString_methods.$add(C.JSString_methods.$add("http://" + host + "/", arg1) + "/", arg2), null, null, null, null, null, null, null);
      B.Texture_loadAndInstallAllTextures(chronosGL.gl).then$1(new S.main_closure2(chronosGL));
    }, "call$0", "helios__main$closure", 0, 0, 3],
    DistanceAnimator: {
      "^": "Object;_helios$_rng,_dim,_srcDistance,_dstDistance,_phaseDistance,_helios$_speed"
    },
    RotationAnimator: {
      "^": "Object;_helios$_rng,_srcQuad,_dstQuad,_work,_axis,_complete,_helios$_speed"
    },
    OptionsSetup_closure: {
      "^": "Closure:0;",
      call$0: function() {
        document.querySelector(".about").hidden = true;
        return;
      }
    },
    main_closure: {
      "^": "Closure:6;",
      call$1: [function(e) {
        N.LogInfo("key pressed " + H.S(e.keyCode) + " " + J.get$runtimeType$(W._convertNativeToDart_EventTarget(e.target)).toString$0(0));
        if (J.get$runtimeType$(W._convertNativeToDart_EventTarget(e.target)).$eq(0, C.Type_InputElement_tgj))
          return;
        S.HandleCommand(P.String_String$fromCharCodes([e.keyCode], 0, null), "");
      }, null, null, 2, 0, null, 0, "call"]
    },
    main_closure0: {
      "^": "Closure:30;",
      call$1: [function(ev) {
        var t1, cmd;
        t1 = H.interceptedTypeCast(W._convertNativeToDart_EventTarget(ev.target), "$isElement");
        t1.toString;
        cmd = t1.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(t1))._toHyphenedName$1("cmd"));
        t1 = H.interceptedTypeCast(W._convertNativeToDart_EventTarget(ev.target), "$isElement");
        t1.toString;
        S.HandleCommand(cmd, t1.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(t1))._toHyphenedName$1("param")));
      }, null, null, 2, 0, null, 37, "call"]
    },
    main_closure1: {
      "^": "Closure:1;",
      call$1: [function($event) {
        return S.UpdateAll();
      }, null, null, 2, 0, null, 11, "call"]
    },
    main_animateCam: {
      "^": "Closure:8;chronosGL,orbit,distanceAnimator",
      call$2: [function(elapsedMs, now) {
        var t1, t2, f;
        switch ($.gOptions._o.$index(0, "cameraDistance").GetCurrentAsString$0()) {
          case "close":
            this.orbit.radius = 1000;
            break;
          case "far":
            this.orbit.radius = 1500;
            break;
          case "random":
            t1 = this.distanceAnimator;
            if (t1._phaseDistance >= 3.141592653589793) {
              t1._phaseDistance = 0;
              t1._srcDistance = t1._dstDistance;
              t2 = t1._dim;
              t1._dstDistance = 2.5 * t2 * t1._helios$_rng.nextDouble$0() + 0.5 * t2;
            }
            t2 = t1._phaseDistance + t1._helios$_speed * elapsedMs * 0.00002;
            t1._phaseDistance = t2;
            f = 0.5 - 0.5 * Math.cos(H.checkNum(t2));
            this.orbit.radius = f * t1._dstDistance + (1 - f) * t1._srcDistance;
            break;
        }
        this.chronosGL.perspar.fov = $.gOptions.GetInt$1("fov");
      }, null, null, 4, 0, null, 9, 7, "call"]
    },
    main_animate: {
      "^": "Closure:8;_box_0,rng,matBlur,colorrot,matrixrot,helios,grid,opt,matSphere,meshSpheres,showSrcDst,matIons,meshIons",
      call$2: [function(elapsedMs, now) {
        var t1, t2, t3, t4, delta, t5, t6, t0, t7, t8, t9, t10, trace, root, i, j, k, t11, scale1, bx, by, bz, bw, cosom, scale0, animation, color, showIons, showSpheres;
        this.matBlur._inputs.SetUniformVal$2("uColorAlpha", Q.Vector4$(0, 0, 0, 1 - $.gOptions.GetDouble$1("blurriness")));
        t1 = this.colorrot;
        t2 = elapsedMs / 1000;
        t3 = t1._interpolate + t2 * t1._change;
        t1._interpolate = t3;
        if (t3 >= 1) {
          t1._interpolate = 0;
          t3 = t1._rng;
          if (t3.nextDouble$0() < t1._drasticProb) {
            t1._srcH = t3.nextDouble$0();
            t1._srcS = 1 - t3.nextDouble$0() * t3.nextDouble$0();
            t1._srcL = 1;
          } else {
            t1._srcH = t1.h;
            t1._srcS = t1.s;
            t1._srcL = t1.l;
          }
          t1._dstH = t3.nextDouble$0();
          t1._dstS = 1 - t3.nextDouble$0() * t3.nextDouble$0();
          t1._dstL = 1;
          t1._change = t1._speed * t3.nextDouble$0();
        }
        t3 = t1._dstH;
        t4 = t1._srcH;
        delta = t3 - t4;
        if (!(delta < -0.5))
          t3 = 0 < delta && delta < 0.5;
        else
          t3 = true;
        t5 = t1._interpolate;
        if (t3) {
          t3 = t4 + t5 * delta;
          t1.h = t3;
        } else {
          t3 = t4 - t5 * delta;
          t1.h = t3;
        }
        if (t3 < 0) {
          ++t3;
          t1.h = t3;
        }
        if (t3 > 1) {
          --t3;
          t1.h = t3;
        }
        t4 = t1._dstS;
        t6 = t1._srcS;
        t6 += t5 * (t4 - t6);
        t1.s = t6;
        t1.l = 1;
        if (t3 < 0.16666666666666666) {
          t1.r = 1;
          t3 *= 6;
          t1.g = t3;
          t1.b = 0;
          t4 = t3;
          t3 = 1;
          t5 = 0;
        } else {
          if (t3 < 0.5) {
            t1.g = 1;
            if (t3 < 0.3333333333333333) {
              t3 = 1 - (t3 - 0.16666666666666666) * 6;
              t1.r = t3;
              t1.b = 0;
              t4 = 0;
            } else {
              t3 = (t3 - 0.3333333333333333) * 6;
              t1.b = t3;
              t1.r = 0;
              t4 = t3;
              t3 = 0;
            }
            t5 = t4;
            t4 = t3;
            t3 = 1;
          } else {
            if (t3 < 0.8333333333333334) {
              t1.b = 1;
              if (t3 < 0.6666666666666666) {
                t3 = 1 - (t3 - 0.5) * 6;
                t1.g = t3;
                t1.r = 0;
                t4 = 0;
              } else {
                t3 = (t3 - 0.666667) * 6;
                t1.r = t3;
                t1.g = 0;
                t4 = t3;
                t3 = 0;
              }
              t5 = t4;
              t4 = t3;
              t3 = 1;
            } else {
              t1.r = 1;
              t3 = 1 - (t3 - 0.8333333333333334) * 6;
              t1.b = t3;
              t1.g = 0;
              t4 = 0;
              t5 = 1;
            }
            t0 = t5;
            t5 = t3;
            t3 = t4;
            t4 = t0;
          }
          t0 = t4;
          t4 = t3;
          t3 = t0;
        }
        t3 = 1 - t6 * (1 - t3);
        t1.r = t3;
        t4 = 1 - t6 * (1 - t4);
        t1.g = t4;
        t5 = 1 - t6 * (1 - t5);
        t1.b = t5;
        t1.r = t3;
        t1.g = t4;
        t1.b = t5;
        t5 = this.matrixrot;
        t4 = this.meshIons;
        t3 = t4.transform;
        t6 = t5._complete + t5._helios$_speed * 0.000005 * elapsedMs;
        t5._complete = t6;
        if (t6 >= 1.2) {
          P.print("@@@ update transform");
          t5._complete = 0;
          t6 = t5._srcQuad;
          t7 = t6.m;
          t8 = t3.array;
          t7[0] = t8[0];
          t7[1] = t8[1];
          t7[2] = t8[2];
          t7[3] = t8[4];
          t7[4] = t8[5];
          t7[5] = t8[6];
          t7[6] = t8[8];
          t7[7] = t8[9];
          t7[8] = t8[10];
          t8 = t7[0];
          t9 = t7[4];
          t10 = t7[8];
          trace = t8 + t9 + t10;
          if (trace > 0) {
            t8 = Math.sqrt(H.checkNum(trace + 1));
            t6 = t6.array;
            t6[3] = 0.5 * t8;
            root = 0.5 / t8;
            t6[0] = (t7[5] - t7[7]) * root;
            t6[1] = (t7[6] - t7[2]) * root;
            t6[2] = (t7[1] - t7[3]) * root;
          } else {
            i = t9 > t8 ? 1 : 0;
            if (t10 > t7[i * 3 + i])
              i = 2;
            j = C.JSInt_methods.$mod(i + 1, 3);
            k = C.JSInt_methods.$mod(i + 2, 3);
            t8 = i * 3;
            t9 = j * 3;
            t10 = k * 3;
            t11 = Math.sqrt(H.checkNum(t7[t8 + i] - t7[t9 + j] - t7[t10 + k] + 1));
            t6 = t6.array;
            t6[i] = 0.5 * t11;
            root = 0.5 / t11;
            t6[3] = (t7[t9 + k] - t7[t10 + j]) * root;
            t6[j] = (t7[t9 + i] + t7[t8 + j]) * root;
            t6[k] = (t7[t10 + i] + t7[t8 + k]) * root;
          }
          t6 = t5._axis;
          t7 = t5._helios$_rng;
          t6.$set$3(0, t7.nextDouble$0(), t7.nextDouble$0(), t7.nextDouble$0());
          t6.normalize$0(0);
          t5._dstQuad.setAxisAngle$2(t6, 6.283185307179586 * t7.nextDouble$0());
        } else if (t6 >= 1)
          ;
        t6 = t5._work;
        scale1 = t5._complete;
        t7 = t5._srcQuad.array;
        t8 = t7[0];
        t9 = t7[1];
        t10 = t7[2];
        t7 = t7[3];
        t5 = t5._dstQuad.array;
        bx = t5[0];
        by = t5[1];
        bz = t5[2];
        bw = t5[3];
        cosom = t8 * bx + t9 * by + t10 * bz + t7 * bw;
        if (cosom < 0) {
          cosom = -cosom;
          bx = -bx;
          by = -by;
          bz = -bz;
          bw = -bw;
        }
        scale0 = 1 - scale1;
        if (1 - cosom > 0.000001) {
          t5 = Math.acos(H.checkNum(cosom));
          t11 = Math.sin(H.checkNum(t5));
          scale0 = Math.sin(H.checkNum(scale0 * t5)) / t11;
          scale1 = Math.sin(H.checkNum(scale1 * t5)) / t11;
        }
        t5 = t6.array;
        t5[0] = scale0 * t8 + scale1 * bx;
        t5[1] = scale0 * t9 + scale1 * by;
        t5[2] = scale0 * t10 + scale1 * bz;
        t5[3] = scale0 * t7 + scale1 * bw;
        animation = $.gOptions._o.$index(0, "animation").GetCurrentAsString$0();
        switch (animation) {
          case "none":
            t6.$set$4(0, 0, 0, 0, 1);
            break;
          case "orbit":
            t6.setAxisAngle$2(Q.Vector$(0, 1, 0), now * 0.0001);
            break;
          case "random":
            break;
          default:
            throw H.wrapException(P.Exception_Exception("bad animation " + H.S(animation)));
        }
        t5 = t1.r;
        t7 = t1.g;
        t8 = t1.b;
        color = new T.Vector3(new Float32Array(H._checkLength(3)));
        color.setValues$3(t5, t7, t8);
        t8 = this.helios;
        t8.Update$5(this.rng, color, now / 1000, t2, 10);
        showIons = $.gOptions.GetBool$1("showIons");
        if (showIons) {
          this.matIons._inputs.SetUniformVal$2("uPointSize", $.gOptions.GetDouble$1("size"));
          t2 = this.showSrcDst;
          t4.ChangeBufferCanonical$2("aVertexPosition", t8.GetPositions$1(t2));
          t4.ChangeBufferCanonical$2("aPointColor", t8.GetColors$1(t2));
          t6.toRotationMatrix4$1(t3);
        }
        t4.enabled = showIons;
        showSpheres = $.gOptions.GetBool$1("showSurfaces");
        if (showSpheres) {
          t2 = t8.GetAverageIonColor$0().$mul(0, 0.3).storage;
          this.matSphere._inputs.SetUniformVal$2("uColorAlpha", Q.Vector4$(t2[0], t2[1], t2[2], 0.3));
          t2 = this.meshSpheres;
          t2.UpdateMeshData$1(S.ExtractMeshData(this.grid, t8.GetCenters$0(), this.opt));
          t6.toRotationMatrix4$1(t2.transform);
        }
        this.meshSpheres.enabled = showSpheres;
        if ($.gOptions.GetInt$1("logLevel") > 0)
          if (C.JSInt_methods.$mod(++this._box_0.count, 20) === 0)
            J.setInnerHtml$1$x(document.querySelector("#state"), t8.toString$1(0, false) + ("\nColor Rotation:\n" + H.S(t1.r) + " " + H.S(t1.g) + " " + H.S(t1.b)));
      }, null, null, 4, 0, null, 9, 7, "call"]
    },
    main_closure2: {
      "^": "Closure:1;chronosGL",
      call$1: [function(dummy) {
        this.chronosGL.run$0();
      }, null, null, 2, 0, null, 40, "call"]
    }
  }, 1], ["html_common", "dart:html_common",, P, {
    "^": "",
    convertDartToNative_ImageData: function(imageData) {
      return imageData;
    },
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap__makeEmpty();
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        key = keys[_i];
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    convertDartToNative_Dictionary: [function(dict, postCreate) {
      var object;
      if (dict == null)
        return;
      object = {};
      if (postCreate != null)
        postCreate.call$1(object);
      J.forEach$1$ax(dict, new P.convertDartToNative_Dictionary_closure(object));
      return object;
    }, null, null, 2, 2, null, 1, 41, 42],
    convertDartToNative_Dictionary_closure: {
      "^": "Closure:11;object",
      call$2: function(key, value) {
        this.object[key] = value;
      }
    }
  }], ["ion", "ion.dart",, O, {
    "^": "",
    Pole: {
      "^": "Object;_ion$_pos,_posOld,_posTarget,_lastInterpolation",
      Pos$0: function() {
        return this._ion$_pos;
      },
      toString$0: function(_) {
        var t1, t2, t3, t4;
        t1 = $.$get$sprintf();
        t2 = this._ion$_pos.storage;
        t3 = this._posTarget.storage;
        t4 = this._posOld.storage;
        return t1.call$2("%s  %5.3f [t: %s] [o: %s]", [t1.call$2("%5.0f %5.0f %5.0f", [t2[0], t2[1], t2[2]]), this._lastInterpolation, $.$get$sprintf().call$2("%5.0f %5.0f %5.0f", [t3[0], t3[1], t3[2]]), $.$get$sprintf().call$2("%5.0f %5.0f %5.0f", [t4[0], t4[1], t4[2]])]);
      }
    },
    Ion: {
      "^": "Object;_ion$_pos,_rgb,_size,_ion$_speed,_maxEmitDist,_minAttrDist,_lifeTime",
      toString$0: function(_) {
        var t1, t2;
        t1 = $.$get$sprintf();
        t2 = this._ion$_pos.storage;
        return t1.call$2("ION: %s  sp %5.1f - %5.0f %5.0f - %d", [t1.call$2("%5.0f %5.0f %5.0f", [t2[0], t2[1], t2[2]]), this._ion$_speed, this._minAttrDist, this._maxEmitDist, this._lifeTime]);
      },
      Update$3: function(srcs, dsts, dt) {
        var force, t1, _i, ea, t, len, minDistance, t2;
        ++this._lifeTime;
        force = new T.Vector3(new Float32Array(H._checkLength(3)));
        this._maxEmitDist = 0;
        for (t1 = srcs.length, _i = 0; _i < srcs.length; srcs.length === t1 || (0, H.throwConcurrentModificationError)(srcs), ++_i) {
          ea = srcs[_i];
          t = this._ion$_pos.$sub(0, ea._ion$_pos);
          len = t.get$length(t);
          if (len > this._maxEmitDist)
            this._maxEmitDist = len;
          if (len > 11000)
            return true;
          force = force.$add(0, len > 1 ? t.$div(0, len * len) : t);
        }
        t1 = this._ion$_speed;
        minDistance = dt * t1;
        this._minAttrDist = 11000;
        for (t2 = dsts.length, _i = 0; _i < dsts.length; dsts.length === t2 || (0, H.throwConcurrentModificationError)(dsts), ++_i) {
          t = dsts[_i]._ion$_pos.$sub(0, this._ion$_pos);
          len = t.get$length(t);
          if (len < this._minAttrDist)
            this._minAttrDist = len;
          if (len < minDistance)
            return true;
          force = force.$add(0, len > 1 ? t.$div(0, len * len) : t);
        }
        t2 = force.normalize$0(0);
        this._ion$_pos = this._ion$_pos.$add(0, t2.$mul(0, dt).$mul(0, t1));
        return false;
      }
    },
    Helios: {
      "^": "Object;_ions,_srcs,_dsts,_changeInterval,_wait,_interpolationPre,_interpolation,_interpolationConst,targetMode,_surface_value,_eval_scale,_ion$_dim",
      evaluator$1: [function(p) {
        var t1, t2, t3, t4, valueS, i, t5, t6, t7, valueD;
        t1 = p.storage;
        t2 = t1[0];
        t3 = t1[1];
        t1 = t1[2];
        for (t4 = this._srcs, valueS = 0, i = 0; i < t4.length; ++i) {
          t5 = t4[i].Pos$0().storage;
          t6 = t2 - t5[0];
          t7 = t3 - t5[1];
          t5 = t1 - t5[2];
          valueS += 1 / (t6 * t6 + t7 * t7 + t5 * t5 + 1e-9);
        }
        for (t4 = this._dsts, valueD = 0, i = 0; i < t4.length; ++i) {
          t5 = t4[i].Pos$0().storage;
          t6 = t2 - t5[0];
          t7 = t3 - t5[1];
          t5 = t1 - t5[2];
          valueD += 1 / (t6 * t6 + t7 * t7 + t5 * t5 + 1e-9);
        }
        return valueS * 6400 + valueD * 1600 - this._surface_value;
      }, "call$1", "get$evaluator", 2, 0, 32, 43],
      GetCenters$0: function() {
        var out, t1, t2, _i;
        out = [];
        for (t1 = this._srcs, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          out.push(t1[_i]._ion$_pos);
        for (t1 = this._dsts, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          out.push(t1[_i]._ion$_pos);
        return out;
      },
      toString$1: function(_, showIons) {
        var s, t1, t2, _i;
        s = [];
        s.push("Surface Value: " + H.S(this._surface_value));
        s.push("Emitters:");
        for (t1 = this._srcs, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          s.push(J.toString$0$(t1[_i]));
        s.push("Attracters:");
        for (t1 = this._dsts, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          s.push(J.toString$0$(t1[_i]));
        s.push("Transition Status:");
        s.push("wait " + H.S(this._wait) + " intpol: " + H.S(this._interpolationPre));
        return C.JSArray_methods.join$1(s, "\n");
      },
      toString$0: function($receiver) {
        return this.toString$1($receiver, false);
      },
      Update$5: function(rng, rgb, now, dt, speed) {
        var t1, t, t2, _i, ea, t3, t4, t5, ion;
        this._surface_value = 0.45 + 0.05 * Math.cos(H.checkNum(now));
        t1 = this._wait - dt;
        this._wait = t1;
        if (t1 <= 0) {
          if (this._interpolationPre === 0) {
            this._interpolationConst = rng.nextInt$1(4) === 0 ? 0.1 : 0.002;
            t = rng.nextInt$1(10);
            t1 = t === this.targetMode ? t + 1 : t;
            this.targetMode = t1;
            this.SetTargets$2(rng, t1);
          }
          t1 = this._interpolationPre + dt * speed * this._interpolationConst;
          this._interpolationPre = t1;
          this._interpolation = 0.5 - 0.5 * Math.cos(H.checkNum(t1));
          if (this._interpolationPre >= 3.141592653589793) {
            this._interpolationPre = 0;
            this._wait = this._changeInterval;
          }
        }
        for (t1 = this._srcs, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          ea = t1[_i];
          t3 = this._interpolation;
          ea._lastInterpolation = t3;
          ea._ion$_pos = ea._posTarget.$mul(0, t3).$add(0, ea._posOld.$mul(0, 1 - t3));
        }
        for (t2 = this._dsts, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          ea = t2[_i];
          t4 = this._interpolation;
          ea._lastInterpolation = t4;
          ea._ion$_pos = ea._posTarget.$mul(0, t4).$add(0, ea._posOld.$mul(0, 1 - t4));
        }
        t3 = new O.Helios_Update_startIon(this, rng, rgb, dt);
        for (t4 = this._ions, t5 = t4.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
          ion = t4[_i];
          if (ion._lifeTime < 0)
            t3.call$1(ion);
          if (ion.Update$3(t1, t2, dt))
            t3.call$1(ion);
        }
      },
      NumPoints$1: function(showSrcDst) {
        var t1 = this._ions.length;
        return t1;
      },
      GetPositions$1: function(showSrcDst) {
        var p, t1, t2, i, _i, t3, t4;
        p = new Float32Array(H._checkLength(3 * this.NumPoints$1(false)));
        for (t1 = this._ions, t2 = t1.length, i = 0, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          t4 = t1[_i]._ion$_pos.storage;
          p[i] = t4[0];
          p[i + 1] = t4[1];
          p[i + 2] = t4[2];
          i += 3;
        }
        return p;
      },
      GetColors$1: function(showSrcDst) {
        var p, t1, t2, i, _i, t3, t4;
        p = new Float32Array(H._checkLength(3 * this.NumPoints$1(false)));
        for (t1 = this._ions, t2 = t1.length, i = 0, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          t4 = t1[_i]._rgb.storage;
          p[i] = t4[0];
          p[i + 1] = t4[1];
          p[i + 2] = t4[2];
          i += 3;
        }
        return p;
      },
      GetAverageIonColor$0: function() {
        var c, t1, t2, _i, t3;
        c = new T.Vector3(new Float32Array(H._checkLength(3)));
        for (t1 = this._ions, t2 = t1.length, _i = 0; t3 = t1.length, _i < t3; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          c = c.$add(0, t1[_i]._rgb);
        return c.$mul(0, 1 / t3);
      },
      GetSizes$1: function(showSrcDst) {
        var p, t1, t2, i, _i, t3;
        p = new Float32Array(H._checkLength(this.NumPoints$1(false)));
        for (t1 = this._ions, t2 = t1.length, i = 0, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          p[i] = t1[_i]._size;
          ++i;
        }
        return p;
      },
      SetTargets$2: function(rng, mode) {
        var t1, t2, t3, _i, ea, t4, t5, t6, t7, t8, change, pos, pos0, t9, t10, t11, angle;
        t1 = new O.Helios_SetTargets_rand(this, rng);
        t2 = new O.Helios_SetTargets_step(this);
        switch (mode) {
          case 0:
            for (t2 = this._srcs, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
              ea = t2[_i];
              t4 = t1.call$0();
              t5 = t1.call$0();
              t6 = t1.call$0();
              t7 = ea._posTarget.storage;
              t7[0] = t4;
              t7[1] = t5;
              t7[2] = t6;
              t6 = ea._posOld;
              t7 = ea._ion$_pos.storage;
              t5 = t7[0];
              t4 = t7[1];
              t7 = t7[2];
              t8 = new Float32Array(3);
              t8[0] = t5;
              t8[1] = t4;
              t8[2] = t7;
              t6.set$xyz(new T.Vector3(t8));
            }
            for (t2 = this._dsts, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
              ea = t2[_i];
              t4 = t1.call$0();
              t5 = t1.call$0();
              t6 = t1.call$0();
              t7 = ea._posTarget.storage;
              t7[0] = t4;
              t7[1] = t5;
              t7[2] = t6;
              t6 = ea._posOld;
              t7 = ea._ion$_pos.storage;
              t5 = t7[0];
              t4 = t7[1];
              t7 = t7[2];
              t8 = new Float32Array(3);
              t8[0] = t5;
              t8[1] = t4;
              t8[2] = t7;
              t6.set$xyz(new T.Vector3(t8));
            }
            break;
          case 1:
            t1 = this._ion$_dim;
            t2 = this._srcs;
            t3 = t2.length;
            t4 = this._dsts;
            change = 2 * t1 / (t3 + t4.length - 1);
            pos = -t1;
            for (_i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
              ea = t2[_i];
              t1 = ea._posTarget.storage;
              t1[0] = pos;
              t1[1] = pos * 0.5;
              t1[2] = 0;
              t1 = ea._posOld;
              t5 = ea._ion$_pos.storage;
              t6 = t5[0];
              t7 = t5[1];
              t5 = t5[2];
              t8 = new Float32Array(3);
              t8[0] = t6;
              t8[1] = t7;
              t8[2] = t5;
              t1.set$xyz(new T.Vector3(t8));
              pos += change;
            }
            for (t1 = t4.length, _i = 0; _i < t4.length; t4.length === t1 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
              ea = t4[_i];
              t2 = ea._posTarget.storage;
              t2[0] = pos;
              t2[1] = pos * 0.5;
              t2[2] = 0;
              t2 = ea._posOld;
              t3 = ea._ion$_pos.storage;
              t5 = t3[0];
              t6 = t3[1];
              t3 = t3[2];
              t7 = new Float32Array(3);
              t7[0] = t5;
              t7[1] = t6;
              t7[2] = t3;
              t2.set$xyz(new T.Vector3(t7));
              pos += change;
            }
            break;
          case 2:
            t1 = this._srcs;
            t2 = t1.length;
            t3 = this._dsts;
            t4 = t3.length;
            t5 = this._ion$_dim;
            change = t2 > t4 ? 4 * t5 / (t2 * 2 - 1) : 4 * t5 / (t4 * 2 - 1);
            pos = -t5;
            for (pos0 = pos, _i = 0; t4 = t1.length, _i < t4; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              ea = t1[_i];
              t4 = ea._posTarget.storage;
              t4[0] = pos0;
              t4[1] = pos0 * 0.5;
              t4[2] = 0;
              t4 = ea._posOld;
              t5 = ea._ion$_pos.storage;
              t6 = t5[0];
              t7 = t5[1];
              t5 = t5[2];
              t8 = new Float32Array(3);
              t8[0] = t6;
              t8[1] = t7;
              t8[2] = t5;
              t4.set$xyz(new T.Vector3(t8));
              pos0 += change;
            }
            pos += t4 * change * 0.5;
            for (t1 = t3.length, _i = 0; _i < t3.length; t3.length === t1 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
              ea = t3[_i];
              t2 = ea._posTarget.storage;
              t2[0] = pos;
              t2[1] = pos * 0.5;
              t2[2] = 0;
              t2 = ea._posOld;
              t4 = ea._ion$_pos.storage;
              t5 = t4[0];
              t6 = t4[1];
              t4 = t4[2];
              t7 = new Float32Array(3);
              t7[0] = t5;
              t7[1] = t6;
              t7[2] = t4;
              t2.set$xyz(new T.Vector3(t7));
              pos += change;
            }
            break;
          case 3:
            t1 = this._ion$_dim;
            t3 = 4 * t1;
            t4 = this._srcs;
            t5 = t4.length;
            change = t3 / (t5 * 2 - 1);
            pos = -t1;
            for (t6 = pos * 0.1, pos0 = pos, _i = 0; t7 = t4.length, _i < t7; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
              ea = t4[_i];
              t7 = t2.call$1(t7);
              t8 = ea._posTarget.storage;
              t8[0] = pos0;
              t8[1] = t7;
              t8[2] = t6;
              t8 = ea._posOld;
              t7 = ea._ion$_pos.storage;
              t9 = t7[0];
              t10 = t7[1];
              t7 = t7[2];
              t11 = new Float32Array(3);
              t11[0] = t9;
              t11[1] = t10;
              t11[2] = t7;
              t8.set$xyz(new T.Vector3(t11));
              pos0 += change;
            }
            t4 = this._dsts;
            t5 = t4.length;
            change = t3 / (t5 * 2 - 1);
            for (t1 *= 0.1, _i = 0; t3 = t4.length, _i < t3; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
              ea = t4[_i];
              t3 = J.$negate$n(t2.call$1(t3));
              t6 = ea._posTarget.storage;
              t6[0] = pos;
              t6[1] = t3;
              t6[2] = t1;
              t6 = ea._posOld;
              t3 = ea._ion$_pos.storage;
              t7 = t3[0];
              t8 = t3[1];
              t3 = t3[2];
              t9 = new Float32Array(3);
              t9[0] = t7;
              t9[1] = t8;
              t9[2] = t3;
              t6.set$xyz(new T.Vector3(t9));
              pos += change;
            }
            break;
          case 4:
            t1 = this._ion$_dim;
            t3 = 4 * t1;
            t4 = this._srcs;
            t5 = t4.length;
            change = t3 / (t5 * 2 - 1);
            pos = -t1;
            for (t6 = t1 * 0.1, pos0 = pos, _i = 0; t7 = t4.length, _i < t7; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
              ea = t4[_i];
              t7 = t2.call$1(t7);
              t8 = ea._posTarget.storage;
              t8[0] = pos0;
              t8[1] = t7;
              t8[2] = t6;
              t8 = ea._posOld;
              t7 = ea._ion$_pos.storage;
              t9 = t7[0];
              t10 = t7[1];
              t7 = t7[2];
              t11 = new Float32Array(3);
              t11[0] = t9;
              t11[1] = t10;
              t11[2] = t7;
              t8.set$xyz(new T.Vector3(t11));
              pos0 += change;
            }
            t4 = this._dsts;
            t5 = t4.length;
            change = t3 / (t5 * 2 - 1);
            for (t1 *= 0.02, _i = 0; t3 = t4.length, _i < t3; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
              ea = t4[_i];
              t3 = J.$negate$n(t2.call$1(t3));
              t6 = ea._posTarget.storage;
              t6[0] = t1;
              t6[1] = t3;
              t6[2] = pos;
              t6 = ea._posOld;
              t3 = ea._ion$_pos.storage;
              t7 = t3[0];
              t8 = t3[1];
              t3 = t3[2];
              t9 = new Float32Array(3);
              t9[0] = t7;
              t9[1] = t8;
              t9[2] = t3;
              t6.set$xyz(new T.Vector3(t9));
              pos += change;
            }
            break;
          case 5:
            for (t2 = this._srcs, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
              ea = t2[_i];
              t4 = t1.call$0();
              t5 = t1.call$0();
              t6 = ea._posTarget.storage;
              t6[0] = t4;
              t6[1] = 0;
              t6[2] = t5;
              t5 = ea._posOld;
              t6 = ea._ion$_pos.storage;
              t4 = t6[0];
              t7 = t6[1];
              t6 = t6[2];
              t8 = new Float32Array(3);
              t8[0] = t4;
              t8[1] = t7;
              t8[2] = t6;
              t5.set$xyz(new T.Vector3(t8));
            }
            for (t2 = this._dsts, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
              ea = t2[_i];
              t4 = t1.call$0();
              t5 = t1.call$0();
              t6 = ea._posTarget.storage;
              t6[0] = t4;
              t6[1] = 0;
              t6[2] = t5;
              t5 = ea._posOld;
              t6 = ea._ion$_pos.storage;
              t4 = t6[0];
              t7 = t6[1];
              t6 = t6[2];
              t8 = new Float32Array(3);
              t8[0] = t4;
              t8[1] = t7;
              t8[2] = t6;
              t5.set$xyz(new T.Vector3(t8));
            }
            break;
          case 6:
            for (t3 = this._srcs, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
              ea = t3[_i];
              t5 = t1.call$0();
              t6 = t2.call$1(t3.length);
              t7 = t1.call$0();
              t8 = ea._posTarget.storage;
              t8[0] = t5;
              t8[1] = t6;
              t8[2] = t7;
              t7 = ea._posOld;
              t8 = ea._ion$_pos.storage;
              t6 = t8[0];
              t5 = t8[1];
              t8 = t8[2];
              t9 = new Float32Array(3);
              t9[0] = t6;
              t9[1] = t5;
              t9[2] = t8;
              t7.set$xyz(new T.Vector3(t9));
            }
            for (t3 = this._dsts, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
              ea = t3[_i];
              t5 = t1.call$0();
              t6 = J.$negate$n(t2.call$1(t3.length));
              t7 = t1.call$0();
              t8 = ea._posTarget.storage;
              t8[0] = t5;
              t8[1] = t6;
              t8[2] = t7;
              t7 = ea._posOld;
              t8 = ea._ion$_pos.storage;
              t6 = t8[0];
              t5 = t8[1];
              t8 = t8[2];
              t9 = new Float32Array(3);
              t9[0] = t6;
              t9[1] = t5;
              t9[2] = t8;
              t7.set$xyz(new T.Vector3(t9));
            }
            break;
          case 7:
            t1 = this._srcs;
            t2 = t1.length;
            change = 6.283185307179586 / t2;
            for (t3 = this._ion$_dim, angle = 0.5, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              ea = t1[_i];
              angle += change;
              t4 = Math.cos(angle);
              t5 = Math.sin(angle);
              t6 = ea._posTarget.storage;
              t6[0] = t4 * 0.4 * t3;
              t6[1] = t5 * 0.4 * t3;
              t6[2] = 0;
              t6 = ea._posOld;
              t5 = ea._ion$_pos.storage;
              t4 = t5[0];
              t7 = t5[1];
              t5 = t5[2];
              t8 = new Float32Array(3);
              t8[0] = t4;
              t8[1] = t7;
              t8[2] = t5;
              t6.set$xyz(new T.Vector3(t8));
            }
            t1 = this._dsts;
            t2 = t1.length;
            change = 6.283185307179586 / t2;
            for (angle = 1.5, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              ea = t1[_i];
              angle += change;
              t4 = Math.cos(angle);
              t5 = Math.sin(angle);
              t6 = ea._posTarget.storage;
              t6[0] = t4 * t3;
              t6[1] = t5 * t3;
              t6[2] = 0;
              t6 = ea._posOld;
              t5 = ea._ion$_pos.storage;
              t4 = t5[0];
              t7 = t5[1];
              t5 = t5[2];
              t8 = new Float32Array(3);
              t8[0] = t4;
              t8[1] = t7;
              t8[2] = t5;
              t6.set$xyz(new T.Vector3(t8));
            }
            break;
          case 8:
            t1 = this._srcs;
            t2 = t1.length;
            t3 = this._dsts;
            change = 6.283185307179586 / (t2 + t3.length);
            for (t4 = this._ion$_dim, angle = 0.5, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              ea = t1[_i];
              angle += change;
              t5 = Math.cos(angle);
              t6 = Math.sin(angle);
              t7 = ea._posTarget.storage;
              t7[0] = t5 * t4;
              t7[1] = t6 * t4;
              t7[2] = 0;
              t7 = ea._posOld;
              t6 = ea._ion$_pos.storage;
              t5 = t6[0];
              t8 = t6[1];
              t6 = t6[2];
              t9 = new Float32Array(3);
              t9[0] = t5;
              t9[1] = t8;
              t9[2] = t6;
              t7.set$xyz(new T.Vector3(t9));
            }
            for (t1 = t3.length, _i = 0; _i < t3.length; t3.length === t1 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
              ea = t3[_i];
              angle += change;
              t2 = Math.cos(angle);
              t5 = Math.sin(angle);
              t6 = ea._posTarget.storage;
              t6[0] = t2 * t4;
              t6[1] = t5 * t4;
              t6[2] = 0;
              t6 = ea._posOld;
              t5 = ea._ion$_pos.storage;
              t2 = t5[0];
              t7 = t5[1];
              t5 = t5[2];
              t8 = new Float32Array(3);
              t8[0] = t2;
              t8[1] = t7;
              t8[2] = t5;
              t6.set$xyz(new T.Vector3(t8));
            }
            break;
          case 9:
            t1 = this._srcs;
            t2 = t1.length;
            t3 = this._dsts;
            t4 = t3.length;
            change = t2 > t4 ? 6.283185307179586 / t2 : 6.283185307179586 / t4;
            for (t4 = this._ion$_dim, angle = 0.5, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              ea = t1[_i];
              t5 = Math.cos(angle);
              t6 = Math.sin(angle);
              t7 = ea._posTarget.storage;
              t7[0] = t5 * t4;
              t7[1] = t6 * t4;
              t7[2] = 0;
              t7 = ea._posOld;
              t6 = ea._ion$_pos.storage;
              t5 = t6[0];
              t8 = t6[1];
              t6 = t6[2];
              t9 = new Float32Array(3);
              t9[0] = t5;
              t9[1] = t8;
              t9[2] = t6;
              t7.set$xyz(new T.Vector3(t9));
              angle += change;
            }
            angle = 0.5 + change * 0.5;
            for (t1 = t3.length, _i = 0; _i < t3.length; t3.length === t1 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
              ea = t3[_i];
              t2 = Math.cos(angle);
              t5 = Math.sin(angle);
              t6 = ea._posTarget.storage;
              t6[0] = t2 * t4;
              t6[1] = t5 * t4;
              t6[2] = 0;
              t6 = ea._posOld;
              t5 = ea._ion$_pos.storage;
              t2 = t5[0];
              t7 = t5[1];
              t5 = t5[2];
              t8 = new Float32Array(3);
              t8[0] = t2;
              t8[1] = t7;
              t8[2] = t5;
              t6.set$xyz(new T.Vector3(t8));
              angle += change;
            }
            break;
          case 10:
            for (t1 = this._srcs, t2 = t1.length, t3 = this._ion$_dim, t4 = t3 * 0.2, t5 = t3 * 0.1, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              ea = t1[_i];
              t6 = ea._posTarget.storage;
              t6[0] = t3;
              t6[1] = t4;
              t6[2] = t5;
              t6 = ea._posOld;
              t7 = ea._ion$_pos.storage;
              t8 = t7[0];
              t9 = t7[1];
              t7 = t7[2];
              t10 = new Float32Array(3);
              t10[0] = t8;
              t10[1] = t9;
              t10[2] = t7;
              t6.set$xyz(new T.Vector3(t10));
            }
            for (t1 = this._dsts, t2 = t1.length, t4 = -t3, t5 = t4 * 0.2, t4 *= 0.1, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              ea = t1[_i];
              t6 = ea._posTarget.storage;
              t6[0] = t3;
              t6[1] = t5;
              t6[2] = t4;
              t6 = ea._posOld;
              t7 = ea._ion$_pos.storage;
              t8 = t7[0];
              t9 = t7[1];
              t7 = t7[2];
              t10 = new Float32Array(3);
              t10[0] = t8;
              t10[1] = t9;
              t10[2] = t7;
              t6.set$xyz(new T.Vector3(t10));
            }
            break;
        }
      },
      Helios$7: function(rng, _dim, numEmit, numAttr, numIon, speed, _changeInterval) {
        var t1, t2, i, t3, t4, t5, t6, d;
        this._wait = this._changeInterval;
        t1 = new O.Helios_rand(this, rng);
        for (t2 = this._srcs, i = 0; i < numEmit; ++i) {
          t3 = t1.call$0();
          t4 = t1.call$0();
          t5 = t1.call$0();
          t6 = new Float32Array(3);
          t6[0] = t3;
          t6[1] = t4;
          t6[2] = t5;
          new Float32Array(3);
          t3 = new Float32Array(3);
          t2.push(new O.Pole(new T.Vector3(t6), new T.Vector3(t3), new T.Vector3(new Float32Array(3)), 0));
        }
        for (t2 = this._dsts, i = 0; i < numAttr; ++i) {
          t3 = t1.call$0();
          t4 = t1.call$0();
          t5 = t1.call$0();
          t6 = new Float32Array(3);
          t6[0] = t3;
          t6[1] = t4;
          t6[2] = t5;
          new Float32Array(3);
          t3 = new Float32Array(3);
          t2.push(new O.Pole(new T.Vector3(t6), new T.Vector3(t3), new T.Vector3(new Float32Array(3)), 0));
        }
        for (t1 = this._ions, i = 0; i < numIon; ++i) {
          d = rng.nextDouble$0() * 2 + 0.4;
          t2 = new Float32Array(3);
          t3 = new Float32Array(3);
          t3[0] = 0;
          t3[1] = 1;
          t3[2] = 0;
          t1.push(new O.Ion(new T.Vector3(t2), new T.Vector3(t3), d * 1000, speed * 12 / d, 0, 0, -1));
        }
      },
      static: {
        Helios$: function(rng, _dim, numEmit, numAttr, numIon, speed, _changeInterval) {
          var t1 = new O.Helios([], [], [], _changeInterval, 0, 0, 0, 0, 0, 0.5, 1 / Math.sqrt(H.checkNum(2 * (numEmit + numAttr))), _dim);
          t1.Helios$7(rng, _dim, numEmit, numAttr, numIon, speed, _changeInterval);
          return t1;
        }
      }
    },
    Helios_rand: {
      "^": "Closure:7;$this,rng",
      call$0: function() {
        return 2 * this.$this._ion$_dim * (this.rng.nextDouble$0() - 0.5);
      }
    },
    Helios_Update_startIon: {
      "^": "Closure:33;$this,rng,rgb,dt",
      call$1: function(ion) {
        var t1, t2, t3, t4, t5, offset;
        t1 = ion._rgb;
        t2 = this.rgb.storage;
        t3 = t2[0];
        t4 = t2[1];
        t2 = t2[2];
        t5 = new Float32Array(H._checkLength(3));
        new T.Vector3(t5).setValues$3(t3, t4, t2);
        t1 = t1.storage;
        t1[0] = t5[0];
        t1[1] = t5[1];
        t1[2] = t5[2];
        t5 = this.$this._srcs;
        t1 = this.rng;
        t5 = t5[t1.nextInt$1(t5.length)]._ion$_pos;
        ion._lifeTime = 0;
        ion._ion$_pos.set$xyz(t5.get$xyz());
        for (; true;) {
          t2 = t1.nextInt$1(3);
          t3 = t1.nextInt$1(3);
          t4 = t1.nextInt$1(3);
          t5 = new Float32Array(3);
          offset = new T.Vector3(t5);
          t5[0] = t2 - 1;
          t5[1] = t3 - 1;
          t5[2] = t4 - 1;
          t2 = t5[0] === 0 ? 1 : 0;
          t3 = t5[1] === 0 ? 1 : 0;
          t4 = t5[2] === 0 ? 1 : 0;
          if (t2 + t3 + t4 === 1)
            continue;
          ion._ion$_pos = ion._ion$_pos.$add(0, offset.$mul(0, this.dt).$mul(0, ion._ion$_speed));
          break;
        }
      }
    },
    Helios_SetTargets_rand: {
      "^": "Closure:7;$this,rng",
      call$0: function() {
        return 2 * this.$this._ion$_dim * (this.rng.nextDouble$0() - 0.5);
      }
    },
    Helios_SetTargets_step: {
      "^": "Closure:34;$this",
      call$1: function(x) {
        var t1, d;
        t1 = this.$this._ion$_dim;
        d = 0.05 * t1;
        return -(t1 + d) + x * d;
      }
    }
  }], ["logging", "logging.dart",, N, {
    "^": "",
    LogInfo: function(s) {
      var t1, now, t2, t3, line;
      if ($.gLogLevel > 0) {
        t1 = Date.now();
        now = new P.DateTime(t1, false);
        if (now.date === void 0)
          now.date = new Date(t1);
        t2 = now.date.getHours() + 0;
        t2 = "I:" + t2 + ":";
        if (now.date === void 0)
          now.date = new Date(t1);
        t3 = now.date.getMinutes() + 0;
        t3 = t2 + t3 + ":";
        if (now.date === void 0)
          now.date = new Date(t1);
        t1 = now.date.getSeconds() + 0;
        line = t3 + t1 + ": " + s;
        H.printString(line);
      }
    }
  }], ["option", "option.dart",, S, {
    "^": "",
    Option: {
      "^": "Object;element,defaultValue>,name,type>",
      GetCurrentAsString$0: function() {
        var t1, t2;
        t1 = this.type;
        if (t1 === "B")
          return J.toString$0$(H.interceptedTypeCast(this.element, "$isInputElement").checked);
        else {
          t2 = this.element;
          if (t1 === "O")
            return H.interceptedTypeCast(t2, "$isSelectElement").value;
          else
            return H.interceptedTypeCast(t2, "$isInputElement").value;
        }
      },
      GetCurrentAsDouble$0: function() {
        return H.interceptedTypeCast(this.element, "$isInputElement").valueAsNumber;
      },
      SetCurrentFromString$1: function(s) {
        var t1, t2;
        t1 = this.type;
        if (t1 === "B")
          H.interceptedTypeCast(this.element, "$isInputElement").checked = s === "true";
        else {
          t2 = this.element;
          if (t1 === "O")
            H.interceptedTypeCast(t2, "$isSelectElement").value = s;
          else
            H.interceptedTypeCast(t2, "$isInputElement").value = s;
        }
      },
      Save$1: function(s) {
        var t1 = this.name;
        N.LogInfo("Saving " + t1 + " " + H.S(s));
        window.localStorage.setItem(t1, s);
      }
    },
    Options: {
      "^": "Object;_prefix,_o,_settings",
      AddOption$4: function($name, type, defaultValue, useFake) {
        var t1, e, t2;
        t1 = "#" + $name;
        e = document.querySelector(t1);
        if (e == null && useFake) {
          e = W.InputElement_InputElement(null);
          e.type = $.$get$_kOptionTypeMap().$index(0, type);
        }
        if (e == null)
          throw H.wrapException("Missing widget for options " + $name);
        t1 = this._prefix + ":" + $name;
        t2 = new S.Option(e, defaultValue, t1, type);
        if (window.localStorage.getItem(t1) == null)
          t2.Save$1(defaultValue);
        N.LogInfo("Loading " + t1);
        t2.SetCurrentFromString$1(window.localStorage.getItem(t1));
        this._o.$indexSet(0, $name, t2);
      },
      AddOption$3: function($name, type, defaultValue) {
        return this.AddOption$4($name, type, defaultValue, false);
      },
      _SanityCheck$2: function($name, type) {
        var t1 = this._o;
        if (!t1.containsKey$1(0, $name))
          throw H.wrapException("unknown options " + $name);
        if (J.get$type$x(t1.$index(0, $name)) !== type)
          throw H.wrapException("bad type " + type + " for options " + $name);
      },
      GetBool$1: function($name) {
        this._SanityCheck$2($name, "B");
        return this._o.$index(0, $name).GetCurrentAsString$0() === "true";
      },
      GetInt$1: function($name) {
        var t1, d;
        this._SanityCheck$2($name, "I");
        t1 = this._o;
        d = t1.$index(0, $name).GetCurrentAsDouble$0();
        if (isNaN(d))
          return H.Primitives_parseInt(J.get$defaultValue$x(t1.$index(0, $name)), null, null);
        return C.JSNumber_methods.toInt$0(Math.floor(d));
      },
      GetDouble$1: function($name) {
        var t1, d;
        this._SanityCheck$2($name, "D");
        t1 = this._o;
        d = t1.$index(0, $name).GetCurrentAsDouble$0();
        if (isNaN(d))
          return H.Primitives_parseDouble(J.get$defaultValue$x(t1.$index(0, $name)), null);
        return d;
      },
      SaveToLocalStorage$0: function() {
        this._o.forEach$1(0, new S.Options_SaveToLocalStorage_closure());
      },
      SetNewSettings$1: function($name) {
        J.forEach$1$ax(this._settings.$index(0, $name), new S.Options_SetNewSettings_closure(this));
        window.location.hash = C.JSString_methods.$add("#", $name);
      },
      AddSetting$2: function($name, s) {
        s.forEach$1(0, new S.Options_AddSetting_closure(this, $name));
        this._settings.$indexSet(0, $name, s);
      },
      ProcessUrlHash$0: function() {
        var hash, pairs, t1, t2, _i, tv, t3, t4, now, t5, t6, line;
        hash = window.location.hash;
        if (hash === "")
          return;
        pairs = J.substring$1$s(hash, 1).split("&");
        for (t1 = pairs.length, t2 = this._o, _i = 0; _i < pairs.length; pairs.length === t1 || (0, H.throwConcurrentModificationError)(pairs), ++_i) {
          tv = pairs[_i].split("=");
          t3 = tv.length;
          if (t3 === 1) {
            t3 = "SetSetting " + H.S(tv[0]);
            if ($.gLogLevel > 0) {
              t4 = Date.now();
              now = new P.DateTime(t4, false);
              if (now.date === void 0)
                now.date = new Date(t4);
              t5 = now.date.getHours() + 0;
              t5 = "I:" + t5 + ":";
              if (now.date === void 0)
                now.date = new Date(t4);
              t6 = now.date.getMinutes() + 0;
              t6 = t5 + t6 + ":";
              if (now.date === void 0)
                now.date = new Date(t4);
              t4 = now.date.getSeconds() + 0;
              line = t6 + t4 + ": " + t3;
              H.printString(line);
            }
            this.SetNewSettings$1(tv[0]);
          } else if (t3 === 2) {
            t3 = tv[0];
            t4 = tv[1];
            t2.$index(0, t3).SetCurrentFromString$1(t4);
          }
        }
      }
    },
    Options_SaveToLocalStorage_closure: {
      "^": "Closure:2;",
      call$2: function($name, o) {
        o.Save$1(o.GetCurrentAsString$0());
      }
    },
    Options_SetNewSettings_closure: {
      "^": "Closure:2;$this",
      call$2: [function($name, s) {
        var t1 = this.$this._o;
        t1.$index(0, $name).Save$1(s);
        t1.$index(0, $name).SetCurrentFromString$1(s);
      }, null, null, 4, 0, null, 44, 29, "call"]
    },
    Options_AddSetting_closure: {
      "^": "Closure:2;$this,name",
      call$2: function(k, v) {
        if (!this.$this._o.containsKey$1(0, k))
          throw H.wrapException("missing setting " + H.S(k) + " in " + this.name);
      }
    }
  }], ["sprintf", "package:sprintf/sprintf.dart",, O, {
    "^": "",
    Formatter_get_padding: function(count, pad) {
      var padding, padding_piece, t1;
      padding = new P.StringBuffer("");
      for (padding_piece = pad; count > 0;) {
        if ((count & 1) === 1)
          padding._contents += H.S(padding_piece);
        count = C.JSInt_methods._shrOtherPositive$1(count, 1);
        padding_piece = H.S(padding_piece) + H.S(padding_piece);
      }
      t1 = padding._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Formatter: {
      "^": "Object;"
    },
    FloatFormatter: {
      "^": "Formatter;_arg,_digits,_exponent,_decimal,_is_negative,_fraction_is_negative,fmt_type,options",
      toString$0: function(_) {
        var t1, t2, ret, _exp, sig_digs, min_chars, str_len, padding;
        t1 = this.options;
        if (t1.$index(0, "add_space") && J.$eq$(t1.$index(0, "sign"), "") && this._arg >= 0)
          t1.$indexSet(0, "sign", " ");
        t2 = H.numTypeCast(this._arg);
        t2.toString;
        if (t2 == 1 / 0 || t2 == -1 / 0) {
          if (J.get$isNegative$n(t2))
            t1.$indexSet(0, "sign", "-");
          t1.$indexSet(0, "padding_char", " ");
          ret = "inf";
        } else
          ret = "";
        t2 = H.numTypeCast(this._arg);
        t2.toString;
        if (isNaN(t2)) {
          t1.$indexSet(0, "padding_char", " ");
          ret = "nan";
        }
        if (J.$eq$(t1.$index(0, "precision"), -1))
          t1.$indexSet(0, "precision", 6);
        else if (this.fmt_type === "g" && J.$eq$(t1.$index(0, "precision"), 0))
          t1.$indexSet(0, "precision", 1);
        t2 = this._arg;
        if (typeof t2 === "number") {
          if (this._is_negative)
            t1.$indexSet(0, "sign", "-");
          t2 = this.fmt_type;
          if (t2 === "e")
            ret = this.asExponential$2$remove_trailing_zeros(t1.$index(0, "precision"), false);
          else if (t2 === "f")
            ret = this.asFixed$2$remove_trailing_zeros(t1.$index(0, "precision"), false);
          else {
            _exp = this._exponent;
            sig_digs = t1.$index(0, "precision");
            if (-4 <= _exp && _exp < t1.$index(0, "precision")) {
              sig_digs = J.$sub$n(sig_digs, this._decimal);
              ret = this.asFixed$2$remove_trailing_zeros(P.max(J.$sub$n(J.$sub$n(t1.$index(0, "precision"), 1), _exp), sig_digs), !t1.$index(0, "alternate_form"));
            } else
              ret = this.asExponential$2$remove_trailing_zeros(J.$sub$n(t1.$index(0, "precision"), 1), !t1.$index(0, "alternate_form"));
          }
        }
        min_chars = t1.$index(0, "width");
        str_len = ret.length + J.get$length$asx(t1.$index(0, "sign"));
        t2 = J.getInterceptor$n(min_chars);
        if (t2.$gt(min_chars, str_len))
          padding = J.$eq$(t1.$index(0, "padding_char"), "0") && !t1.$index(0, "left_align") ? O.Formatter_get_padding(t2.$sub(min_chars, str_len), "0") : O.Formatter_get_padding(t2.$sub(min_chars, str_len), " ");
        else
          padding = "";
        if (t1.$index(0, "left_align"))
          ret = H.S(t1.$index(0, "sign")) + ret + padding;
        else
          ret = J.$eq$(t1.$index(0, "padding_char"), "0") ? H.S(t1.$index(0, "sign")) + padding + ret : padding + H.S(t1.$index(0, "sign")) + ret;
        return t1.$index(0, "is_upper") ? ret.toUpperCase() : ret;
      },
      asFixed$2$remove_trailing_zeros: function(precision, remove_trailing_zeros) {
        var t1, ret, offset, extra_zeroes, trailing_zeroes;
        t1 = this._digits;
        ret = C.JSArray_methods.fold$2(C.JSArray_methods.sublist$2(t1, 0, this._decimal), "", new O.FloatFormatter_asFixed_closure());
        offset = this._decimal;
        extra_zeroes = precision - (t1.length - offset);
        if (!remove_trailing_zeros) {
          if (extra_zeroes > 0)
            C.JSArray_methods.addAll$1(t1, O.Formatter_get_padding(extra_zeroes, "0").split(""));
          trailing_zeroes = C.JSArray_methods.fold$2(C.JSArray_methods.sublist$2(t1, offset, offset + precision), "", new O.FloatFormatter_asFixed_closure0());
          if (J.$eq$(J.get$length$asx(trailing_zeroes), 0))
            return ret;
          ret = H.S(ret) + "." + H.S(trailing_zeroes);
        }
        return ret;
      },
      asExponential$2$remove_trailing_zeros: function(precision, remove_trailing_zeros) {
        var offset, t1, ret, extra_zeroes, trailing_digits, _exp_str, i, nzeroes;
        offset = this._decimal - this._exponent;
        t1 = this._digits;
        ret = t1[offset - 1];
        extra_zeroes = precision - (t1.length - offset);
        if (extra_zeroes > 0)
          C.JSArray_methods.addAll$1(t1, O.Formatter_get_padding(extra_zeroes, "0").split(""));
        trailing_digits = C.JSArray_methods.sublist$2(t1, offset, offset + precision);
        t1 = this._exponent;
        t1.toString;
        _exp_str = C.JSNumber_methods.toString$0(Math.abs(t1));
        t1 = this._exponent;
        if (t1 < 10 && t1 > -10)
          _exp_str = "0" + _exp_str;
        _exp_str = t1 < 0 ? "e-" + _exp_str : "e+" + _exp_str;
        if (remove_trailing_zeros) {
          for (i = trailing_digits.length - 1, nzeroes = 0; i > 0; --i)
            if (J.$eq$(trailing_digits[i], "0"))
              ++nzeroes;
            else
              break;
          trailing_digits = C.JSArray_methods.sublist$2(trailing_digits, 0, trailing_digits.length - nzeroes);
        }
        if (trailing_digits.length > 0)
          ret += ".";
        return H.S(C.JSArray_methods.fold$2(trailing_digits, ret, new O.FloatFormatter_asExponential_closure())) + _exp_str;
      },
      FloatFormatter$3: function(_arg, fmt_type, options) {
        var t1, arg_str, m1, t2, t3, t4, leading_zeroes_match, zeroes_count, m2, t5;
        t1 = this._arg;
        if (t1 < 0) {
          this._is_negative = true;
          t1 = -t1;
          this._arg = t1;
        }
        arg_str = C.JSNumber_methods.toString$0(C.JSDouble_methods.toDouble$0(t1));
        m1 = $.$get$FloatFormatter__number_rx().firstMatch$1(arg_str);
        if (m1 != null) {
          t1 = m1._match;
          t2 = t1[1];
          t1 = t1[2];
          t3 = t2.length;
          this._decimal = t3;
          t4 = this._digits;
          C.JSArray_methods.addAll$1(t4, t2.split(""));
          C.JSArray_methods.addAll$1(t4, t1.split(""));
          if (t3 === 1)
            if (t2 === "0") {
              leading_zeroes_match = $.$get$FloatFormatter__leading_zeroes_rx().firstMatch$1(t1);
              if (leading_zeroes_match != null) {
                zeroes_count = leading_zeroes_match._match[1].length;
                this._exponent = zeroes_count > 0 ? -(zeroes_count + 1) : zeroes_count - 1;
              } else
                this._exponent = 0;
            } else
              this._exponent = 0;
          else
            this._exponent = t3 - 1;
        } else {
          m2 = $.$get$FloatFormatter__expo_rx().firstMatch$1(arg_str);
          if (m2 != null) {
            t1 = m2._match;
            t2 = t1[1];
            t3 = t1[2];
            t1 = H.Primitives_parseInt(t1[3], null, null);
            this._exponent = t1;
            t4 = this._digits;
            if (t1 > 0) {
              t5 = t3.length;
              this._decimal = t1 + 1;
              C.JSArray_methods.addAll$1(t4, t2.split(""));
              C.JSArray_methods.addAll$1(t4, t3.split(""));
              C.JSArray_methods.addAll$1(t4, O.Formatter_get_padding(t1 - t5 + 1, "0").split(""));
            } else {
              t5 = t2.length;
              this._decimal = t5;
              C.JSArray_methods.addAll$1(t4, O.Formatter_get_padding(t5 - t1 - 1, "0").split(""));
              C.JSArray_methods.addAll$1(t4, t2.split(""));
              C.JSArray_methods.addAll$1(t4, t3.split(""));
            }
          }
        }
      },
      static: {
        FloatFormatter$: function(_arg, fmt_type, options) {
          var t1 = new O.FloatFormatter(_arg, H.setRuntimeTypeInfo([], [P.String]), 0, 0, false, false, fmt_type, options);
          t1.FloatFormatter$3(_arg, fmt_type, options);
          return t1;
        }
      }
    },
    FloatFormatter_asFixed_closure: {
      "^": "Closure:2;",
      call$2: function(i, e) {
        return H.S(i) + H.S(e);
      }
    },
    FloatFormatter_asFixed_closure0: {
      "^": "Closure:2;",
      call$2: function(i, e) {
        return H.S(i) + H.S(e);
      }
    },
    FloatFormatter_asExponential_closure: {
      "^": "Closure:2;",
      call$2: function(i, e) {
        return H.S(i) + H.S(e);
      }
    },
    IntFormatter: {
      "^": "Formatter;_arg,fmt_type,options",
      toString$0: function(_) {
        var t1, radix, ret, prefix, min_digits, min_chars, num_length, sign_length, t2, str_len, padding;
        t1 = this.fmt_type;
        if (t1 === "x")
          radix = 16;
        else
          radix = t1 === "o" ? 8 : 10;
        t1 = this._arg;
        if (t1 < 0) {
          t1 = Math.abs(t1);
          this._arg = t1;
          if (radix === 10)
            this.options.$indexSet(0, "sign", "-");
          else
            this._arg = (18446744073709552e3 - C.JSNumber_methods.$mod(t1, 18446744073709552e3) + 1 & 18446744073709552e3) >>> 0;
        }
        ret = J.toRadixString$1$n(this._arg, radix);
        t1 = this.options;
        if (t1.$index(0, "alternate_form")) {
          if (radix === 16 && this._arg !== 0)
            prefix = "0x";
          else
            prefix = radix === 8 && this._arg !== 0 ? "0" : "";
          if (J.$eq$(t1.$index(0, "sign"), "+") && radix !== 10)
            t1.$indexSet(0, "sign", "");
        } else
          prefix = "";
        if (t1.$index(0, "add_space") && J.$eq$(t1.$index(0, "sign"), "") && this._arg > -1 && radix === 10)
          t1.$indexSet(0, "sign", " ");
        if (radix !== 10)
          t1.$indexSet(0, "sign", "");
        min_digits = t1.$index(0, "precision");
        min_chars = t1.$index(0, "width");
        num_length = ret.length;
        sign_length = J.get$length$asx(t1.$index(0, "sign"));
        if (radix === 8 && J.$le$n(min_chars, min_digits))
          num_length += prefix.length;
        t2 = J.getInterceptor$n(min_digits);
        if (t2.$gt(min_digits, num_length)) {
          ret = O.Formatter_get_padding(t2.$sub(min_digits, num_length), "0") + ret;
          num_length = ret.length;
        }
        str_len = num_length + sign_length + prefix.length;
        t2 = J.getInterceptor$n(min_chars);
        if (t2.$gt(min_chars, str_len))
          padding = J.$eq$(t1.$index(0, "padding_char"), "0") && !t1.$index(0, "left_align") ? O.Formatter_get_padding(t2.$sub(min_chars, str_len), "0") : O.Formatter_get_padding(t2.$sub(min_chars, str_len), " ");
        else
          padding = "";
        if (t1.$index(0, "left_align"))
          ret = H.S(t1.$index(0, "sign")) + prefix + ret + padding;
        else
          ret = J.$eq$(t1.$index(0, "padding_char"), "0") ? H.S(t1.$index(0, "sign")) + prefix + padding + ret : padding + H.S(t1.$index(0, "sign")) + prefix + ret;
        return t1.$index(0, "is_upper") ? ret.toUpperCase() : ret;
      }
    },
    StringFormatter: {
      "^": "Formatter;_arg,fmt_type,options",
      toString$0: function(_) {
        var ret, t1, diff, padding;
        ret = this._arg;
        t1 = this.options;
        if (J.$gt$n(t1.$index(0, "precision"), -1) && J.$le$n(t1.$index(0, "precision"), ret.length))
          ret = J.substring$2$s(ret, 0, t1.$index(0, "precision"));
        if (J.$gt$n(t1.$index(0, "width"), -1)) {
          diff = J.$sub$n(t1.$index(0, "width"), ret.length);
          if (diff > 0) {
            padding = O.Formatter_get_padding(diff, t1.$index(0, "padding_char"));
            ret = !t1.$index(0, "left_align") ? padding + ret : ret + padding;
          }
        }
        return ret;
      }
    },
    PrintFormat: {
      "^": "Object:35;_formatters",
      call$2: function(fmt, args) {
        var t1, t2, t3, t4, ret, offset, arg_offset, t5, t6, t7, t8, t9, t10, _options, t11, t12, _arg, arg_offset0, _arg_str;
        t1 = J.getInterceptor(args);
        if (!t1.$isList)
          throw H.wrapException(P.ArgumentError$("Expecting list as second argument"));
        t2 = $.$get$PrintFormat_specifier();
        t2.toString;
        H.checkString(fmt);
        H.checkInt(0);
        fmt.length;
        t2 = new H._AllMatchesIterator(t2, fmt, 0, null);
        t3 = J.getInterceptor$s(fmt);
        t4 = this._formatters;
        ret = "";
        offset = 0;
        arg_offset = 0;
        for (; t2.moveNext$0();) {
          t5 = t2.__js_helper$_current._match;
          t6 = t5[1];
          t7 = t5[2];
          t8 = t5[3];
          t9 = t5[4];
          t10 = t5[5];
          _options = P.LinkedHashMap__makeLiteral(["is_upper", false, "width", -1, "precision", -1, "length", -1, "radix", 10, "sign", "", "specifier_type", t10]);
          t11 = J.getInterceptor$asx(t7).indexOf$1(t7, "+") > -1 ? "+" : "";
          t12 = C.JSString_methods.indexOf$1(t7, "0") > -1 ? "0" : " ";
          P.LinkedHashMap__makeLiteral(["sign", t11, "padding_char", t12, "add_space", C.JSString_methods.indexOf$1(t7, " ") > -1, "left_align", C.JSString_methods.indexOf$1(t7, "-") > -1, "alternate_form", C.JSString_methods.indexOf$1(t7, "#") > -1]).forEach$1(0, new O.PrintFormat_call_closure(_options));
          _arg = t6 == null ? null : t1.$index(args, H.Primitives_parseInt(t6, null, null));
          t6 = t8 == null;
          if (!t6) {
            if (t8 === "*") {
              arg_offset0 = arg_offset + 1;
              t8 = t1.$index(args, arg_offset);
              arg_offset = arg_offset0;
            } else
              t8 = H.Primitives_parseInt(t8, null, null);
            _options.$indexSet(0, "width", t8);
          }
          t8 = t9 != null;
          if (t8) {
            if (t9 === "*") {
              arg_offset0 = arg_offset + 1;
              t9 = t1.$index(args, arg_offset);
              arg_offset = arg_offset0;
            } else
              t9 = H.Primitives_parseInt(t9, null, null);
            _options.$indexSet(0, "precision", t9);
          }
          if (_arg == null && t10 !== "%") {
            arg_offset0 = arg_offset + 1;
            _arg = t1.$index(args, arg_offset);
            arg_offset = arg_offset0;
          }
          t9 = $.$get$PrintFormat_uppercase_rx()._nativeRegExp;
          if (typeof t10 !== "string")
            H.throwExpression(H.argumentErrorValue(t10));
          _options.$indexSet(0, "is_upper", t9.test(t10));
          if (t10 === "%") {
            if (t7.length > 0 || !t6 || t8)
              throw H.wrapException(P.Exception_Exception('"%" does not take any flags'));
            _arg_str = "%";
          } else if (t4.containsKey$1(0, t10))
            _arg_str = J.toString$0$(t4.$index(0, t10).call$2(_arg, _options));
          else
            throw H.wrapException(P.ArgumentError$("Unknown format type " + H.S(t10)));
          ret += t3.substring$2(fmt, offset, t5.index);
          offset = t5.index + J.get$length$asx(t5[0]);
          ret = C.JSString_methods.$add(ret, _arg_str);
        }
        return ret + t3.substring$1(fmt, offset);
      },
      $isFunction: 1
    },
    closure0: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return new O.IntFormatter(arg, "i", options);
      }
    },
    closure1: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return new O.IntFormatter(arg, "d", options);
      }
    },
    closure2: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return new O.IntFormatter(arg, "x", options);
      }
    },
    closure3: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return new O.IntFormatter(arg, "x", options);
      }
    },
    closure4: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return new O.IntFormatter(arg, "o", options);
      }
    },
    closure5: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return new O.IntFormatter(arg, "o", options);
      }
    },
    closure6: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return O.FloatFormatter$(arg, "e", options);
      }
    },
    closure7: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return O.FloatFormatter$(arg, "e", options);
      }
    },
    closure8: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return O.FloatFormatter$(arg, "f", options);
      }
    },
    closure9: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return O.FloatFormatter$(arg, "f", options);
      }
    },
    closure10: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return O.FloatFormatter$(arg, "g", options);
      }
    },
    closure11: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        return O.FloatFormatter$(arg, "g", options);
      }
    },
    closure12: {
      "^": "Closure:2;",
      call$2: function(arg, options) {
        options.$indexSet(0, "padding_char", " ");
        return new O.StringFormatter(arg, "s", options);
      }
    },
    PrintFormat_call_closure: {
      "^": "Closure:2;_options",
      call$2: function($K, $V) {
        this._options.$indexSet(0, $K, $V);
      }
    }
  }], ["vector_math", "package:vector_math/vector_math.dart",, T, {
    "^": "",
    Vector3: {
      "^": "Object;storage",
      setValues$3: function(x_, y_, z_) {
        var t1 = this.storage;
        t1[0] = x_;
        t1[1] = y_;
        t1[2] = z_;
        return this;
      },
      toString$0: function(_) {
        var t1 = this.storage;
        return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
      },
      $negate: function(_) {
        var t1, t2, t3, t4;
        t1 = this.storage;
        t2 = t1[0];
        t3 = t1[1];
        t1 = t1[2];
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(-t2, -t3, -t1);
        return t4;
      },
      $sub: function(_, other) {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = this.storage;
        t2 = t1[0];
        t3 = other.storage;
        t4 = t3[0];
        t5 = t1[1];
        t6 = t3[1];
        t1 = t1[2];
        t3 = t3[2];
        t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t7.setValues$3(t2 - t4, t5 - t6, t1 - t3);
        return t7;
      },
      $add: function(_, other) {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = this.storage;
        t2 = t1[0];
        t3 = other.storage;
        t4 = t3[0];
        t5 = t1[1];
        t6 = t3[1];
        t1 = t1[2];
        t3 = t3[2];
        t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t7.setValues$3(t2 + t4, t5 + t6, t1 + t3);
        return t7;
      },
      $div: function(_, scale) {
        var o, t1, t2, t3, t4;
        o = 1 / scale;
        t1 = this.storage;
        t2 = t1[0];
        t3 = t1[1];
        t1 = t1[2];
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(t2 * o, t3 * o, t1 * o);
        return t4;
      },
      $mul: function(_, scale) {
        var t1, t2, t3, t4;
        t1 = this.storage;
        t2 = t1[0];
        t3 = t1[1];
        t1 = t1[2];
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(t2 * scale, t3 * scale, t1 * scale);
        return t4;
      },
      $index: function(_, i) {
        return this.storage[i];
      },
      get$length: function(_) {
        var t1, t2, t3;
        t1 = this.storage;
        t2 = t1[0];
        t3 = t1[1];
        t1 = t1[2];
        return Math.sqrt(H.checkNum(t2 * t2 + t3 * t3 + t1 * t1));
      },
      normalize$0: function(_) {
        var l, t1;
        l = this.get$length(this);
        if (l === 0)
          return this;
        l = 1 / l;
        t1 = this.storage;
        t1[0] = t1[0] * l;
        t1[1] = t1[1] * l;
        t1[2] = t1[2] * l;
        return this;
      },
      set$xyz: function(arg) {
        var t1, t2;
        t1 = this.storage;
        t2 = arg.storage;
        t1[0] = t2[0];
        t1[1] = t2[1];
        t1[2] = t2[2];
      },
      get$xyz: function() {
        var t1, t2, t3, t4;
        t1 = this.storage;
        t2 = t1[0];
        t3 = t1[1];
        t1 = t1[2];
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(t2, t3, t1);
        return t4;
      }
    }
  }], ["webutil", "webutil.dart",, R, {
    "^": "",
    _GetFullscreenProperty: function(p) {
      var out, t1, t2;
      out = [];
      for (t1 = $.$get$_gFullScreenMap(), t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
        out.push(t1.$index(0, t2.get$current()).$index(0, p));
      return out;
    },
    ToggleFullscreen: function() {
      var t1, e, t2, inFS, _i, f, t3;
      t1 = document.documentElement;
      if (t1 == null)
        H.throwExpression(P.ArgumentError$("object cannot be a num, string, bool, or null"));
      e = P._wrapToDart(P._convertToJS(t1));
      for (t1 = R._GetFullscreenProperty("l"), t2 = t1.length, inFS = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        f = t1[_i];
        e.toString;
        if (typeof f !== "string" && true)
          H.throwExpression(P.ArgumentError$("property is not a String or num"));
        if (f in e._jsObject && e.$index(0, f) != null)
          inFS = true;
      }
      if (!inFS)
        for (t1 = R._GetFullscreenProperty("r"), t2 = t1.length, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          f = t1[_i];
          e.toString;
          if (typeof f !== "string" && true)
            H.throwExpression(P.ArgumentError$("property is not a String or num"));
          if (f in e._jsObject) {
            e.callMethod$1(f);
            break;
          }
        }
      else
        for (t1 = R._GetFullscreenProperty("x"), t2 = t1.length, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          f = t1[_i];
          e.toString;
          if (typeof f !== "string" && true)
            H.throwExpression(P.ArgumentError$("property is not a String or num"));
          if (f in e._jsObject) {
            e.callMethod$1(f);
            break;
          }
        }
    },
    UpdateFrameCount: function(now, e, cb) {
      var t1, extra;
      t1 = $.gFrames + 1;
      $.gFrames = t1;
      if (now - $.gLastSample < 1000)
        return;
      $.gAverageFps = $.gAverageFps * 0.1 + 0.9 * (t1 * 1000 / 1000);
      extra = cb.call$0();
      e.textContent = C.JSString_methods.$add(C.JSNumber_methods.toStringAsFixed$1($.gAverageFps, 2) + "\n", extra);
      $.gFrames = 0;
      $.gLastSample = now;
    },
    HasWebGLSupport: function() {
      var t1, e, options, context, t2;
      t1 = document;
      e = t1.createElement("canvas");
      options = P.LinkedHashMap__makeLiteral(["alpha", true, "depth", true, "stencil", false, "antialias", true, "premultipliedAlpha", true, "preserveDrawingBuffer", false]);
      context = C.CanvasElement_methods.getContext$2(e, "webgl", options);
      if (context == null)
        context = C.CanvasElement_methods.getContext$2(e, "experimental-webgl", options);
      if (context == null)
        return false;
      t1 = new R.HasWebGLSupport_log(context);
      t1.call$2("max texture units:          ", 34930);
      t1.call$2("max vertex texture units:   ", 35660);
      t1.call$2("max texture size:           ", 3379);
      t1.call$2("max cube map texture size:  ", 34076);
      t1.call$2("compressed texture formats: ", 34467);
      t1 = new R.HasWebGLSupport_logp(context);
      t1.call$2("vertex shader precision:   ", 35633);
      t1.call$2("fragment shader precision: ", 35632);
      for (t1 = J.get$iterator$ax(context.getSupportedExtensions()); t1.moveNext$0();) {
        e = t1.get$current();
        window;
        t2 = "Extension " + H.S(e);
        if (typeof console != "undefined")
          console.info(t2);
      }
      return true;
    },
    HasWebGLSupport_log: {
      "^": "Closure:16;gl",
      call$2: function(s, param) {
        var val, t1;
        val = this.gl.getParameter(param);
        window;
        t1 = s + H.S(val);
        if (typeof console != "undefined")
          console.info(t1);
      }
    },
    HasWebGLSupport_logp: {
      "^": "Closure:16;gl",
      call$2: function(s, param) {
        var t1, fh, fm, fl, t2, ih, im, il;
        t1 = this.gl;
        fh = t1.getShaderPrecisionFormat(param, 36338);
        fm = t1.getShaderPrecisionFormat(param, 36337);
        fl = t1.getShaderPrecisionFormat(param, 36336);
        window;
        t2 = s + ("[fp] " + H.S(fh.precision) + "  " + H.S(fm.precision) + " " + H.S(fl.precision));
        if (typeof console != "undefined")
          console.info(t2);
        ih = t1.getShaderPrecisionFormat(param, 36341);
        im = t1.getShaderPrecisionFormat(param, 36340);
        il = t1.getShaderPrecisionFormat(param, 36339);
        window;
        t1 = s + ("[int] " + H.S(ih.rangeMax) + "  " + H.S(im.rangeMax) + " " + H.S(il.rangeMax));
        if (typeof console != "undefined")
          console.info(t1);
      }
    }
  }], ["pc_shaders", "shaders.dart",, D, {
    "^": ""
  }]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.set$href$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$href(receiver, value);
  };
  J.set$type$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$type(receiver, value);
  };
  J.get$attributes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$attributes(receiver);
  };
  J.get$defaultValue$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$defaultValue(receiver);
  };
  J.get$deltaY$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$deltaY(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$isNegative$n = function(receiver) {
    return J.getInterceptor$n(receiver).get$isNegative(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$name$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$name(receiver);
  };
  J.get$tagName$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$tagName(receiver);
  };
  J.get$type$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$type(receiver);
  };
  J.$add$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ns(receiver).$add(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$le$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver <= a0;
    return J.getInterceptor$n(receiver).$le(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.$negate$n = function(receiver) {
    if (typeof receiver == "number")
      return -receiver;
    return J.getInterceptor$n(receiver).$negate(receiver);
  };
  J.$sub$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver - a0;
    return J.getInterceptor$n(receiver).$sub(receiver, a0);
  };
  J.addAll$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.cancel$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).cancel$0(receiver);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.map$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).map$1(receiver, a0);
  };
  J.matchAsPrefix$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
  };
  J.remove$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).remove$0(receiver);
  };
  J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
  };
  J.send$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).send$1(receiver, a0);
  };
  J.setInnerHtml$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).setInnerHtml$1(receiver, a0);
  };
  J.startsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
  };
  J.substring$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).substring$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.toLowerCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
  };
  J.toRadixString$1$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
  };
  J.toUpperCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.get$runtimeType$ = function(receiver) {
    return J.getInterceptor(receiver).get$runtimeType(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.noSuchMethod$1$ = function(receiver, a0) {
    return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.BodyElement_methods = W.BodyElement.prototype;
  C.CanvasElement_methods = W.CanvasElement.prototype;
  C.HttpRequest_methods = W.HttpRequest.prototype;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSDouble_methods = J.JSDouble.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.NativeFloat32List_methods = H.NativeFloat32List.prototype;
  C.NodeList_methods = W.NodeList.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.RenderingContext_methods = P.RenderingContext.prototype;
  C.TableElement_methods = W.TableElement.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.Window_methods = W.Window.prototype;
  C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C__DelayedDone = new P._DelayedDone();
  C.C__RootZone = new P._RootZone();
  C.Duration_0 = new P.Duration(0);
  C.Duration_4000000 = new P.Duration(4000000);
  C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
  C.EventStreamProvider_contextmenu = H.setRuntimeTypeInfo(new W.EventStreamProvider("contextmenu"), [W.MouseEvent]);
  C.EventStreamProvider_dragstart = H.setRuntimeTypeInfo(new W.EventStreamProvider("dragstart"), [W.MouseEvent]);
  C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.ProgressEvent]);
  C.EventStreamProvider_keydown = H.setRuntimeTypeInfo(new W.EventStreamProvider("keydown"), [W.KeyboardEvent]);
  C.EventStreamProvider_keyup = H.setRuntimeTypeInfo(new W.EventStreamProvider("keyup"), [W.KeyboardEvent]);
  C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.Event]);
  C.EventStreamProvider_load0 = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.ProgressEvent]);
  C.EventStreamProvider_mousedown = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousedown"), [W.MouseEvent]);
  C.EventStreamProvider_mousemove = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousemove"), [W.MouseEvent]);
  C.EventStreamProvider_mouseup = H.setRuntimeTypeInfo(new W.EventStreamProvider("mouseup"), [W.MouseEvent]);
  C.EventStreamProvider_mousewheel = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousewheel"), [W.WheelEvent]);
  C.EventStreamProvider_resize = H.setRuntimeTypeInfo(new W.EventStreamProvider("resize"), [W.Event]);
  C.EventStreamProvider_touchmove = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchmove"), [W.TouchEvent]);
  C.EventStreamProvider_touchstart = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchstart"), [W.TouchEvent]);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.List_2Zi = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
  C.List_ego = Isolate.makeConstantList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]);
  C.List_empty = Isolate.makeConstantList([]);
  C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
  C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
  C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.Symbol]);
  C.Map_empty = H.setRuntimeTypeInfo(new H.ConstantStringMap(0, {}, C.List_empty0), [P.Symbol, null]);
  C.Symbol_call = new H.Symbol0("call");
  C.Type_InputElement_tgj = H.createRuntimeType("InputElement");
  C.Type_Null_Yyn = H.createRuntimeType("Null");
  C._CustomEventStreamProvider__determineMouseWheelEventType = H.setRuntimeTypeInfo(new W._CustomEventStreamProvider(W.html_Element__determineMouseWheelEventType$closure()), [W.WheelEvent]);
  $.Primitives_mirrorFunctionCacheName = "$cachedFunction";
  $.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $.ChronosGL_globalGL = null;
  $.ChronosGL_useElementIndexUint = false;
  $.clientX = 0;
  $.clientY = 0;
  $.mouseX = 0;
  $.mouseY = 0;
  $.mouseDownX = 0;
  $.mouseDownY = 0;
  $.skipDefaultMouseMoveListener = false;
  $.Key_LEFT = 37;
  $.Key_RIGHT = 39;
  $.Key_UP = 38;
  $.Key_DOWN = 40;
  $.Key_SPACE = 32;
  $.Matrix4_POSX = 12;
  $.Matrix4_POSY = 13;
  $.Matrix4_POSZ = 14;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Expando__keyCount = 0;
  $.Element__parseDocument = null;
  $.Element__parseRange = null;
  $.Element__defaultValidator = null;
  $.Element__defaultSanitizer = null;
  $.gOptions = null;
  $.gLogLevel = 0;
  $._SphereV = "  vec3 u = normalize(vec3(uModelViewMatrix * vec4(aVertexPosition, 1.0)));\n  vec3 n = normalize(uNormalMatrix * aNormal );\n  vec3 r = reflect( u, n );\n  r.z += 1.0;\n  float m = 2.0 * length(r);\n  vTextureCoordinates = vec2(r.x/m + 0.5, r.y/m + 0.5);\n";
  $.gFrames = 0;
  $.gLastSample = 0;
  $.gAverageFps = 1;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash]($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "IsolateNatives_thisScript", "$get$IsolateNatives_thisScript", function() {
    return H.IsolateNatives_computeThisScript();
  }, "IsolateNatives_thisScript", "IsolateNatives_workerIds", "$get$IsolateNatives_workerIds", function() {
    if (typeof WeakMap == "function")
      var t1 = new WeakMap();
    else {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      t1 = "expando$key$" + t1;
    }
    return H.setRuntimeTypeInfo(new P.Expando(null, t1), [P.$int]);
  }, "IsolateNatives_workerIds", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "currentlyPressedKeys", "$get$currentlyPressedKeys", function() {
    return H.JsLinkedHashMap_JsLinkedHashMap$es6(P.$int, P.bool);
  }, "currentlyPressedKeys", "currentlyPressedMouseButtons", "$get$currentlyPressedMouseButtons", function() {
    return H.JsLinkedHashMap_JsLinkedHashMap$es6(P.String, P.bool);
  }, "currentlyPressedMouseButtons", "Texture__cache", "$get$Texture__cache", function() {
    return [];
  }, "Texture__cache", "_VarsDb", "$get$_VarsDb", function() {
    return P.LinkedHashMap__makeLiteral(["aColors", new V.ShaderVarDesc("vec3", "per vertex color"), "aVertexPosition", new V.ShaderVarDesc("vec3", "vertex coordinates"), "aTextureCoordinates", new V.ShaderVarDesc("vec2", "texture uvs"), "aNormal", new V.ShaderVarDesc("vec3", "vertex normals"), "aBinormal", new V.ShaderVarDesc("vec3", "vertex binormals"), "aCenter", new V.ShaderVarDesc("vec4", "for wireframe"), "iaRotation", new V.ShaderVarDesc("vec4", ""), "iaTranslation", new V.ShaderVarDesc("vec3", ""), "iaScale", new V.ShaderVarDesc("vec3", ""), "vColors", new V.ShaderVarDesc("vec3", "per vertex color"), "vTextureCoordinates", new V.ShaderVarDesc("vec2", ""), "vLightWeighting", new V.ShaderVarDesc("vec3", ""), "vNormal", new V.ShaderVarDesc("vec3", ""), "vVertexPosition", new V.ShaderVarDesc("vec3", "vertex coordinates"), "vCenter", new V.ShaderVarDesc("vec4", "for wireframe"), "uTransformationMatrix", new V.ShaderVarDesc("mat4", ""), "uModelViewMatrix", new V.ShaderVarDesc("mat4", ""), "uViewMatrix", new V.ShaderVarDesc("mat4", ""), "uNormalMatrix", new V.ShaderVarDesc("mat3", ""), "uPerpectiveMatrix", new V.ShaderVarDesc("mat4", ""), "uTextureSampler", new V.ShaderVarDesc("sampler2D", ""), "uTexture2Sampler", new V.ShaderVarDesc("sampler2D", ""), "uTexture3Sampler", new V.ShaderVarDesc("sampler2D", ""), "uTexture4Sampler", new V.ShaderVarDesc("sampler2D", ""), "uTextureCubeSampler", new V.ShaderVarDesc("samplerCube", ""), "uTime", new V.ShaderVarDesc("float", "time since program start in sec"), "uCameraNear", new V.ShaderVarDesc("float", ""), "uCameraFar", new V.ShaderVarDesc("float", ""), "uFogNear", new V.ShaderVarDesc("float", ""), "uFogFar", new V.ShaderVarDesc("float", ""), "uPointSize", new V.ShaderVarDesc("float", ""), "uCanvasSize", new V.ShaderVarDesc("vec2", ""), "uColor", new V.ShaderVarDesc("vec3", ""), "uColorAlpha", new V.ShaderVarDesc("vec4", ""), "uColorAlpha2", new V.ShaderVarDesc("vec4", ""), "uEyePosition", new V.ShaderVarDesc("vec3", ""), "uMaterial", new V.ShaderVarDesc("mat4", ""), "uLightSourceInfo0", new V.ShaderVarDesc("mat4", ""), "uLightSourceInfo1", new V.ShaderVarDesc("mat4", ""), "uLightSourceInfo2", new V.ShaderVarDesc("mat4", ""), "uLightSourceInfo3", new V.ShaderVarDesc("mat4", "")]);
  }, "_VarsDb", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
    return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], null);
  }, "_Html5NodeValidator__allowedElements", "_Html5NodeValidator__attributeValidators", "$get$_Html5NodeValidator__attributeValidators", function() {
    return P.LinkedHashMap__makeEmpty();
  }, "_Html5NodeValidator__attributeValidators", "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartObject");
  }, "_DART_OBJECT_PROPERTY_NAME", "_dartProxyCtor", "$get$_dartProxyCtor", function() {
    return function DartObject(o) {
      this.o = o;
    };
  }, "_dartProxyCtor", "hotCornerMap", "$get$hotCornerMap", function() {
    return [0, 1, 1, 3, 1, 3, 2, 4, 1, 2, 3, 4, 3, 4, 4, 3, 1, 3, 2, 4, 2, 4, 6, 12, 2, 5, 5, 11, 5, 10, 7, 4, 1, 2, 3, 4, 2, 5, 5, 10, 2, 6, 4, 12, 5, 7, 11, 4, 3, 4, 4, 3, 5, 11, 7, 4, 5, 7, 10, 4, 8, 14, 14, 3, 1, 2, 2, 5, 3, 4, 5, 11, 2, 6, 5, 7, 4, 12, 10, 4, 3, 4, 5, 10, 4, 3, 7, 4, 5, 7, 8, 14, 11, 4, 14, 3, 2, 6, 5, 7, 5, 7, 8, 14, 6, 9, 7, 15, 7, 15, 14, 13, 4, 12, 11, 4, 10, 4, 14, 3, 7, 15, 14, 13, 14, 13, 2, 1, 1, 2, 2, 5, 2, 5, 6, 7, 3, 5, 4, 10, 4, 11, 12, 4, 2, 5, 6, 7, 6, 7, 9, 15, 5, 8, 7, 14, 7, 14, 15, 13, 3, 5, 4, 11, 5, 8, 7, 14, 4, 7, 3, 4, 10, 14, 4, 3, 4, 10, 12, 4, 7, 14, 15, 13, 11, 14, 4, 3, 14, 2, 13, 1, 3, 5, 5, 8, 4, 10, 7, 14, 4, 7, 11, 14, 3, 4, 4, 3, 4, 11, 7, 14, 12, 4, 15, 13, 10, 14, 14, 2, 4, 3, 13, 1, 4, 7, 10, 14, 11, 14, 14, 2, 12, 15, 4, 13, 4, 13, 3, 1, 3, 4, 4, 3, 4, 3, 13, 1, 4, 13, 3, 1, 3, 1, 1, 0];
  }, "hotCornerMap", "configClass", "$get$configClass", function() {
    return [[0, 0], [3, 1, 0, 1, 2], [6, 2, 0, 1, 2, 3, 4, 5], [4, 2, 0, 1, 2, 0, 2, 3], [5, 3, 0, 1, 4, 1, 3, 4, 1, 2, 3], [7, 3, 0, 1, 2, 0, 2, 3, 4, 5, 6], [9, 3, 0, 1, 2, 3, 4, 5, 6, 7, 8], [8, 4, 0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7], [8, 4, 0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7], [12, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [6, 4, 0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3], [6, 4, 0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2], [6, 4, 0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3], [6, 4, 0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5], [7, 5, 0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6], [9, 5, 0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8]];
  }, "configClass", "vertexData", "$get$vertexData", function() {
    return [[], [25089, 20738, 13060], [25089, 8981, 16659], [20738, 13060, 8981, 16659], [20738, 16931, 4902], [13060, 25089, 16931, 4902], [25089, 8981, 16659, 20738, 16931, 4902], [16931, 4902, 13060, 8981, 16659], [16659, 33591, 16931], [25089, 20738, 13060, 16931, 16659, 33591], [25089, 8981, 33591, 16931], [20738, 13060, 8981, 33591, 16931], [20738, 16659, 33591, 4902], [16659, 33591, 4902, 13060, 25089], [25089, 8981, 33591, 4902, 20738], [13060, 8981, 33591, 4902], [13060, 4422, 8773], [25089, 20738, 4422, 8773], [25089, 8981, 16659, 13060, 4422, 8773], [8981, 16659, 20738, 4422, 8773], [20738, 16931, 4902, 13060, 4422, 8773], [4422, 8773, 25089, 16931, 4902], [13060, 4422, 8773, 25089, 8981, 16659, 20738, 16931, 4902], [16931, 4902, 4422, 8773, 8981, 16659], [16931, 16659, 33591, 13060, 4422, 8773], [25089, 20738, 4422, 8773, 16931, 16659, 33591], [16931, 25089, 8981, 33591, 13060, 4422, 8773], [16931, 33591, 8981, 8773, 4422, 20738], [20738, 16659, 33591, 4902, 13060, 4422, 8773], [16659, 33591, 4902, 4422, 8773, 25089], [25089, 8981, 33591, 4902, 20738, 13060, 4422, 8773], [8773, 8981, 33591, 4902, 4422], [8981, 8773, 33111], [25089, 20738, 13060, 8981, 8773, 33111], [16659, 25089, 8773, 33111], [8773, 33111, 16659, 20738, 13060], [20738, 16931, 4902, 8981, 8773, 33111], [25089, 16931, 4902, 13060, 8981, 8773, 33111], [25089, 8773, 33111, 16659, 20738, 16931, 4902], [16931, 4902, 13060, 8773, 33111, 16659], [16931, 16659, 33591, 8981, 8773, 33111], [25089, 20738, 13060, 16931, 16659, 33591, 8981, 8773, 33111], [33591, 16931, 25089, 8773, 33111], [20738, 13060, 8773, 33111, 33591, 16931], [20738, 16659, 33591, 4902, 8981, 8773, 33111], [16659, 33591, 4902, 13060, 25089, 8981, 8773, 33111], [20738, 4902, 33591, 33111, 8773, 25089], [33111, 33591, 4902, 13060, 8773], [8981, 13060, 4422, 33111], [25089, 20738, 4422, 33111, 8981], [13060, 4422, 33111, 16659, 25089], [16659, 20738, 4422, 33111], [8981, 13060, 4422, 33111, 20738, 16931, 4902], [4902, 16931, 25089, 8981, 33111, 4422], [13060, 4422, 33111, 16659, 25089, 20738, 16931, 4902], [4902, 4422, 33111, 16659, 16931], [8981, 13060, 4422, 33111, 16931, 16659, 33591], [25089, 20738, 4422, 33111, 8981, 16931, 16659, 33591], [13060, 4422, 33111, 33591, 16931, 25089], [16931, 20738, 4422, 33111, 33591], [8981, 13060, 4422, 33111, 20738, 16659, 33591, 4902], [25089, 16659, 33591, 4902, 4422, 33111, 8981], [25089, 13060, 4422, 33111, 33591, 4902, 20738], [4902, 4422, 33111, 33591], [4902, 33383, 4422], [25089, 20738, 13060, 4902, 33383, 4422], [25089, 8981, 16659, 4902, 33383, 4422], [20738, 13060, 8981, 16659, 4902, 33383, 4422], [20738, 16931, 33383, 4422], [13060, 25089, 16931, 33383, 4422], [20738, 16931, 33383, 4422, 25089, 8981, 16659], [4422, 33383, 16931, 16659, 8981, 13060], [16659, 33591, 16931, 4902, 33383, 4422], [25089, 20738, 13060, 16931, 16659, 33591, 4902, 33383, 4422], [25089, 8981, 33591, 16931, 4902, 33383, 4422], [20738, 13060, 8981, 33591, 16931, 4902, 33383, 4422], [33383, 4422, 20738, 16659, 33591], [25089, 16659, 33591, 33383, 4422, 13060], [25089, 8981, 33591, 33383, 4422, 20738], [4422, 13060, 8981, 33591, 33383], [13060, 4902, 33383, 8773], [4902, 33383, 8773, 25089, 20738], [13060, 4902, 33383, 8773, 25089, 8981, 16659], [4902, 33383, 8773, 8981, 16659, 20738], [20738, 16931, 33383, 8773, 13060], [25089, 16931, 33383, 8773], [20738, 16931, 33383, 8773, 13060, 25089, 8981, 16659], [16659, 16931, 33383, 8773, 8981], [13060, 4902, 33383, 8773, 16931, 16659, 33591], [4902, 33383, 8773, 25089, 20738, 16931, 16659, 33591], [13060, 4902, 33383, 8773, 16931, 25089, 8981, 33591], [20738, 4902, 33383, 8773, 8981, 33591, 16931], [13060, 8773, 33383, 33591, 16659, 20738], [33591, 33383, 8773, 25089, 16659], [20738, 25089, 8981, 33591, 33383, 8773, 13060], [8981, 33591, 33383, 8773], [8981, 8773, 33111, 4902, 33383, 4422], [25089, 20738, 13060, 8981, 8773, 33111, 4902, 33383, 4422], [25089, 8773, 33111, 16659, 4902, 33383, 4422], [8773, 33111, 16659, 20738, 13060, 4902, 33383, 4422], [16931, 33383, 4422, 20738, 8981, 8773, 33111], [13060, 25089, 16931, 33383, 4422, 8981, 8773, 33111], [16931, 33383, 4422, 20738, 25089, 8773, 33111, 16659], [13060, 8773, 33111, 16659, 16931, 33383, 4422], [16931, 16659, 33591, 8981, 8773, 33111, 4902, 33383, 4422], [25089, 20738, 13060, 16931, 16659, 33591, 8981, 8773, 33111, 4902, 33383, 4422], [33591, 16931, 25089, 8773, 33111, 4902, 33383, 4422], [16931, 20738, 13060, 8773, 33111, 33591, 4902, 33383, 4422], [33383, 4422, 20738, 16659, 33591, 8981, 8773, 33111], [25089, 16659, 33591, 33383, 4422, 13060, 8981, 8773, 33111], [33591, 33383, 4422, 20738, 25089, 8773, 33111], [13060, 8773, 33111, 33591, 33383, 4422], [33111, 8981, 13060, 4902, 33383], [33383, 33111, 8981, 25089, 20738, 4902], [33383, 4902, 13060, 25089, 16659, 33111], [33383, 33111, 16659, 20738, 4902], [20738, 16931, 33383, 33111, 8981, 13060], [8981, 25089, 16931, 33383, 33111], [13060, 20738, 16931, 33383, 33111, 16659, 25089], [16659, 16931, 33383, 33111], [33111, 8981, 13060, 4902, 33383, 16931, 16659, 33591], [33111, 8981, 25089, 20738, 4902, 33383, 16931, 16659, 33591], [33111, 33591, 16931, 25089, 13060, 4902, 33383], [20738, 4902, 33383, 33111, 33591, 16931], [33383, 33111, 8981, 13060, 20738, 16659, 33591], [25089, 16659, 33591, 33383, 33111, 8981], [25089, 13060, 20738, 33591, 33383, 33111], [33591, 33383, 33111], [33591, 33111, 33383], [25089, 20738, 13060, 33591, 33111, 33383], [25089, 8981, 16659, 33591, 33111, 33383], [20738, 13060, 8981, 16659, 33591, 33111, 33383], [20738, 16931, 4902, 33591, 33111, 33383], [25089, 16931, 4902, 13060, 33591, 33111, 33383], [25089, 8981, 16659, 20738, 16931, 4902, 33591, 33111, 33383], [16931, 4902, 13060, 8981, 16659, 33591, 33111, 33383], [16659, 33111, 33383, 16931], [16931, 16659, 33111, 33383, 25089, 20738, 13060], [33111, 33383, 16931, 25089, 8981], [13060, 8981, 33111, 33383, 16931, 20738], [4902, 20738, 16659, 33111, 33383], [33111, 16659, 25089, 13060, 4902, 33383], [4902, 20738, 25089, 8981, 33111, 33383], [33383, 4902, 13060, 8981, 33111], [13060, 4422, 8773, 33591, 33111, 33383], [25089, 20738, 4422, 8773, 33591, 33111, 33383], [25089, 8981, 16659, 13060, 4422, 8773, 33591, 33111, 33383], [8981, 16659, 20738, 4422, 8773, 33591, 33111, 33383], [20738, 16931, 4902, 13060, 4422, 8773, 33591, 33111, 33383], [4422, 8773, 25089, 16931, 4902, 33591, 33111, 33383], [25089, 8981, 16659, 20738, 16931, 4902, 13060, 4422, 8773, 33591, 33111, 33383], [16659, 16931, 4902, 4422, 8773, 8981, 33591, 33111, 33383], [16931, 16659, 33111, 33383, 13060, 4422, 8773], [25089, 20738, 4422, 8773, 16931, 16659, 33111, 33383], [33111, 33383, 16931, 25089, 8981, 13060, 4422, 8773], [8981, 33111, 33383, 16931, 20738, 4422, 8773], [4902, 20738, 16659, 33111, 33383, 13060, 4422, 8773], [4902, 4422, 8773, 25089, 16659, 33111, 33383], [20738, 25089, 8981, 33111, 33383, 4902, 13060, 4422, 8773], [4902, 4422, 8773, 8981, 33111, 33383], [8981, 8773, 33383, 33591], [8981, 8773, 33383, 33591, 25089, 20738, 13060], [16659, 25089, 8773, 33383, 33591], [20738, 16659, 33591, 33383, 8773, 13060], [8981, 8773, 33383, 33591, 20738, 16931, 4902], [25089, 16931, 4902, 13060, 33591, 8981, 8773, 33383], [16659, 25089, 8773, 33383, 33591, 20738, 16931, 4902], [16659, 16931, 4902, 13060, 8773, 33383, 33591], [8981, 8773, 33383, 16931, 16659], [8981, 8773, 33383, 16931, 16659, 25089, 20738, 13060], [25089, 8773, 33383, 16931], [13060, 8773, 33383, 16931, 20738], [20738, 16659, 8981, 8773, 33383, 4902], [16659, 8981, 8773, 33383, 4902, 13060, 25089], [20738, 25089, 8773, 33383, 4902], [13060, 8773, 33383, 4902], [33383, 33591, 8981, 13060, 4422], [20738, 4422, 33383, 33591, 8981, 25089], [13060, 4422, 33383, 33591, 16659, 25089], [33591, 16659, 20738, 4422, 33383], [33383, 33591, 8981, 13060, 4422, 20738, 16931, 4902], [4422, 33383, 33591, 8981, 25089, 16931, 4902], [33383, 33591, 16659, 25089, 13060, 4422, 20738, 16931, 4902], [16659, 16931, 4902, 4422, 33383, 33591], [13060, 8981, 16659, 16931, 33383, 4422], [8981, 25089, 20738, 4422, 33383, 16931, 16659], [4422, 33383, 16931, 25089, 13060], [20738, 4422, 33383, 16931], [33383, 4902, 20738, 16659, 8981, 13060, 4422], [25089, 16659, 8981, 4902, 4422, 33383], [25089, 13060, 4422, 33383, 4902, 20738], [4902, 4422, 33383], [4902, 33591, 33111, 4422], [33591, 33111, 4422, 4902, 25089, 20738, 13060], [33591, 33111, 4422, 4902, 25089, 8981, 16659], [16659, 20738, 13060, 8981, 4902, 33591, 33111, 4422], [33591, 33111, 4422, 20738, 16931], [25089, 16931, 33591, 33111, 4422, 13060], [33591, 33111, 4422, 20738, 16931, 25089, 8981, 16659], [16931, 33591, 33111, 4422, 13060, 8981, 16659], [16931, 16659, 33111, 4422, 4902], [16931, 16659, 33111, 4422, 4902, 25089, 20738, 13060], [4422, 33111, 8981, 25089, 16931, 4902], [16931, 20738, 13060, 8981, 33111, 4422, 4902], [16659, 33111, 4422, 20738], [25089, 16659, 33111, 4422, 13060], [8981, 33111, 4422, 20738, 25089], [8981, 33111, 4422, 13060], [8773, 13060, 4902, 33591, 33111], [25089, 8773, 33111, 33591, 4902, 20738], [8773, 13060, 4902, 33591, 33111, 25089, 8981, 16659], [8773, 8981, 16659, 20738, 4902, 33591, 33111], [16931, 33591, 33111, 8773, 13060, 20738], [33111, 8773, 25089, 16931, 33591], [8773, 13060, 20738, 16931, 33591, 33111, 16659, 25089, 8981], [16931, 33591, 33111, 8773, 8981, 16659], [16659, 33111, 8773, 13060, 4902, 16931], [4902, 16931, 16659, 33111, 8773, 25089, 20738], [33111, 8773, 13060, 4902, 16931, 25089, 8981], [20738, 4902, 16931, 8981, 33111, 8773], [13060, 20738, 16659, 33111, 8773], [16659, 33111, 8773, 25089], [20738, 25089, 8981, 33111, 8773, 13060], [8981, 33111, 8773], [4422, 4902, 33591, 8981, 8773], [4422, 4902, 33591, 8981, 8773, 25089, 20738, 13060], [25089, 8773, 4422, 4902, 33591, 16659], [8773, 4422, 4902, 33591, 16659, 20738, 13060], [20738, 4422, 8773, 8981, 33591, 16931], [4422, 13060, 25089, 16931, 33591, 8981, 8773], [33591, 16659, 25089, 8773, 4422, 20738, 16931], [16931, 33591, 16659, 13060, 8773, 4422], [16659, 8981, 8773, 4422, 4902, 16931], [4422, 4902, 16931, 16659, 8981, 8773, 25089, 20738, 13060], [4902, 16931, 25089, 8773, 4422], [16931, 20738, 13060, 8773, 4422, 4902], [8773, 4422, 20738, 16659, 8981], [16659, 8981, 8773, 4422, 13060, 25089], [25089, 8773, 4422, 20738], [13060, 8773, 4422], [13060, 4902, 33591, 8981], [20738, 4902, 33591, 8981, 25089], [25089, 13060, 4902, 33591, 16659], [20738, 4902, 33591, 16659], [16931, 33591, 8981, 13060, 20738], [25089, 16931, 33591, 8981], [13060, 20738, 16931, 33591, 16659, 25089], [16659, 16931, 33591], [16659, 8981, 13060, 4902, 16931], [4902, 16931, 16659, 8981, 25089, 20738], [13060, 4902, 16931, 25089], [20738, 4902, 16931], [20738, 16659, 8981, 13060], [25089, 16659, 8981], [25089, 13060, 20738], []];
  }, "vertexData", "gFps", "$get$gFps", function() {
    return W.querySelector("#fps");
  }, "gFps", "_kOptionTypeMap", "$get$_kOptionTypeMap", function() {
    return P.LinkedHashMap__makeLiteral(["B", "checkbox", "I", "number", "D", "number", "O", "text", "S", "text"]);
  }, "_kOptionTypeMap", "sprintf", "$get$sprintf", function() {
    return new O.PrintFormat(P.LinkedHashMap__makeLiteral(["i", new O.closure0(), "d", new O.closure1(), "x", new O.closure2(), "X", new O.closure3(), "o", new O.closure4(), "O", new O.closure5(), "e", new O.closure6(), "E", new O.closure7(), "f", new O.closure8(), "F", new O.closure9(), "g", new O.closure10(), "G", new O.closure11(), "s", new O.closure12()]));
  }, "sprintf", "FloatFormatter__number_rx", "$get$FloatFormatter__number_rx", function() {
    return P.RegExp_RegExp("^[\\-\\+]?(\\d+)\\.(\\d+)$", true, false);
  }, "FloatFormatter__number_rx", "FloatFormatter__expo_rx", "$get$FloatFormatter__expo_rx", function() {
    return P.RegExp_RegExp("^[\\-\\+]?(\\d)\\.(\\d+)e([\\-\\+]?\\d+)$", true, false);
  }, "FloatFormatter__expo_rx", "FloatFormatter__leading_zeroes_rx", "$get$FloatFormatter__leading_zeroes_rx", function() {
    return P.RegExp_RegExp("^(0*)[1-9]+", true, false);
  }, "FloatFormatter__leading_zeroes_rx", "PrintFormat_specifier", "$get$PrintFormat_specifier", function() {
    return P.RegExp_RegExp("%(?:(\\d+)\\$)?([\\+\\-\\#0 ]*)(\\d+|\\*)?(?:\\.(\\d+|\\*))?([a-z%])", false, false);
  }, "PrintFormat_specifier", "PrintFormat_uppercase_rx", "$get$PrintFormat_uppercase_rx", function() {
    return P.RegExp_RegExp("[A-Z]", true, false);
  }, "PrintFormat_uppercase_rx", "_gFullScreenMap", "$get$_gFullScreenMap", function() {
    return P.LinkedHashMap__makeLiteral(["std", P.LinkedHashMap__makeLiteral(["r", "requestFullscreen", "x", "exitFullscreen", "e", "fullscreenEnabled", "l", "fullscreenElement"]), "ms", P.LinkedHashMap__makeLiteral(["r", "msRequestFullscreen", "x", "msExitFullscreen", "e", "msFullscreenEnabled", "l", "msFullscreenElement"]), "webkit", P.LinkedHashMap__makeLiteral(["r", "webkitRequestFullscreen", "x", "webkitExitFullscreen", "e", "webkitFullscreenEnabled", "l", "webkitFullscreenElement"]), "moz", P.LinkedHashMap__makeLiteral(["r", "mozRequestFullScreen", "x", "mozCancelFullScreen", "e", "mozFullScreenEnabled", "l", "mozFullScreenElement"])]);
  }, "_gFullScreenMap"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = ["e", null, "value", "error", "stackTrace", "_", "element", "now", "x", "elapsedMs", "invocation", "event", "attributeName", "context", "o", "timeNow", "isolate", "list", "object", "arg1", "arg2", "data", "theError", "theStackTrace", "arg3", "arg4", "arg", "parameter", "each", "s", "callback", "captureThis", "self", "arguments", "sender", "elapsed", "time", "ev", "attr", "closure", "dummy", "dict", "postCreate", "p", "name", "numberOfArguments"];
  init.types = [{func: 1}, {func: 1, args: [,]}, {func: 1, args: [,,]}, {func: 1, v: true}, {func: 1, args: [W.MouseEvent]}, {func: 1, v: true, args: [{func: 1, v: true}]}, {func: 1, args: [W.KeyboardEvent]}, {func: 1, ret: P.$double}, {func: 1, v: true, args: [P.$double, P.$double]}, {func: 1, args: [P.String, P.String]}, {func: 1, args: [W.TouchEvent]}, {func: 1, args: [P.String,,]}, {func: 1, args: [B.Node0]}, {func: 1, v: true, args: [,], opt: [P.StackTrace]}, {func: 1, v: true, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.String, args: [P.$int]}, {func: 1, v: true, args: [P.String,,]}, {func: 1, ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]}, {func: 1, args: [, P.String]}, {func: 1, args: [{func: 1, v: true}]}, {func: 1, v: true, args: [,,]}, {func: 1, args: [P.Object]}, {func: 1, args: [P.List]}, {func: 1, args: [,], opt: [,]}, {func: 1, args: [, P.StackTrace]}, {func: 1, v: true, opt: [,]}, {func: 1, args: [P.Symbol,,]}, {func: 1, ret: P.String}, {func: 1, v: true, args: [W.Node, W.Node]}, {func: 1, v: true, args: [P.$int, P.$int, P.bool]}, {func: 1, args: [W.Event]}, {func: 1, ret: P.$int, args: [P.$int]}, {func: 1, ret: P.$double, args: [T.Vector3]}, {func: 1, v: true, args: [O.Ion]}, {func: 1, ret: P.$double, args: [P.$int]}, {func: 1, ret: P.String, args: [P.String,,]}, {func: 1, args: [W.WheelEvent]}, {func: 1, ret: P.String, args: [W.EventTarget]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, args: [P.String]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          } else
            if (result === sentinelInProgress)
              H.throwCyclicInit(staticName || fieldName);
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(function(a) {
        H.startRootIsolate(S.helios__main$closure(), a);
      }, []);
    else
      (function(a) {
        H.startRootIsolate(S.helios__main$closure(), a);
      })([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=helios.dart.js.map
